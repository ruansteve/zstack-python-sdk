import re
import sys

try:
    import urllib3
except ImportError:
    print 'urlib3 is not installed, run "pip install urlib3"'
    sys.exit(1)

import string
import json
from uuid import uuid4
import time
import threading
import functools
import traceback
import base64
import hmac
import sha
from hashlib import sha1
import datetime
import time

CONFIG_HOSTNAME = 'hostname'
CONFIG_PORT = 'port'
CONFIG_POLLING_TIMEOUT = 'default_polling_timeout'
CONFIG_POLLING_INTERVAL = 'default_polling_interval'
CONFIG_WEBHOOK = 'webhook'
CONFIG_READ_TIMEOUT = 'read_timeout'
CONFIG_WRITE_TIMEOUT = 'write_timeout'
CONFIG_CONTEXT_PATH = 'context_path'

HEADER_JOB_UUID = "X-Job-UUID"
HEADER_WEBHOOK = "X-Web-Hook"
HEADER_JOB_SUCCESS = "X-Job-Success"
HEADER_AUTHORIZATION = "Authorization"
OAUTH = "OAuth"
LOCATION = "location"

HTTP_ERROR = "sdk.1000"
POLLING_TIMEOUT_ERROR = "sdk.1001"
INTERNAL_ERROR = "sdk.1002"

__config__ = {}


class SdkError(Exception):
    pass


def _exception_safe(func):
    @functools.wraps(func)
    def wrap(*args, **kwargs):
        try:
            func(*args, **kwargs)
        except:
            print traceback.format_exc()

    return wrap


def _error_if_not_configured():
    if not __config__:
        raise SdkError('call configure() before using any APIs')


def _http_error(status, body=None):
    err = ErrorCode()
    err.code = HTTP_ERROR
    err.description = 'the http status code[%s] indicates a failure happened' % status
    err.details = body
    return {'error': err}


def _error(code, desc, details):
    err = ErrorCode()
    err.code = code
    err.desc = desc
    err.details = details
    return {'error': err}


def configure(
        hostname='127.0.0.1',
        context_path = None,
        port=8080,
        polling_timeout=3600*3,
        polling_interval=1,
        read_timeout=15,
        write_timeout=15,
        web_hook=None
):
    __config__[CONFIG_HOSTNAME] = hostname
    __config__[CONFIG_PORT] = port
    __config__[CONFIG_POLLING_TIMEOUT] = polling_timeout
    __config__[CONFIG_POLLING_INTERVAL] = polling_interval
    __config__[CONFIG_WEBHOOK] = web_hook
    __config__[CONFIG_READ_TIMEOUT] = read_timeout
    __config__[CONFIG_WRITE_TIMEOUT] = write_timeout
    __config__[CONFIG_CONTEXT_PATH] = context_path


class ParamAnnotation(object):
    def __init__(
            self,
            required=False,
            valid_values=None,
            valid_regex_values=None,
            max_length=None,
            min_length=None,
            non_empty=None,
            null_elements=None,
            empty_string=None,
            number_range=None,
            no_trim=False
    ):
        self.required = required
        self.valid_values = valid_values
        self.valid_regex_values = valid_regex_values
        self.max_length = max_length
        self.min_length = min_length
        self.non_empty = non_empty
        self.null_elements = null_elements
        self.empty_string = empty_string
        self.number_range = number_range
        self.no_trim = no_trim


class ErrorCode(object):
    def __init__(self):
        self.code = None
        self.description = None
        self.details = None
        self.cause = None


class Obj(object):
    def __init__(self, d):
        for a, b in d.items():
            if isinstance(b, (list, tuple)):
                setattr(self, a, [Obj(x) if isinstance(x, dict) else x for x in b])
            else:
                setattr(self, a, Obj(b) if isinstance(b, dict) else b)

    def __getattr__(self, item):
        return None


class AbstractAction(object):
    def __init__(self):
        self.apiId = None
        self.sessionId = None
        self.systemTags = None
        self.userTags = None
        self.timeout = None
        self.pollingInterval = None

        self._param_descriptors = {
            'systemTags': ParamAnnotation(),
            'userTags': ParamAnnotation()
        }

        self._param_descriptors.update(self.PARAMS)

    def _check_params(self):
        for param_name, annotation in self._param_descriptors.items():
            value = getattr(self, param_name, None)

            if value is None and annotation.required:
                raise SdkError('missing a mandatory parameter[%s]' % param_name)

            if value is not None and annotation.valid_values and value not in annotation.valid_values:
                raise SdkError('invalid parameter[%s], the value[%s] is not in the valid options%s' % (param_name, value, annotation.valid_values))

            if value is not None and isinstance(value, str) and annotation.max_length and len(value) > annotation.max_length:
                raise SdkError('invalid length[%s] of the parameter[%s], the max allowed length is %s' % (len(value), param_name, annotation.max_length))

            if value is not None and isinstance(value, str) and annotation.min_length and len(value) > annotation.min_length:
                raise SdkError('invalid length[%s] of the parameter[%s], the minimal allowed length is %s' % (len(value), param_name, annotation.min_length))

            if value is not None and isinstance(value, list) and annotation.non_empty is True and len(value) == 0:
                raise SdkError('invalid parameter[%s], it cannot be an empty list' % param_name)

            if value is not None and isinstance(value, list) and annotation.null_elements is True and None in value:
                raise SdkError('invalid parameter[%s], the list cannot contain a null element' % param_name)

            if value is not None and isinstance(value, str) and annotation.empty_string is False and len(value) == 0:
                raise SdkError('invalid parameter[%s], it cannot be an empty string' % param_name)

            if value is not None and (isinstance(value, int) or isinstance(value, long)) \
                    and annotation.number_range is not None and len(annotation.number_range) == 2:
                low = annotation.number_range[0]
                high = annotation.number_range[1]
                if value < low or value > high:
                    raise SdkError('invalid parameter[%s], its value is not in the valid range' % annotation.number_range)

            if value is not None and isinstance(value, str) and annotation.no_trim is False:
                value = str(value).strip()
                setattr(self, param_name, value)

        if self.NEED_SESSION:
            if self.sessionId is None and (self.accessKeyId is None or self.accessKeySecret is None):
                raise SdkError('sessionId or accessKey must be provided')

    def _params(self):
        ret = {}
        for k, _ in self._param_descriptors.items():
            val = getattr(self, k, None)
            if val is not None:
                ret[k] = val

        return ret

    def _query_string(self, params):
        queryParams = {}
        for k, v in params.items():
            if k == "accessKeySecret":
                continue
            if k == "accessKeyId":
                continue
            queryParams[k] = v
        return '&'.join(['%s=%s' % (k, v) for k, v in queryParams.items()])

    def _url(self):
        elements = ['http://', __config__[CONFIG_HOSTNAME], ':', str(__config__[CONFIG_PORT])]
        context_path = __config__.get(CONFIG_CONTEXT_PATH, None)
        if context_path is not None:
            elements.append(context_path)
        elements.append('/v1')

        path = self.PATH.replace('{', '${')
        unresolved = re.findall('${(.+?)}', path)
        params = self._params()
        if unresolved:
            for u in unresolved:
                if u in params:
                    raise SdkError('missing a mandatory parameter[%s]' % u)

        path = string.Template(path).substitute(params)
        elements.append(path)

        if self.HTTP_METHOD == 'GET' or self.HTTP_METHOD == 'DELETE':
            elements.append('?')
            elements.append(self._query_string(params))

        return ''.join(elements), unresolved

    def calculateAccessKey(self, url, date):
        # url example:  http://127.0.0.1:8080/zstack/v1/vminstances/uuid?xx
        elements = url.split(":")
        path = elements[2].split("/", 2)
        path = path[2].split("?")

        h = hmac.new(self.accessKeySecret, self.HTTP_METHOD + "\n"
            + date + "\n"
            + "/" + path[0], sha1)
        Signature = base64.b64encode(h.digest())
        return "ZStack %s:%s" % (self.accessKeyId, Signature)

    def call(self, cb=None):

        def _return(result):
            if cb:
                cb(result)
            else:
                return result

        _error_if_not_configured()

        self._check_params()
        url, params_in_url = self._url()

        headers = {}
        if self.apiId is not None:
            headers[HEADER_JOB_UUID] = self.apiId
        else:
            headers[HEADER_JOB_UUID] = _uuid()

        date = time.time()
        datestr = datetime.datetime.fromtimestamp(date).strftime('%a, %d %b %Y %H:%M:%S CST')

        if self.NEED_SESSION:
            if self.sessionId is not None:
                headers[HEADER_AUTHORIZATION] = "%s %s" % (OAUTH, self.sessionId)
            else :
                headers["Date"] = datestr
                headers[HEADER_AUTHORIZATION] = self.calculateAccessKey(url, datestr)

        web_hook = __config__.get(CONFIG_WEBHOOK, None)
        if web_hook is not None:
            headers[CONFIG_WEBHOOK] = web_hook

        params = self._params()
        body = None
        if self.HTTP_METHOD == 'POST' or self.HTTP_METHOD == 'PUT':
            m = {}
            for k, v in params.items():
                if v is None:
                    continue

                if k == 'sessionId':
                    continue

                if k == 'accessKeyId':
                    continue

                if k == 'accessKeySecret':
                    continue

                if k in params_in_url:
                    continue

                m[k] = v

            body = {self.PARAM_NAME: m}

        if not self.timeout:
            self.timeout = __config__[CONFIG_READ_TIMEOUT]

        rsp = _json_http(uri=url, body=body, headers=headers, method=self.HTTP_METHOD, timeout=self.timeout)

        if rsp.status < 200 or rsp.status >= 300:
            return _return(Obj(_http_error(rsp.status, rsp.data)))
        elif rsp.status == 200 or rsp.status == 204:
            # the API completes
            return _return(Obj(self._write_result(rsp)))
        elif rsp.status == 202:
            # the API needs polling
            return self._poll_result(rsp, cb)
        else:
            raise SdkError('[Internal Error] the server returns an unknown status code[%s], body[%s]' % (rsp.status, rsp.data))

    def _write_result(self, rsp):
        data = rsp.data
        if not data:
            data = '{}'

        if rsp.status == 200:
            return {"value": json.loads(data)}
        elif rsp.status == 503:
            return json.loads(data)
        else:
            raise SdkError('unknown status code[%s]' % rsp.status)

    def _poll_result(self, rsp, cb):
        if not self.NEED_POLL:
            raise SdkError('[Internal Error] the api is not an async API but the server returns 202 status code')

        m = json.loads(rsp.data)
        location = m[LOCATION]
        if not location:
            raise SdkError("Internal Error] the api[%s] is an async API but the server doesn't return the polling location url")

        if cb:
            # async polling
            self._async_poll(location, cb)
        else:
            # sync polling
            return self._sync_polling(location)

    def _fill_timeout_parameters(self):
        if self.timeout is None:
            self.timeout = __config__.get(CONFIG_POLLING_TIMEOUT)

        if self.pollingInterval is None:
            self.pollingInterval = __config__.get(CONFIG_POLLING_INTERVAL)

    def _async_poll(self, location, cb):
        @_exception_safe
        def _polling():
            ret = self._sync_polling(location)
            cb(ret)

        threading.Thread(target=_polling).start()

    def _sync_polling(self, location):
        count = 0
        self._fill_timeout_parameters()

        while count < self.timeout:
            rsp = _json_http(
                uri=location,
                headers={HEADER_AUTHORIZATION: "%s %s" % (OAUTH, self.sessionId)},
                method='GET'
            )

            if rsp.status not in [200, 503, 202]:
                return Obj(_http_error(rsp.status, rsp.data))
            elif rsp.status in [200, 503]:
                return Obj(self._write_result(rsp))

            time.sleep(self.pollingInterval)
            count += self.pollingInterval

        return Obj(_error(POLLING_TIMEOUT_ERROR, 'polling an API result time out',
                          'failed to poll the result after %s seconds' % self.timeout))


class QueryAction(AbstractAction):
    PARAMS = {
        'conditions': ParamAnnotation(required=True),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(valid_values=['asc', 'desc']),
        'fields': ParamAnnotation(),
    }

    def __init__(self):
        super(QueryAction, self).__init__()
        self.conditions = []
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.sessionId = None

    def _query_string(self, params):
        m = []

        ps = {}
        for k, v in params.items():
            if k in self.PARAMS:
                ps[k] = v

        for k, v in ps.items():
            if v is None:
                continue

            if k == 'accessKeySecret':
                continue

            if k == 'accessKeyId':
                continue

            if k == 'sortBy' and v is not None:
                if self.sortDirection is None:
                    m.append('sort=%s' % v)
                else:
                    op = '+' if self.sortDirection == 'asc' else '-'
                    m.append('sort=%s%s' % (op, v))
            elif k == 'sortDirection':
                continue
            elif k == 'fields':
                m.append('fields=%s' % ','.join(v))
            elif k == 'conditions':
                m.extend(['q=%s' % q for q in v])
            else:
                m.append('%s=%s' % (k, v))

        return '&'.join(m)


def _uuid():
    return str(uuid4()).replace('-', '')


def _json_http(
        uri,
        body=None,
        headers={},
        method='POST',
        timeout=120.0
):
    pool = urllib3.PoolManager(timeout=timeout, retries=urllib3.util.retry.Retry(15))
    headers.update({'Content-Type': 'application/json', 'Connection': 'close'})

    if body is not None and not isinstance(body, str):
        body = json.dumps(body).encode('utf-8')

    print '[Request]: %s url=%s, headers=%s, body=%s' % (method, uri, headers, body)
    if body:
        headers['Content-Length'] = len(body)
        rsp = pool.request(method, uri, body=body, headers=headers)
    else:
        rsp = pool.request(method, uri, headers=headers)

    print '[Response to %s %s]: status: %s, body: %s' % (method, uri, rsp.status, rsp.data)
    return rsp




class QueryVmInstanceAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/vm-instances'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryVmInstanceAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class AttachPolicyToUserAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/accounts/users/{userUuid}/policies'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'userUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'policyUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(AttachPolicyToUserAction, self).__init__()
        self.userUuid = None
        self.policyUuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CreateSchedulerTriggerAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/scheduler/triggers'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'name': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'schedulerInterval': ParamAnnotation(required=False,number_range=[1, 2147483647],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'repeatCount': ParamAnnotation(required=False,number_range=[0, 2147483647],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'startTime': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'schedulerType': ParamAnnotation(required=True,valid_values=['simple','cron'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'cron': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CreateSchedulerTriggerAction, self).__init__()
        self.name = None
        self.description = None
        self.schedulerInterval = None
        self.repeatCount = None
        self.startTime = None
        self.schedulerType = None
        self.cron = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class RecoverVmInstanceAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/vm-instances/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'recoverVmInstance'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(RecoverVmInstanceAction, self).__init__()
        self.uuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class GetVpcVRouterDistributedRoutingEnabledAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/vpc/virtual-routers/{uuid}/distributed-routing'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(GetVpcVRouterDistributedRoutingEnabledAction, self).__init__()
        self.uuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryAccountAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/accounts'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryAccountAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class AddMonToFusionstorPrimaryStorageAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/primary-storage/fusionstor/{uuid}/mons'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'monUrls': ParamAnnotation(required=True,non_empty=True,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(AddMonToFusionstorPrimaryStorageAction, self).__init__()
        self.uuid = None
        self.monUrls = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryAliyunProxyVpcAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/aliyun-proxy/vpcs'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryAliyunProxyVpcAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class AddVRouterNetworksToOspfAreaAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/routerArea/{routerAreaUuid}/router/{vRouterUuid}/addnetworks'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'routerAreaUuid': ParamAnnotation(required=True,non_empty=True,null_elements=False,empty_string=True,no_trim=False),
        'vRouterUuid': ParamAnnotation(required=True,non_empty=True,null_elements=False,empty_string=True,no_trim=False),
        'l3NetworkUuids': ParamAnnotation(required=True,non_empty=True,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(AddVRouterNetworksToOspfAreaAction, self).__init__()
        self.routerAreaUuid = None
        self.vRouterUuid = None
        self.l3NetworkUuids = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CreateMiniClusterAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/mini-clusters'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'zoneUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'hostManagementIps': ParamAnnotation(required=True,non_empty=True,null_elements=False,empty_string=True,no_trim=False),
        'username': ParamAnnotation(required=False,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'password': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'sshPort': ParamAnnotation(required=False,number_range=[1, 65535],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'hypervisorType': ParamAnnotation(required=True,valid_values=['KVM','Simulator'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CreateMiniClusterAction, self).__init__()
        self.zoneUuid = None
        self.name = None
        self.hostManagementIps = None
        self.username = None
        self.password = None
        self.sshPort = None
        self.description = None
        self.hypervisorType = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteCertificateAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/certificates/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteCertificateAction, self).__init__()
        self.uuid = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryTicketFlowAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/tickets/flow'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryTicketFlowAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteSNSApplicationPlatformAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/sns/application-platforms/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteSNSApplicationPlatformAction, self).__init__()
        self.uuid = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class PrometheusQueryLabelValuesAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/prometheus/labels'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'labels': ParamAnnotation(required=True,non_empty=True,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(PrometheusQueryLabelValuesAction, self).__init__()
        self.labels = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryImageStoreBackupStorageAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/backup-storage/image-store'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryImageStoreBackupStorageAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class SyncConnectionAccessPointFromRemoteAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/hybrid/aliyun/access-point/{dataCenterUuid}/sync'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'syncConnectionAccessPointFromRemote'

    PARAMS = {
        'dataCenterUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'accessPointId': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(SyncConnectionAccessPointFromRemoteAction, self).__init__()
        self.dataCenterUuid = None
        self.accessPointId = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class SubscribeSNSTopicAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/sns/topics/{topicUuid}/endpoints/{endpointUuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'topicUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'endpointUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(SubscribeSNSTopicAction, self).__init__()
        self.topicUuid = None
        self.endpointUuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class GetCandidateZonesClustersHostsForCreatingVmAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/vm-instances/candidate-destinations'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'instanceOfferingUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'imageUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'l3NetworkUuids': ParamAnnotation(required=True,non_empty=True,null_elements=False,empty_string=True,no_trim=False),
        'rootDiskOfferingUuid': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'dataDiskOfferingUuids': ParamAnnotation(required=False,non_empty=True,null_elements=False,empty_string=True,no_trim=False),
        'zoneUuid': ParamAnnotation(),
        'clusterUuid': ParamAnnotation(),
        'defaultL3NetworkUuid': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(GetCandidateZonesClustersHostsForCreatingVmAction, self).__init__()
        self.instanceOfferingUuid = None
        self.imageUuid = None
        self.l3NetworkUuids = None
        self.rootDiskOfferingUuid = None
        self.dataDiskOfferingUuids = None
        self.zoneUuid = None
        self.clusterUuid = None
        self.defaultL3NetworkUuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CheckIpAvailabilityAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/l3-networks/{l3NetworkUuid}/ip/{ip}/availability'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'l3NetworkUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'ip': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CheckIpAvailabilityAction, self).__init__()
        self.l3NetworkUuid = None
        self.ip = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CreateVpcVRouterAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/vpc/virtual-routers'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'name': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'virtualRouterOfferingUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CreateVpcVRouterAction, self).__init__()
        self.name = None
        self.virtualRouterOfferingUuid = None
        self.description = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteAlertAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/monitoring/alerts'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuids': ParamAnnotation(required=True,non_empty=True,null_elements=False,empty_string=True,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteAlertAction, self).__init__()
        self.uuids = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class StartBaremetalPxeServerAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/baremetal/pxeservers/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'startBaremetalPxeServer'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(StartBaremetalPxeServerAction, self).__init__()
        self.uuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteHybridEipRemoteAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/hybrid/eip/{uuid}/remote'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'type': ParamAnnotation(required=True,valid_values=['aliyun'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteHybridEipRemoteAction, self).__init__()
        self.type = None
        self.uuid = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CreateIAM2ProjectFromTemplateAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/iam2/projects/from/templates/{templateUuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'name': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'templateUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'roleUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CreateIAM2ProjectFromTemplateAction, self).__init__()
        self.name = None
        self.description = None
        self.templateUuid = None
        self.roleUuids = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class GetNicQosAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/vm-instances/{uuid}/nic-qos'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'forceSync': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(GetNicQosAction, self).__init__()
        self.uuid = None
        self.forceSync = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class GetImageQgaAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/images/{uuid}/qga'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(GetImageQgaAction, self).__init__()
        self.uuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class GetBackupStorageTypesAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/backup-storage/types'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(GetBackupStorageTypesAction, self).__init__()
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class TerminateVirtualBorderRouterRemoteAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/hybrid/aliyun/border-router/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'terminateVirtualBorderRouterRemote'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(TerminateVirtualBorderRouterRemoteAction, self).__init__()
        self.uuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteAliyunSnapshotFromRemoteAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/hybrid/aliyun/snapshot/{uuid}/remote'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteAliyunSnapshotFromRemoteAction, self).__init__()
        self.uuid = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DetachL3NetworksFromIPsecConnectionAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/ipsec/{uuid}/l3networks'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'l3NetworkUuids': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DetachL3NetworksFromIPsecConnectionAction, self).__init__()
        self.uuid = None
        self.l3NetworkUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class ChangeImageStateAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/images/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'changeImageState'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'stateEvent': ParamAnnotation(required=True,valid_values=['enable','disable'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(ChangeImageStateAction, self).__init__()
        self.uuid = None
        self.stateEvent = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class SubscribeEventAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/zwatch/events/subscriptions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'name': ParamAnnotation(required=False,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'namespace': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'eventName': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'actions': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'labels': ParamAnnotation(),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(SubscribeEventAction, self).__init__()
        self.name = None
        self.namespace = None
        self.eventName = None
        self.actions = None
        self.labels = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteSecurityGroupAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/security-groups/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteSecurityGroupAction, self).__init__()
        self.uuid = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class LoginIAM2VirtualIDAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/iam2/virtual-ids/login'
    NEED_SESSION = False
    NEED_POLL = False
    PARAM_NAME = 'loginIAM2VirtualID'

    PARAMS = {
        'name': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'password': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'captchaUuid': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'verifyCode': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation()
    }

    def __init__(self):
        super(LoginIAM2VirtualIDAction, self).__init__()
        self.name = None
        self.password = None
        self.captchaUuid = None
        self.verifyCode = None
        self.systemTags = None
        self.userTags = None


class DeleteIAM2VirtualIDGroupAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/iam2/projects/groups/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteIAM2VirtualIDGroupAction, self).__init__()
        self.uuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class AddAliyunNasMountTargetAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/nas/aliyun/mount'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'addAliyunNasMountTarget'

    PARAMS = {
        'nasFSUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=False,no_trim=False),
        'mountDomain': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=False,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(AddAliyunNasMountTargetAction, self).__init__()
        self.nasFSUuid = None
        self.name = None
        self.mountDomain = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class GetAliyunNasMountTargetRemoteAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/nas/aliyun/mount/remote'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'nasFSUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'mountDomain': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=False,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(GetAliyunNasMountTargetRemoteAction, self).__init__()
        self.nasFSUuid = None
        self.mountDomain = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DetachAliyunDiskFromEcsAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/hybrid/aliyun/disk/{uuid}/detach'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DetachAliyunDiskFromEcsAction, self).__init__()
        self.uuid = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class AddSharedBlockGroupPrimaryStorageAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/primary-storage/sharedblockgroup'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'diskUuids': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'url': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'type': ParamAnnotation(),
        'zoneUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(AddSharedBlockGroupPrimaryStorageAction, self).__init__()
        self.diskUuids = None
        self.url = None
        self.name = None
        self.description = None
        self.type = None
        self.zoneUuid = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class GetOssBackupBucketFromRemoteAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/hybrid/backup-mysql/oss'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(GetOssBackupBucketFromRemoteAction, self).__init__()
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class LogInByAccountAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/accounts/login'
    NEED_SESSION = False
    NEED_POLL = False
    PARAM_NAME = 'logInByAccount'

    PARAMS = {
        'accountName': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'password': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'accountType': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'captchaUuid': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'verifyCode': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation()
    }

    def __init__(self):
        super(LogInByAccountAction, self).__init__()
        self.accountName = None
        self.password = None
        self.accountType = None
        self.captchaUuid = None
        self.verifyCode = None
        self.systemTags = None
        self.userTags = None


class QueryFiberChannelStorageAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/storage-devices/fiber-channel/controllers'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryFiberChannelStorageAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CheckApiPermissionAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/accounts/permissions/actions'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = 'checkApiPermission'

    PARAMS = {
        'userUuid': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'apiNames': ParamAnnotation(required=True,non_empty=True,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CheckApiPermissionAction, self).__init__()
        self.userUuid = None
        self.apiNames = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class ResumeVmInstanceAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/vm-instances/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'resumeVmInstance'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(ResumeVmInstanceAction, self).__init__()
        self.uuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteIAM2ProjectAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/iam2/projects/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteIAM2ProjectAction, self).__init__()
        self.uuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryApplianceVmAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/vm-instances/appliances'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryApplianceVmAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteLongJobAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/longjobs/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteLongJobAction, self).__init__()
        self.uuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class RevertVolumeFromSnapshotAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/volume-snapshots/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'revertVolumeFromSnapshot'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(RevertVolumeFromSnapshotAction, self).__init__()
        self.uuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class ResizeRootVolumeAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/volumes/resize/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'resizeRootVolume'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'size': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(ResizeRootVolumeAction, self).__init__()
        self.uuid = None
        self.size = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteVolumeSnapshotAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/volume-snapshots/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteVolumeSnapshotAction, self).__init__()
        self.uuid = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class UpdateCephPrimaryStorageMonAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/primary-storage/ceph/mons/{monUuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'updateCephPrimaryStorageMon'

    PARAMS = {
        'monUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=False,no_trim=False),
        'hostname': ParamAnnotation(required=False,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'sshUsername': ParamAnnotation(required=False,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'sshPassword': ParamAnnotation(required=False,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'sshPort': ParamAnnotation(required=False,number_range=[1, 65535],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'monPort': ParamAnnotation(required=False,number_range=[1, 65535],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(UpdateCephPrimaryStorageMonAction, self).__init__()
        self.monUuid = None
        self.hostname = None
        self.sshUsername = None
        self.sshPassword = None
        self.sshPort = None
        self.monPort = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteExportedImageFromBackupStorageAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/backup-storage/{backupStorageUuid}/exported-images/{imageUuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'backupStorageUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'imageUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteExportedImageFromBackupStorageAction, self).__init__()
        self.backupStorageUuid = None
        self.imageUuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class GetVRouterOspfNeighborAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/routerArea/{vRouterUuid}/neighbor'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'vRouterUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(GetVRouterOspfNeighborAction, self).__init__()
        self.vRouterUuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class SyncEcsImageFromRemoteAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/hybrid/aliyun/image/{dataCenterUuid}/sync'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'dataCenterUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'type': ParamAnnotation(required=False,valid_values=['system','self'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(SyncEcsImageFromRemoteAction, self).__init__()
        self.dataCenterUuid = None
        self.type = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class GetMetricDataAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/zwatch/metrics'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'namespace': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'metricName': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'startTime': ParamAnnotation(required=False,number_range=[0, 9223372036854775807],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'endTime': ParamAnnotation(required=False,number_range=[0, 9223372036854775807],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'offsetAheadOfCurrentTime': ParamAnnotation(required=False,number_range=[0, 9223372036854775807],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'period': ParamAnnotation(required=False,number_range=[0, 2147483647],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'labels': ParamAnnotation(),
        'functions': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(GetMetricDataAction, self).__init__()
        self.namespace = None
        self.metricName = None
        self.startTime = None
        self.endTime = None
        self.offsetAheadOfCurrentTime = None
        self.period = None
        self.labels = None
        self.functions = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class AttachIscsiServerToClusterAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/clusters/{clusterUuid}/storage-devices/iscsi/servers/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'clusterUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(AttachIscsiServerToClusterAction, self).__init__()
        self.uuid = None
        self.clusterUuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class UpdateDiskOfferingAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/disk-offerings/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'updateDiskOffering'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=False,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(UpdateDiskOfferingAction, self).__init__()
        self.uuid = None
        self.name = None
        self.description = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class ReloadElaborationAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/errorcode/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'reloadElaboration'

    PARAMS = {
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(ReloadElaborationAction, self).__init__()
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteDataVolumeAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/volumes/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteDataVolumeAction, self).__init__()
        self.uuid = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class GetPrimaryStorageCapacityAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/primary-storage/capacities'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'zoneUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'clusterUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'primaryStorageUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'all': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(GetPrimaryStorageCapacityAction, self).__init__()
        self.zoneUuids = None
        self.clusterUuids = None
        self.primaryStorageUuids = None
        self.all = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DetachL2NetworkFromClusterAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/l2-networks/{l2NetworkUuid}/clusters/{clusterUuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'l2NetworkUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'clusterUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DetachL2NetworkFromClusterAction, self).__init__()
        self.l2NetworkUuid = None
        self.clusterUuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DetachDataVolumeFromVmAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/volumes/{uuid}/vm-instances'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'vmUuid': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DetachDataVolumeFromVmAction, self).__init__()
        self.uuid = None
        self.vmUuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class GetBackupStorageCandidatesForImageMigrationAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/backup-storage/{srcBackupStorageUuid}/migration-candidates'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'srcBackupStorageUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(GetBackupStorageCandidatesForImageMigrationAction, self).__init__()
        self.srcBackupStorageUuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryVmCdRomAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/vm-instances/cdroms'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryVmCdRomAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class AttachTagToResourcesAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/tags/{tagUuid}/resources'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'tagUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuids': ParamAnnotation(required=True,non_empty=True,null_elements=False,empty_string=True,no_trim=False),
        'tokens': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(AttachTagToResourcesAction, self).__init__()
        self.tagUuid = None
        self.resourceUuids = None
        self.tokens = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class ReconnectPrimaryStorageAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/primary-storage/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'reconnectPrimaryStorage'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(ReconnectPrimaryStorageAction, self).__init__()
        self.uuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class AttachUsbDeviceToVmAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/usb-device/usb-devices/{usbDeviceUuid}/attach'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'usbDeviceUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'vmInstanceUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(AttachUsbDeviceToVmAction, self).__init__()
        self.usbDeviceUuid = None
        self.vmInstanceUuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class AttachAutoScalingTemplateToGroupAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/autoscaling/template/{uuid}/groups/{groupUuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'groupUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(AttachAutoScalingTemplateToGroupAction, self).__init__()
        self.uuid = None
        self.groupUuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryLoadBalancerAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/load-balancers'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryLoadBalancerAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class AttachIsoToVmInstanceAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/vm-instances/{vmInstanceUuid}/iso/{isoUuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'null'

    PARAMS = {
        'vmInstanceUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'isoUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(AttachIsoToVmInstanceAction, self).__init__()
        self.vmInstanceUuid = None
        self.isoUuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class AttachAliyunKeyAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/hybrid/aliyun/key/{uuid}/attach'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'attachAliyunKey'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(AttachAliyunKeyAction, self).__init__()
        self.uuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class GetNetworkServiceTypesAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/network-services/types'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(GetNetworkServiceTypesAction, self).__init__()
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteDiskOfferingAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/disk-offerings/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteDiskOfferingAction, self).__init__()
        self.uuid = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class RefreshCaptchaAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/captcha/refresh'
    NEED_SESSION = False
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation()
    }

    def __init__(self):
        super(RefreshCaptchaAction, self).__init__()
        self.uuid = None
        self.systemTags = None
        self.userTags = None


class DeleteSchedulerTriggerAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/scheduler/triggers/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteSchedulerTriggerAction, self).__init__()
        self.uuid = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DetachL3NetworkFromVmAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/vm-instances/nics/{vmNicUuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'vmNicUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DetachL3NetworkFromVmAction, self).__init__()
        self.vmNicUuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeletePortForwardingRuleAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/port-forwarding/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeletePortForwardingRuleAction, self).__init__()
        self.uuid = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CalculateAccountSpendingAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/billings/accounts/{accountUuid}/actions'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = 'calculateAccountSpending'

    PARAMS = {
        'accountUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'dateStart': ParamAnnotation(required=False,number_range=[0, 9223372036854775807],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'dateEnd': ParamAnnotation(required=False,number_range=[0, 9223372036854775807],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CalculateAccountSpendingAction, self).__init__()
        self.accountUuid = None
        self.dateStart = None
        self.dateEnd = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class GetSharedBlockCandidateAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/primary-storage/sharedblockgroup/sharedblock-candidates'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'clusterUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(GetSharedBlockCandidateAction, self).__init__()
        self.clusterUuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class UpdateFusionstorBackupStorageMonAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/backup-storage/fusionstor/mons/{monUuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'updateFusionstorBackupStorageMon'

    PARAMS = {
        'monUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=False,no_trim=False),
        'hostname': ParamAnnotation(required=False,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'sshUsername': ParamAnnotation(required=False,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'sshPassword': ParamAnnotation(required=False,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'sshPort': ParamAnnotation(required=False,number_range=[1, 65535],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'monPort': ParamAnnotation(required=False,number_range=[1, 65535],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(UpdateFusionstorBackupStorageMonAction, self).__init__()
        self.monUuid = None
        self.hostname = None
        self.sshUsername = None
        self.sshPassword = None
        self.sshPort = None
        self.monPort = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class UpdateAutoScalingGroupAddingNewInstanceRuleAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/autoscaling/rules/adding-new-instance/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'updateAutoScalingGroupAddingNewInstanceRule'

    PARAMS = {
        'adjustmentType': ParamAnnotation(required=False,valid_values=['QuantityChangeInCapacity','PercentChangeInCapacity','TotalCapacity'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'adjustmentValue': ParamAnnotation(required=False,number_range=[1, 9223372036854775807],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=False,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'cooldown': ParamAnnotation(required=False,number_range=[1, 900],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(UpdateAutoScalingGroupAddingNewInstanceRuleAction, self).__init__()
        self.adjustmentType = None
        self.adjustmentValue = None
        self.uuid = None
        self.name = None
        self.description = None
        self.cooldown = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DetachHybridKeyAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/hybrid/hybrid/key/{uuid}/detach'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'detachHybridKey'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DetachHybridKeyAction, self).__init__()
        self.uuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DetachNetworkServiceFromL3NetworkAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/l3-networks/{l3NetworkUuid}/network-services'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'l3NetworkUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'networkServices': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DetachNetworkServiceFromL3NetworkAction, self).__init__()
        self.l3NetworkUuid = None
        self.networkServices = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CreateVpnIkeConfigAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/hybrid/vpn-connection/ike'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'name': ParamAnnotation(required=True,max_length=64,non_empty=False,null_elements=False,empty_string=False,no_trim=False),
        'psk': ParamAnnotation(required=True,max_length=32,non_empty=False,null_elements=False,empty_string=False,no_trim=False),
        'pfs': ParamAnnotation(required=False,valid_values=['disabled','group1','group2','group5','group14','group24'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'version': ParamAnnotation(required=False,valid_values=['ikev1','ikev2'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'mode': ParamAnnotation(required=False,valid_values=['main','aggressive'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'encAlg': ParamAnnotation(required=False,valid_values=['3des','aes-128','aes-192','aes-256','des'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'authAlg': ParamAnnotation(required=False,valid_values=['md5','sha1'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'lifetime': ParamAnnotation(required=False,number_range=[60, 86400],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'localIp': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=False,no_trim=False),
        'remoteIp': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=False,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=1024,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CreateVpnIkeConfigAction, self).__init__()
        self.name = None
        self.psk = None
        self.pfs = None
        self.version = None
        self.mode = None
        self.encAlg = None
        self.authAlg = None
        self.lifetime = None
        self.localIp = None
        self.remoteIp = None
        self.description = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CreateEmailMediaAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/media/emails'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'smtpServer': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'smtpPort': ParamAnnotation(required=True,number_range=[1, 65535],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'username': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'password': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CreateEmailMediaAction, self).__init__()
        self.smtpServer = None
        self.smtpPort = None
        self.username = None
        self.password = None
        self.name = None
        self.description = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class SyncVmBackupFromImageStoreBackupStorageAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/vm-backups/{groupUuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'syncVmBackupFromImageStoreBackupStorage'

    PARAMS = {
        'groupUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'srcBackupStorageUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'dstBackupStorageUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(SyncVmBackupFromImageStoreBackupStorageAction, self).__init__()
        self.groupUuid = None
        self.srcBackupStorageUuid = None
        self.dstBackupStorageUuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CreateVmBackupAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/volumes/{rootVolumeUuid}/vm-backups'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'rootVolumeUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'backupStorageUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'mode': ParamAnnotation(required=False,valid_values=['full'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'volumeReadBandwidth': ParamAnnotation(required=False,number_range=[1024, 9223372036854775807],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'volumeWriteBandwidth': ParamAnnotation(required=False,number_range=[1024, 9223372036854775807],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'networkReadBandwidth': ParamAnnotation(required=False,number_range=[1024, 9223372036854775807],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'networkWriteBandwidth': ParamAnnotation(required=False,number_range=[1024, 9223372036854775807],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CreateVmBackupAction, self).__init__()
        self.rootVolumeUuid = None
        self.backupStorageUuid = None
        self.name = None
        self.description = None
        self.mode = None
        self.volumeReadBandwidth = None
        self.volumeWriteBandwidth = None
        self.networkReadBandwidth = None
        self.networkWriteBandwidth = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CreateUserTagAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/user-tags'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'resourceType': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'tag': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CreateUserTagAction, self).__init__()
        self.resourceType = None
        self.resourceUuid = None
        self.tag = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CreateOssBackupBucketRemoteAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/hybrid/backup-mysql/oss'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'regionId': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=False,no_trim=False),
        'ossDomain': ParamAnnotation(required=False,max_length=127,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'ossKey': ParamAnnotation(required=False,max_length=127,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'ossSecret': ParamAnnotation(required=False,max_length=127,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CreateOssBackupBucketRemoteAction, self).__init__()
        self.regionId = None
        self.ossDomain = None
        self.ossKey = None
        self.ossSecret = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class GetCandidatePrimaryStoragesForCreatingVmAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/vm-instances/candidate-storages'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'imageUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'l3NetworkUuids': ParamAnnotation(required=True,non_empty=True,null_elements=False,empty_string=True,no_trim=False),
        'rootDiskOfferingUuid': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'dataDiskOfferingUuids': ParamAnnotation(required=False,non_empty=True,null_elements=False,empty_string=True,no_trim=False),
        'zoneUuid': ParamAnnotation(),
        'clusterUuid': ParamAnnotation(),
        'defaultL3NetworkUuid': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(GetCandidatePrimaryStoragesForCreatingVmAction, self).__init__()
        self.imageUuid = None
        self.l3NetworkUuids = None
        self.rootDiskOfferingUuid = None
        self.dataDiskOfferingUuids = None
        self.zoneUuid = None
        self.clusterUuid = None
        self.defaultL3NetworkUuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryTicketFlowCollectionAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/tickets/flow-collections'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryTicketFlowCollectionAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class UpdateEcsSecurityGroupAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/hybrid/aliyun/security-group/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'updateEcsSecurityGroup'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=256,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=False,max_length=64,non_empty=False,null_elements=False,empty_string=False,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(UpdateEcsSecurityGroupAction, self).__init__()
        self.uuid = None
        self.description = None
        self.name = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class GetCandidateVmNicForSecurityGroupAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/security-groups/{securityGroupUuid}/vm-instances/candidate-nics'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'securityGroupUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(GetCandidateVmNicForSecurityGroupAction, self).__init__()
        self.securityGroupUuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class GetMissedElaborationAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/errorcode/elaborations/missed'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'repeats': ParamAnnotation(required=False,number_range=[1, 9223372036854775807],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'startTime': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(GetMissedElaborationAction, self).__init__()
        self.repeats = None
        self.startTime = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class UpdateOssBucketAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/hybrid/aliyun/oss-bucket/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'updateOssBucket'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=1024,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'ossDomain': ParamAnnotation(required=False,max_length=256,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'ossKey': ParamAnnotation(required=False,max_length=127,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'ossSecret': ParamAnnotation(required=False,max_length=127,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(UpdateOssBucketAction, self).__init__()
        self.uuid = None
        self.description = None
        self.ossDomain = None
        self.ossKey = None
        self.ossSecret = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteBaremetalChassisAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/baremetal/chassis/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteBaremetalChassisAction, self).__init__()
        self.uuid = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class ExpungeBaremetalInstanceAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/baremetal/instances/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'expungeBaremetalInstance'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(ExpungeBaremetalInstanceAction, self).__init__()
        self.uuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class GetVmStartingCandidateClustersHostsAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/vm-instances/{uuid}/starting-target-hosts'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(GetVmStartingCandidateClustersHostsAction, self).__init__()
        self.uuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class GetLicenseInfoAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/licenses'
    NEED_SESSION = False
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation()
    }

    def __init__(self):
        super(GetLicenseInfoAction, self).__init__()
        self.systemTags = None
        self.userTags = None


class DetachIsoFromVmInstanceAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/vm-instances/{vmInstanceUuid}/iso'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'vmInstanceUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'isoUuid': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DetachIsoFromVmInstanceAction, self).__init__()
        self.vmInstanceUuid = None
        self.isoUuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class GetVmUsbRedirectAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/vm-instances/{uuid}/usbredirect'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(GetVmUsbRedirectAction, self).__init__()
        self.uuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class UpdateEventDataAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/zwatch/events/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'updateEventData'

    PARAMS = {
        'dataUuid': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'dataStartTime': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'dataEndTime': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'updateMode': ParamAnnotation(required=True,valid_values=['OnlyOne','InRange','All'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'readStatus': ParamAnnotation(required=False,valid_values=['Read','Unread'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(UpdateEventDataAction, self).__init__()
        self.dataUuid = None
        self.dataStartTime = None
        self.dataEndTime = None
        self.updateMode = None
        self.readStatus = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryEcsInstanceFromLocalAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/hybrid/aliyun/ecs'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryEcsInstanceFromLocalAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class AddVmToAffinityGroupAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/affinity-groups/{affinityGroupUuid}/vm-instances/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'affinityGroupUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(AddVmToAffinityGroupAction, self).__init__()
        self.affinityGroupUuid = None
        self.uuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class ChangeRoleStateAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/identities/roles/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'changeRoleState'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'stateEvent': ParamAnnotation(required=True,valid_values=['enable','disable'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(ChangeRoleStateAction, self).__init__()
        self.uuid = None
        self.stateEvent = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DetachEipAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/eips/{uuid}/vm-instances/nics'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DetachEipAction, self).__init__()
        self.uuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class ChangeL3NetworkStateAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/l3-networks/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'changeL3NetworkState'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'stateEvent': ParamAnnotation(required=True,valid_values=['enable','disable'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(ChangeL3NetworkStateAction, self).__init__()
        self.uuid = None
        self.stateEvent = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class UpdateAlarmLabelAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/zwatch/alarms/labels/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'updateAlarmLabel'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'key': ParamAnnotation(required=True,max_length=1024,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'value': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'operator': ParamAnnotation(required=True,valid_values=['Regex','Equal'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(UpdateAlarmLabelAction, self).__init__()
        self.uuid = None
        self.key = None
        self.value = None
        self.operator = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryAliyunNasAccessGroupAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/nas/aliyun/access'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryAliyunNasAccessGroupAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteBackupFileInPublicAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/hybrid/backup-mysql'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'type': ParamAnnotation(required=True,valid_values=['aliyun'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'regionId': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=False,no_trim=False),
        'file': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=False,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteBackupFileInPublicAction, self).__init__()
        self.type = None
        self.regionId = None
        self.file = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class ChangeResourceOwnerAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/account/{accountUuid}/resources'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'accountUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(required=True,non_empty=True,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(ChangeResourceOwnerAction, self).__init__()
        self.accountUuid = None
        self.resourceUuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class AddSharedBlockToSharedBlockGroupAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/primary-storage/sharedblockgroup/{uuid}/sharedblocks'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'diskUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(AddSharedBlockToSharedBlockGroupAction, self).__init__()
        self.diskUuid = None
        self.uuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class ChangeIPSecConnectionStateAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/ipsec/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'changeIPSecConnectionState'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'stateEvent': ParamAnnotation(required=True,valid_values=['enable','disable'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(ChangeIPSecConnectionStateAction, self).__init__()
        self.uuid = None
        self.stateEvent = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class UpdateBackupStorageAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/backup-storage/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'updateBackupStorage'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=False,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(UpdateBackupStorageAction, self).__init__()
        self.uuid = None
        self.name = None
        self.description = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class LogInByUserAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/accounts/users/login'
    NEED_SESSION = False
    NEED_POLL = False
    PARAM_NAME = 'logInByUser'

    PARAMS = {
        'accountUuid': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'accountName': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'userName': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'password': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation()
    }

    def __init__(self):
        super(LogInByUserAction, self).__init__()
        self.accountUuid = None
        self.accountName = None
        self.userName = None
        self.password = None
        self.systemTags = None
        self.userTags = None


class ResetGlobalConfigAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/global-configurations/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'resetGlobalConfig'

    PARAMS = {
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(ResetGlobalConfigAction, self).__init__()
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteResourceConfigAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/resource-configurations/{category}/{name}/{resourceUuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'category': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteResourceConfigAction, self).__init__()
        self.category = None
        self.name = None
        self.resourceUuid = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class UpdateClusterOSAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/clusters/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'updateClusterOS'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'excludePackages': ParamAnnotation(required=False,non_empty=True,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(UpdateClusterOSAction, self).__init__()
        self.uuid = None
        self.excludePackages = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteVpcVpnConnectionLocalAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/hybrid/vpn-connection/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteVpcVpnConnectionLocalAction, self).__init__()
        self.uuid = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class GetOssBucketNameFromRemoteAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/hybrid/oss/{dataCenterUuid}/remote'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'dataCenterUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'ossDomain': ParamAnnotation(required=False,max_length=256,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'ossKey': ParamAnnotation(required=False,max_length=127,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'ossSecret': ParamAnnotation(required=False,max_length=127,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(GetOssBucketNameFromRemoteAction, self).__init__()
        self.dataCenterUuid = None
        self.ossDomain = None
        self.ossKey = None
        self.ossSecret = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class PrometheusQueryPassThroughAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/prometheus/all'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'instant': ParamAnnotation(),
        'startTime': ParamAnnotation(required=False,number_range=[0, 9223372036854775807],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'endTime': ParamAnnotation(required=False,number_range=[0, 9223372036854775807],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'step': ParamAnnotation(),
        'expression': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'relativeTime': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(PrometheusQueryPassThroughAction, self).__init__()
        self.instant = None
        self.startTime = None
        self.endTime = None
        self.step = None
        self.expression = None
        self.relativeTime = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class AddLdapServerAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/ldap/servers'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'name': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'url': ParamAnnotation(required=True,max_length=1024,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'base': ParamAnnotation(required=True,max_length=1024,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'username': ParamAnnotation(required=True,max_length=1024,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'password': ParamAnnotation(required=True,max_length=1024,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'encryption': ParamAnnotation(required=True,valid_values=['None','TLS'],max_length=1024,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(AddLdapServerAction, self).__init__()
        self.name = None
        self.description = None
        self.url = None
        self.base = None
        self.username = None
        self.password = None
        self.encryption = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryEcsSecurityGroupFromLocalAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/hybrid/aliyun/security-group'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryEcsSecurityGroupFromLocalAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryGCJobAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/gc-jobs'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryGCJobAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class SyncDataCenterFromRemoteAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/hybrid/data-center/{uuid}/sync'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(SyncDataCenterFromRemoteAction, self).__init__()
        self.uuid = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class UpdateTagAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/tags/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'updateTag'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=False,max_length=128,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'value': ParamAnnotation(required=False,max_length=128,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'color': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(UpdateTagAction, self).__init__()
        self.uuid = None
        self.name = None
        self.value = None
        self.description = None
        self.color = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class ChangePortForwardingRuleStateAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/port-forwarding/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'changePortForwardingRuleState'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'stateEvent': ParamAnnotation(required=True,valid_values=['enable','disable'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(ChangePortForwardingRuleStateAction, self).__init__()
        self.uuid = None
        self.stateEvent = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryVCenterPrimaryStorageAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/vcenters/primary-storage'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryVCenterPrimaryStorageAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CreateCertificateAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/certificates'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'name': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'certificate': ParamAnnotation(required=True,max_length=60000,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CreateCertificateAction, self).__init__()
        self.name = None
        self.certificate = None
        self.description = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class SyncVpcVpnGatewayFromRemoteAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/hybrid/vpc-vpn/{dataCenterUuid}/sync'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'syncVpcVpnGatewayFromRemote'

    PARAMS = {
        'dataCenterUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(SyncVpcVpnGatewayFromRemoteAction, self).__init__()
        self.dataCenterUuid = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CreateZoneAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/zones'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'name': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CreateZoneAction, self).__init__()
        self.name = None
        self.description = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class SetVolumeQosAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/volumes/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'setVolumeQos'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'mode': ParamAnnotation(required=False,valid_values=['total','read','write'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'volumeBandwidth': ParamAnnotation(required=True,number_range=[1024, 9223372036854775807],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(SetVolumeQosAction, self).__init__()
        self.uuid = None
        self.mode = None
        self.volumeBandwidth = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class SetVRouterRouterIdAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/routerArea/{vRouterUuid}/routerid'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'vRouterUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'routerId': ParamAnnotation(required=True,max_length=16,non_empty=False,null_elements=False,empty_string=False,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(SetVRouterRouterIdAction, self).__init__()
        self.vRouterUuid = None
        self.routerId = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class AddActionToAlarmAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/zwatch/alarms/{alarmUuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'alarmUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'actionUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'actionType': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(AddActionToAlarmAction, self).__init__()
        self.alarmUuid = None
        self.actionUuid = None
        self.actionType = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QuerySharedResourceAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/accounts/resources'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QuerySharedResourceAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class SetVmMonitorNumberAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/vm-instances/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'setVmMonitorNumber'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'monitorNumber': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(SetVmMonitorNumberAction, self).__init__()
        self.uuid = None
        self.monitorNumber = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteDataCenterInLocalAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/hybrid/data-center/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteDataCenterInLocalAction, self).__init__()
        self.uuid = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryVRouterRouteEntryAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/vrouter-route-tables/route-entries'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryVRouterRouteEntryAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteVmBackupAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/vm-backups/{groupUuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'groupUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'backupStorageUuids': ParamAnnotation(required=False,non_empty=True,null_elements=False,empty_string=True,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteVmBackupAction, self).__init__()
        self.groupUuid = None
        self.backupStorageUuids = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteAlarmAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/zwatch/alarms/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteAlarmAction, self).__init__()
        self.uuid = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class ChangeInstanceOfferingStateAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/instance-offerings/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'changeInstanceOfferingState'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'stateEvent': ParamAnnotation(required=True,valid_values=['enable','disable'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(ChangeInstanceOfferingStateAction, self).__init__()
        self.uuid = None
        self.stateEvent = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class ReconnectVirtualRouterAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/vm-instances/appliances/virtual-routers/{vmInstanceUuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'reconnectVirtualRouter'

    PARAMS = {
        'vmInstanceUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(ReconnectVirtualRouterAction, self).__init__()
        self.vmInstanceUuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class AddSimulatorHostAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/hosts/simulators'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'memoryCapacity': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'cpuCapacity': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'managementIp': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=False,no_trim=False),
        'clusterUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(AddSimulatorHostAction, self).__init__()
        self.memoryCapacity = None
        self.cpuCapacity = None
        self.name = None
        self.description = None
        self.managementIp = None
        self.clusterUuid = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CreateEcsImageFromEcsSnapshotAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/hybrid/aliyun/image/snapshot'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'snapshotUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=True,valid_regex_values=r'^[\u4e00-\u9fa5a-zA-Z][\u4e00-\u9fa5_a-zA-Z0-9.-]+$',max_length=128,min_length=2,non_empty=False,null_elements=False,empty_string=False,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=1024,min_length=2,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CreateEcsImageFromEcsSnapshotAction, self).__init__()
        self.snapshotUuid = None
        self.name = None
        self.description = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryEmailMediaAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/media/emails'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryEmailMediaAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteVpcIpSecConfigLocalAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/hybrid/vpn-connection/ipsec/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteVpcIpSecConfigLocalAction, self).__init__()
        self.uuid = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class ChangeSecurityGroupStateAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/security-groups/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'changeSecurityGroupState'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'stateEvent': ParamAnnotation(required=True,valid_values=['enable','disable'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(ChangeSecurityGroupStateAction, self).__init__()
        self.uuid = None
        self.stateEvent = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CreateSchedulerJobGroupAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/scheduler/jobgroups'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'name': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'type': ParamAnnotation(required=True,valid_values=['startVm','stopVm','rebootVm','volumeSnapshot','volumeBackup','rootVolumeBackup','vmBackup','databaseBackup'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'parameters': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CreateSchedulerJobGroupAction, self).__init__()
        self.name = None
        self.description = None
        self.type = None
        self.parameters = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class UpdateAliyunKeySecretAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/hybrid/aliyun/{uuid}/key'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(UpdateAliyunKeySecretAction, self).__init__()
        self.uuid = None
        self.name = None
        self.description = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class RemoveAttributesFromIAM2VirtualIDGroupAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/iam2/projects/groups/{uuid}/attributes'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'attributeUuids': ParamAnnotation(required=True,non_empty=True,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(RemoveAttributesFromIAM2VirtualIDGroupAction, self).__init__()
        self.uuid = None
        self.attributeUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteAutoScalingGroupInstanceAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/autoscaling/groups/instances/{instanceUuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'instanceUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteAutoScalingGroupInstanceAction, self).__init__()
        self.instanceUuid = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class ChangeHostStateAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/hosts/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'changeHostState'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'stateEvent': ParamAnnotation(required=True,valid_values=['enable','disable','maintain'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(ChangeHostStateAction, self).__init__()
        self.uuid = None
        self.stateEvent = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteVRouterRouteTableAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/vrouter-route-tables/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteVRouterRouteTableAction, self).__init__()
        self.uuid = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class GetPrimaryStorageTypesAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/primary-storage/types'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(GetPrimaryStorageTypesAction, self).__init__()
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryIpAddressAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/l3-networks/ip-address'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryIpAddressAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class SetL3NetworkMtuAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/l3-networks/{l3NetworkUuid}/mtu'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'l3NetworkUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'mtu': ParamAnnotation(required=True,number_range=[68, 9216],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(SetL3NetworkMtuAction, self).__init__()
        self.l3NetworkUuid = None
        self.mtu = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryTicketHistoryAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/tickets/histories'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryTicketHistoryAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class RebootEcsInstanceAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/hybrid/aliyun/ecs/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'rebootEcsInstance'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(RebootEcsInstanceAction, self).__init__()
        self.uuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class UpdateUserGroupAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/accounts/groups/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'updateUserGroup'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=False,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(UpdateUserGroupAction, self).__init__()
        self.uuid = None
        self.name = None
        self.description = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class UpdateSNSTopicAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/sns/topics/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'updateSNSTopic'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=False,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(UpdateSNSTopicAction, self).__init__()
        self.uuid = None
        self.name = None
        self.description = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class GetDataVolumeAttachableVmAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/volumes/{volumeUuid}/candidate-vm-instances'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'volumeUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(GetDataVolumeAttachableVmAction, self).__init__()
        self.volumeUuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryEventSubscriptionAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/zwatch/events/subscriptions'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryEventSubscriptionAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class UpdateResourceConfigAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/resource-configurations/{category}/{name}/{resourceUuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'updateResourceConfig'

    PARAMS = {
        'category': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'value': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(UpdateResourceConfigAction, self).__init__()
        self.category = None
        self.name = None
        self.resourceUuid = None
        self.value = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteMonitorTriggerActionAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/monitoring/trigger-actions/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteMonitorTriggerActionAction, self).__init__()
        self.uuid = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryAliyunRouteEntryFromLocalAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/hybrid/aliyun/route-entry'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryAliyunRouteEntryFromLocalAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class ExpungeIAM2ProjectAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/iam2/projects/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'expungeIAM2Project'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(ExpungeIAM2ProjectAction, self).__init__()
        self.uuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteSNSApplicationEndpointAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/sns/application-endpoints/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteSNSApplicationEndpointAction, self).__init__()
        self.uuid = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryStackTemplateAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/cloudformation/template'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryStackTemplateAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CreateAlarmAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/zwatch/alarms'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'name': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'comparisonOperator': ParamAnnotation(required=True,valid_values=['GreaterThanOrEqualTo','GreaterThan','LessThan','LessThanOrEqualTo'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'period': ParamAnnotation(required=True,number_range=[1, 2147483647],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'namespace': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'metricName': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'threshold': ParamAnnotation(required=True,number_range=[0, 9223372036854775807],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'repeatInterval': ParamAnnotation(required=False,number_range=[0, 9223372036854775807],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'labels': ParamAnnotation(),
        'actions': ParamAnnotation(),
        'repeatCount': ParamAnnotation(required=False,number_range=[-1, 2147483647],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'type': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'enableRecovery': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CreateAlarmAction, self).__init__()
        self.name = None
        self.description = None
        self.comparisonOperator = None
        self.period = None
        self.namespace = None
        self.metricName = None
        self.threshold = None
        self.repeatInterval = None
        self.labels = None
        self.actions = None
        self.repeatCount = None
        self.type = None
        self.enableRecovery = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class GetVmConsoleAddressAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/vm-instances/{uuid}/console-addresses'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(GetVmConsoleAddressAction, self).__init__()
        self.uuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class GetIAM2SystemAttributesAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/iam2/attributes/system'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(GetIAM2SystemAttributesAction, self).__init__()
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class AttachNetworkServiceToL3NetworkAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/l3-networks/{l3NetworkUuid}/network-services'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'l3NetworkUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'networkServices': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(AttachNetworkServiceToL3NetworkAction, self).__init__()
        self.l3NetworkUuid = None
        self.networkServices = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class SyncImageFromImageStoreBackupStorageAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/images/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'syncImageFromImageStoreBackupStorage'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'srcBackupStorageUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'dstBackupStorageUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=False,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=1024,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(SyncImageFromImageStoreBackupStorageAction, self).__init__()
        self.uuid = None
        self.srcBackupStorageUuid = None
        self.dstBackupStorageUuid = None
        self.name = None
        self.description = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class AddIAM2TicketFlowAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/tickets/flow'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'approverUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'approverTitle': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'collectionUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'parentFlowUuid': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(AddIAM2TicketFlowAction, self).__init__()
        self.approverUuid = None
        self.approverTitle = None
        self.name = None
        self.description = None
        self.collectionUuid = None
        self.parentFlowUuid = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class GetEcsInstanceTypeAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/hybrid/ecs/type'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'identityZoneUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(GetEcsInstanceTypeAction, self).__init__()
        self.identityZoneUuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryVpcRouterAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/vpc/virtual-routers'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryVpcRouterAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class UpdateAliyunSnapshotAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/hybrid/aliyun/snapshot/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'updateAliyunSnapshot'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=False,valid_regex_values=r'^[\u4e00-\u9fa5a-zA-Z][\u4e00-\u9fa5_a-zA-Z0-9.-]+$',max_length=128,min_length=2,non_empty=False,null_elements=False,empty_string=False,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=1024,min_length=2,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(UpdateAliyunSnapshotAction, self).__init__()
        self.uuid = None
        self.name = None
        self.description = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class RefreshIscsiServerAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/storage-devices/iscsi/servers/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(RefreshIscsiServerAction, self).__init__()
        self.uuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class SyncDahoDataCenterConnectionAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/hybrid/daho/connections/sync'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(SyncDahoDataCenterConnectionAction, self).__init__()
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CreateRoleAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/identities/roles'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'name': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'statements': ParamAnnotation(),
        'policyUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CreateRoleAction, self).__init__()
        self.name = None
        self.description = None
        self.statements = None
        self.policyUuids = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryBackupStorageAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/backup-storage'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryBackupStorageAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryBaremetalChassisAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/baremetal/chassis'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryBaremetalChassisAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteVpcUserVpnGatewayLocalAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/hybrid/user-gateway/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteVpcUserVpnGatewayLocalAction, self).__init__()
        self.uuid = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DetachRoleFromAccountAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/identities/accounts/{accountUuid}/roles/{roleUuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'roleUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'accountUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DetachRoleFromAccountAction, self).__init__()
        self.roleUuid = None
        self.accountUuid = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class UpdateVmInstanceAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/vm-instances/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'updateVmInstance'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=False,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'state': ParamAnnotation(required=False,valid_values=['Stopped','Running'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'defaultL3NetworkUuid': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'platform': ParamAnnotation(required=False,valid_values=['Linux','Windows','Other','Paravirtualization','WindowsVirtio'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'cpuNum': ParamAnnotation(required=False,number_range=[1, 1024],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'memorySize': ParamAnnotation(required=False,number_range=[1, 9223372036854775807],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(UpdateVmInstanceAction, self).__init__()
        self.uuid = None
        self.name = None
        self.description = None
        self.state = None
        self.defaultL3NetworkUuid = None
        self.platform = None
        self.cpuNum = None
        self.memorySize = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class UpdateAutoScalingGroupAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/autoscaling/groups/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'updateAutoScalingGroup'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=False,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'minResourceSize': ParamAnnotation(required=False,number_range=[0, 2147483647],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'maxResourceSize': ParamAnnotation(required=False,number_range=[0, 2147483647],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'removalPolicy': ParamAnnotation(required=False,valid_values=['OldestInstance','NewestInstance','OldestScalingConfiguration','MinimumCPUUsageInstance','MinimumMemoryUsageInstance'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(UpdateAutoScalingGroupAction, self).__init__()
        self.uuid = None
        self.name = None
        self.description = None
        self.minResourceSize = None
        self.maxResourceSize = None
        self.removalPolicy = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DetachPolicyFromUserAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/accounts/users/{userUuid}/policies/{policyUuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'policyUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'userUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DetachPolicyFromUserAction, self).__init__()
        self.policyUuid = None
        self.userUuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class UpdateAliyunMountTargetAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/nas/aliyun/mount'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'updateAliyunMountTarget'

    PARAMS = {
        'accessGroupUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=False,max_length=255,non_empty=False,null_elements=False,empty_string=False,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=1024,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(UpdateAliyunMountTargetAction, self).__init__()
        self.accessGroupUuid = None
        self.uuid = None
        self.name = None
        self.description = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CleanUpTrashOnPrimaryStorageAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/primary-storage/{uuid}/trash/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'cleanUpTrashOnPrimaryStorage'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'trashId': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CleanUpTrashOnPrimaryStorageAction, self).__init__()
        self.uuid = None
        self.trashId = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CreateSchedulerJobAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/scheduler/jobs'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'name': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'targetResourceUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'type': ParamAnnotation(required=True,valid_values=['startVm','stopVm','rebootVm','volumeSnapshot','volumeBackup','rootVolumeBackup','vmBackup','databaseBackup'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'parameters': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CreateSchedulerJobAction, self).__init__()
        self.name = None
        self.description = None
        self.targetResourceUuid = None
        self.type = None
        self.parameters = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CreateIAM2ProjectTemplateAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/iam2/projects/templates'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'name': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'attributes': ParamAnnotation(),
        'quota': ParamAnnotation(),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CreateIAM2ProjectTemplateAction, self).__init__()
        self.name = None
        self.description = None
        self.attributes = None
        self.quota = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CreateVpcVpnConnectionRemoteAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/hybrid/vpn-connection'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'userGatewayUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'vpnGatewayUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=True,max_length=64,non_empty=False,null_elements=False,empty_string=False,no_trim=False),
        'localCidr': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=False,no_trim=False),
        'remoteCidr': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=False,no_trim=False),
        'active': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'ikeConfUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'ipsecConfUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CreateVpcVpnConnectionRemoteAction, self).__init__()
        self.userGatewayUuid = None
        self.vpnGatewayUuid = None
        self.name = None
        self.localCidr = None
        self.remoteCidr = None
        self.active = None
        self.ikeConfUuid = None
        self.ipsecConfUuid = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class AddSchedulerJobsToSchedulerJobGroupAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/scheduler/jobgroups/{schedulerJobGroupUuid}/job'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'schedulerJobGroupUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'schedulerJobUuids': ParamAnnotation(required=True,non_empty=True,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(AddSchedulerJobsToSchedulerJobGroupAction, self).__init__()
        self.schedulerJobGroupUuid = None
        self.schedulerJobUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CheckResourcePermissionAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/accounts/resource/api-permissions'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'resourceType': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CheckResourcePermissionAction, self).__init__()
        self.resourceType = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class GetImageCandidatesForVmToChangeAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/vm-instances/{vmInstanceUuid}/image-candidates'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'vmInstanceUuid': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(GetImageCandidatesForVmToChangeAction, self).__init__()
        self.vmInstanceUuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CreateL2NoVlanNetworkAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/l2-networks/no-vlan'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'name': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'zoneUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'physicalInterface': ParamAnnotation(required=True,max_length=1024,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'type': ParamAnnotation(),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CreateL2NoVlanNetworkAction, self).__init__()
        self.name = None
        self.description = None
        self.zoneUuid = None
        self.physicalInterface = None
        self.type = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QuerySchedulerJobGroupAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/scheduler/jobgroups'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QuerySchedulerJobGroupAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class UpdateSNSTextTemplateAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/zwatch/alarms/sns/text-templates/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'updateSNSTextTemplate'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=False,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'template': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'recoveryTemplate': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'defaultTemplate': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(UpdateSNSTextTemplateAction, self).__init__()
        self.uuid = None
        self.name = None
        self.description = None
        self.template = None
        self.recoveryTemplate = None
        self.defaultTemplate = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class UpdateIAM2VirtualIDAttributeAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/iam2/virtual-ids/attributes/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'updateIAM2VirtualIDAttribute'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'value': ParamAnnotation(required=True,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(UpdateIAM2VirtualIDAttributeAction, self).__init__()
        self.uuid = None
        self.value = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class AddFusionstorBackupStorageAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/backup-storage/fusionstor'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'monUrls': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=False,no_trim=False),
        'poolName': ParamAnnotation(required=False,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'url': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'type': ParamAnnotation(),
        'importImages': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(AddFusionstorBackupStorageAction, self).__init__()
        self.monUrls = None
        self.poolName = None
        self.url = None
        self.name = None
        self.description = None
        self.type = None
        self.importImages = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteAffinityGroupAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/affinity-groups/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteAffinityGroupAction, self).__init__()
        self.uuid = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class GetL2NetworkTypesAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/l2-networks/types'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(GetL2NetworkTypesAction, self).__init__()
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class GetL3NetworkTypesAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/l3-networks/types'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(GetL3NetworkTypesAction, self).__init__()
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CreatePolicyAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/accounts/policies'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'name': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'statements': ParamAnnotation(required=True,non_empty=True,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CreatePolicyAction, self).__init__()
        self.name = None
        self.description = None
        self.statements = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class SyncDahoVllAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/hybrid/daho/vlls/{dataCenterUuid}/sync'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'dataCenterUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(SyncDahoVllAction, self).__init__()
        self.dataCenterUuid = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteResourceStackAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/cloudformation/stack/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteResourceStackAction, self).__init__()
        self.uuid = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteLdapServerAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/ldap/servers/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteLdapServerAction, self).__init__()
        self.uuid = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class SyncEcsVSwitchFromRemoteAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/hybrid/aliyun/vswitch/{dataCenterUuid}/sync'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'dataCenterUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'vSwitchId': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(SyncEcsVSwitchFromRemoteAction, self).__init__()
        self.dataCenterUuid = None
        self.vSwitchId = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryVirtualRouterVRouterRouteTableRefAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/vrouter-route-tables/virtual-router-refs'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryVirtualRouterVRouterRouteTableRefAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class SetImageQgaAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/images/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'setImageQga'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'enable': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(SetImageQgaAction, self).__init__()
        self.uuid = None
        self.enable = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryIscsiServerAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/storage-devices/iscsi/servers'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryIscsiServerAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class UpdateSchedulerTriggerAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/scheduler/triggers/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'updateSchedulerTrigger'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=False,max_length=255,non_empty=False,null_elements=False,empty_string=False,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'schedulerInterval': ParamAnnotation(required=False,number_range=[1, 2147483647],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'repeatCount': ParamAnnotation(required=False,number_range=[0, 2147483647],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'startTime': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'cron': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(UpdateSchedulerTriggerAction, self).__init__()
        self.uuid = None
        self.name = None
        self.description = None
        self.schedulerInterval = None
        self.repeatCount = None
        self.startTime = None
        self.cron = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CreateEcsVSwitchRemoteAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/hybrid/aliyun/vswitch'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'vpcUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'identityZoneUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'cidrBlock': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=False,no_trim=False),
        'name': ParamAnnotation(required=True,valid_regex_values=r'^[\u4e00-\u9fa5a-zA-Z][\u4e00-\u9fa5_a-zA-Z0-9-]+$',max_length=128,min_length=2,non_empty=False,null_elements=False,empty_string=False,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=1024,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CreateEcsVSwitchRemoteAction, self).__init__()
        self.vpcUuid = None
        self.identityZoneUuid = None
        self.cidrBlock = None
        self.name = None
        self.description = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class RebootBaremetalInstanceAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/baremetal/instances/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'rebootBaremetalInstance'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'pxeBoot': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(RebootBaremetalInstanceAction, self).__init__()
        self.uuid = None
        self.pxeBoot = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class AddAliyunNasPrimaryStorageAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/primary-storage/aliyun/nas'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'nasUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'accessGroupUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'vSwitchUuid': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'url': ParamAnnotation(required=True,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'type': ParamAnnotation(),
        'zoneUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(AddAliyunNasPrimaryStorageAction, self).__init__()
        self.nasUuid = None
        self.accessGroupUuid = None
        self.vSwitchUuid = None
        self.url = None
        self.name = None
        self.description = None
        self.type = None
        self.zoneUuid = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DownloadBackupFileFromPublicCloudAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/hybrid/backup-mysql/download'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'regionId': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=False,no_trim=False),
        'file': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=False,no_trim=False),
        'type': ParamAnnotation(required=True,valid_values=['aliyun'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DownloadBackupFileFromPublicCloudAction, self).__init__()
        self.regionId = None
        self.file = None
        self.type = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryDatabaseBackupAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/database-backups'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryDatabaseBackupAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class ChangeVolumeStateAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/volumes/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'changeVolumeState'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'stateEvent': ParamAnnotation(required=True,valid_values=['enable','disable'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(ChangeVolumeStateAction, self).__init__()
        self.uuid = None
        self.stateEvent = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteLoadBalancerListenerAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/load-balancers/listeners/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteLoadBalancerListenerAction, self).__init__()
        self.uuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryImageAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/images'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryImageAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class IsReadyToGoAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/management-nodes/ready'
    NEED_SESSION = False
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'managementNodeId': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation()
    }

    def __init__(self):
        super(IsReadyToGoAction, self).__init__()
        self.managementNodeId = None
        self.systemTags = None
        self.userTags = None


class QueryPrimaryStorageAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/primary-storage'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryPrimaryStorageAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteEcsImageRemoteAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/hybrid/aliyun/image/remote/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteEcsImageRemoteAction, self).__init__()
        self.uuid = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteConnectionBetweenL3NetWorkAndAliyunVSwitchAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/hybrid/aliyun/connections/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteConnectionBetweenL3NetWorkAndAliyunVSwitchAction, self).__init__()
        self.uuid = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class AddSchedulerJobToSchedulerTriggerAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/scheduler/jobs/{schedulerJobUuid}/scheduler/triggers/{schedulerTriggerUuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'schedulerJobUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'schedulerTriggerUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'triggerNow': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(AddSchedulerJobToSchedulerTriggerAction, self).__init__()
        self.schedulerJobUuid = None
        self.schedulerTriggerUuid = None
        self.triggerNow = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class GetAlarmDataAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/zwatch/alarm-histories'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'startTime': ParamAnnotation(required=False,number_range=[0, 9223372036854775807],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'endTime': ParamAnnotation(required=False,number_range=[0, 9223372036854775807],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(required=False,number_range=[0, 2147483647],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'conditions': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'count': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'excludeOtherAccount': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(GetAlarmDataAction, self).__init__()
        self.startTime = None
        self.endTime = None
        self.limit = None
        self.conditions = None
        self.count = None
        self.excludeOtherAccount = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryGlobalConfigAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/global-configurations'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryGlobalConfigAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryEcsVSwitchFromLocalAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/hybrid/aliyun/vswitch'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryEcsVSwitchFromLocalAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class UpdateVmCdRomAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/vm-instances/cdroms/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'updateVmCdRom'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=False,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(UpdateVmCdRomAction, self).__init__()
        self.uuid = None
        self.description = None
        self.name = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class GetVRouterRouterIdAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/routerArea/{vRouterUuid}/routerid'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'vRouterUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(GetVRouterRouterIdAction, self).__init__()
        self.vRouterUuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CreateAliyunProxyVpcAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/aliyun-proxy/vpcs'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'name': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'cidrBlock': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'vRouterUuid': ParamAnnotation(required=True,max_length=32,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'isDefault': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CreateAliyunProxyVpcAction, self).__init__()
        self.name = None
        self.description = None
        self.cidrBlock = None
        self.vRouterUuid = None
        self.isDefault = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class ShareResourceAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/accounts/resources/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'shareResource'

    PARAMS = {
        'resourceUuids': ParamAnnotation(required=True,non_empty=True,null_elements=False,empty_string=True,no_trim=False),
        'accountUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'toPublic': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(ShareResourceAction, self).__init__()
        self.resourceUuids = None
        self.accountUuids = None
        self.toPublic = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteClusterAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/clusters/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteClusterAction, self).__init__()
        self.uuid = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QuerySharedBlockGroupPrimaryStorageAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/primary-storage/sharedblockgroup'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QuerySharedBlockGroupPrimaryStorageAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteVRouterOspfAreaAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/routerArea/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteVRouterOspfAreaAction, self).__init__()
        self.uuid = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryPortForwardingRuleAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/port-forwarding'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryPortForwardingRuleAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class GetVolumeCapabilitiesAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/volumes/{uuid}/capabilities'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(GetVolumeCapabilitiesAction, self).__init__()
        self.uuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class RemoveDnsFromL3NetworkAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/l3-networks/{l3NetworkUuid}/dns/{dns}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'l3NetworkUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'dns': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(RemoveDnsFromL3NetworkAction, self).__init__()
        self.l3NetworkUuid = None
        self.dns = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteSchedulerJobAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/scheduler/jobs/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteSchedulerJobAction, self).__init__()
        self.uuid = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryL2VlanNetworkAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/l2-networks/vlan'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryL2VlanNetworkAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class RemoveSchedulerJobFromSchedulerTriggerAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/scheduler/jobs/{schedulerJobUuid}/scheduler/triggers/{schedulerTriggerUuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'schedulerJobUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'schedulerTriggerUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(RemoveSchedulerJobFromSchedulerTriggerAction, self).__init__()
        self.schedulerJobUuid = None
        self.schedulerTriggerUuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class GetHostIommuStatusAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/pci-device/hosts/{uuid}/status'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(GetHostIommuStatusAction, self).__init__()
        self.uuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteVolumeBackupAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/volume-backups/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'backupStorageUuids': ParamAnnotation(required=False,non_empty=True,null_elements=False,empty_string=True,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteVolumeBackupAction, self).__init__()
        self.uuid = None
        self.backupStorageUuids = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class AddDisasterImageStoreBackupStorageAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/backup-storage/image-store/disaster'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'attachPoint': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'endPoint': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'hostname': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=False,no_trim=False),
        'username': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'password': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'sshPort': ParamAnnotation(required=False,number_range=[1, 65535],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'url': ParamAnnotation(required=True,max_length=2048,non_empty=False,null_elements=False,empty_string=False,no_trim=False),
        'name': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'type': ParamAnnotation(),
        'importImages': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(AddDisasterImageStoreBackupStorageAction, self).__init__()
        self.attachPoint = None
        self.endPoint = None
        self.hostname = None
        self.username = None
        self.password = None
        self.sshPort = None
        self.url = None
        self.name = None
        self.description = None
        self.type = None
        self.importImages = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class AddIAM2VirtualIDsToOrganizationAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/iam2/organizations/{organizationUuid}/virtual-ids'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'virtualIDUuids': ParamAnnotation(required=True,non_empty=True,null_elements=False,empty_string=True,no_trim=False),
        'organizationUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(AddIAM2VirtualIDsToOrganizationAction, self).__init__()
        self.virtualIDUuids = None
        self.organizationUuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class AddLabelToEventSubscriptionAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/zwatch/events/subscriptions/{subscriptionUuid}/labels'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'subscriptionUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'key': ParamAnnotation(required=True,max_length=1024,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'value': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'operator': ParamAnnotation(required=True,valid_values=['Regex','Equal'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(AddLabelToEventSubscriptionAction, self).__init__()
        self.subscriptionUuid = None
        self.key = None
        self.value = None
        self.operator = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteDahoDataCenterConnectionAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/hybrid/daho/connections/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteDahoDataCenterConnectionAction, self).__init__()
        self.uuid = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class GetCreateEcsImageProgressAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/hybrid/aliyun/image/{dataCenterUuid}/{imageUuid}/progress'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'imageUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'dataCenterUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(GetCreateEcsImageProgressAction, self).__init__()
        self.imageUuid = None
        self.dataCenterUuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryDahoVllAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/hybrid/daho/vlls'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryDahoVllAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class GetL3NetworkMtuAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/l3-networks/{l3NetworkUuid}/mtu'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'l3NetworkUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(GetL3NetworkMtuAction, self).__init__()
        self.l3NetworkUuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteVirtualRouterLocalAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/hybrid/aliyun/vrouter/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteVirtualRouterLocalAction, self).__init__()
        self.uuid = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class GetAllMetricMetadataAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/zwatch/metrics/meta-data'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(GetAllMetricMetadataAction, self).__init__()
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QuerySNSEmailEndpointAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/sns/application-endpoints/emails'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QuerySNSEmailEndpointAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class GetLoginCaptchaAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/login/control/captcha'
    NEED_SESSION = False
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'resourceName': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'loginType': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'captchaUuid': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation()
    }

    def __init__(self):
        super(GetLoginCaptchaAction, self).__init__()
        self.resourceName = None
        self.loginType = None
        self.captchaUuid = None
        self.systemTags = None
        self.userTags = None


class SetVmQgaAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/vm-instances/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'setVmQga'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'enable': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(SetVmQgaAction, self).__init__()
        self.uuid = None
        self.enable = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class UpdateIAM2OrganizationAttributeAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/iam2/organizations/attributes/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'updateIAM2OrganizationAttribute'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'value': ParamAnnotation(required=True,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(UpdateIAM2OrganizationAttributeAction, self).__init__()
        self.uuid = None
        self.value = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryIPSecConnectionAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/ipsec'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryIPSecConnectionAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class GetPrimaryStorageCandidatesForVmMigrationAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/vm-instances/{vmInstanceUuid}/storage-migration-candidates'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'vmInstanceUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(GetPrimaryStorageCandidatesForVmMigrationAction, self).__init__()
        self.vmInstanceUuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class ReclaimSpaceFromImageStoreAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/backup-storage/image-store/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'reclaimSpaceFromImageStore'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(ReclaimSpaceFromImageStoreAction, self).__init__()
        self.uuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryAliyunSnapshotFromLocalAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/hybrid/aliyun/snapshot'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryAliyunSnapshotFromLocalAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeletePreconfigurationTemplateAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/baremetal/preconfigurations/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeletePreconfigurationTemplateAction, self).__init__()
        self.uuid = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryAutoScalingRuleAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/autoscaling/groups/rules'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryAutoScalingRuleAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryHostAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/hosts'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryHostAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class GetVpcVpnConfigurationFromRemoteAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/hybrid/vpn-conf/{uuid}/remote'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(GetVpcVpnConfigurationFromRemoteAction, self).__init__()
        self.uuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class UpdateNasFileSystemAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/primary-storage/nas/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'updateNasFileSystem'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=False,max_length=255,non_empty=False,null_elements=False,empty_string=False,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=1024,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(UpdateNasFileSystemAction, self).__init__()
        self.uuid = None
        self.name = None
        self.description = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CreateBaremetalBondingAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/baremetal/network/bondings'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'chassisUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'mode': ParamAnnotation(required=True,number_range=[0, 6],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'slaves': ParamAnnotation(required=True,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'opts': ParamAnnotation(required=False,max_length=1024,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CreateBaremetalBondingAction, self).__init__()
        self.chassisUuid = None
        self.name = None
        self.mode = None
        self.slaves = None
        self.opts = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class RemoveVRouterNetworksFromOspfAreaAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/routerArea/networks'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuids': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(RemoveVRouterNetworksFromOspfAreaAction, self).__init__()
        self.uuids = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class AddZsesPrimaryStorageAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/primary-storage/zses'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'url': ParamAnnotation(required=True,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'type': ParamAnnotation(),
        'zoneUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(AddZsesPrimaryStorageAction, self).__init__()
        self.url = None
        self.name = None
        self.description = None
        self.type = None
        self.zoneUuid = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class ReimageVmInstanceAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/vm-instances/{vmInstanceUuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'reimageVmInstance'

    PARAMS = {
        'vmInstanceUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(ReimageVmInstanceAction, self).__init__()
        self.vmInstanceUuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryAutoScalingGroupInstanceAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/autoscaling/groups/instances'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryAutoScalingGroupInstanceAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryRoleAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/identities/roles'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryRoleAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class UpdateAffinityGroupAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/affinity-groups/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'updateAffinityGroup'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=False,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(UpdateAffinityGroupAction, self).__init__()
        self.uuid = None
        self.name = None
        self.description = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryIAM2OrganizationAttributeAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/iam2/organizations/attributes'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryIAM2OrganizationAttributeAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class ChangeZoneStateAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/zones/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'changeZoneState'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'stateEvent': ParamAnnotation(required=True,valid_values=['enable','disable'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(ChangeZoneStateAction, self).__init__()
        self.uuid = None
        self.stateEvent = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class GetPortForwardingAttachableVmNicsAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/port-forwarding/{ruleUuid}/vm-instances/candidate-nics'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'ruleUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(GetPortForwardingAttachableVmNicsAction, self).__init__()
        self.ruleUuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteIPsecConnectionAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/ipsec/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteIPsecConnectionAction, self).__init__()
        self.uuid = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryIscsiLunAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/storage-devices/iscsi/luns'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryIscsiLunAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CreateVolumeBackupAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/volumes/{volumeUuid}/volume-backups'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'volumeUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'backupStorageUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'mode': ParamAnnotation(required=False,valid_values=['full'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'volumeReadBandwidth': ParamAnnotation(required=False,number_range=[1024, 9223372036854775807],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'volumeWriteBandwidth': ParamAnnotation(required=False,number_range=[1024, 9223372036854775807],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'networkReadBandwidth': ParamAnnotation(required=False,number_range=[1024, 9223372036854775807],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'networkWriteBandwidth': ParamAnnotation(required=False,number_range=[1024, 9223372036854775807],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CreateVolumeBackupAction, self).__init__()
        self.volumeUuid = None
        self.backupStorageUuid = None
        self.name = None
        self.description = None
        self.mode = None
        self.volumeReadBandwidth = None
        self.volumeWriteBandwidth = None
        self.networkReadBandwidth = None
        self.networkWriteBandwidth = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class GetMonitorItemAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/monitoring/items'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'resourceType': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(GetMonitorItemAction, self).__init__()
        self.resourceType = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class UpdateSchedulerJobAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/scheduler/jobs/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'updateSchedulerJob'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=False,max_length=255,non_empty=False,null_elements=False,empty_string=False,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'parameters': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(UpdateSchedulerJobAction, self).__init__()
        self.uuid = None
        self.name = None
        self.description = None
        self.parameters = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class ChangeMediaStateAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/media/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'changeMediaState'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'stateEvent': ParamAnnotation(required=True,valid_values=['enable','disable'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(ChangeMediaStateAction, self).__init__()
        self.uuid = None
        self.stateEvent = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CreateAliyunVpcVirtualRouterEntryRemoteAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/hybrid/aliyun/route-entry'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'vRouterUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=False,no_trim=False),
        'dstCidrBlock': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=False,no_trim=False),
        'nextHopUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=False,no_trim=False),
        'nextHopType': ParamAnnotation(required=True,valid_values=['Instance','RouterInterface','VpnGateway'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'vRouterType': ParamAnnotation(required=True,valid_values=['vbr','vrouter'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CreateAliyunVpcVirtualRouterEntryRemoteAction, self).__init__()
        self.vRouterUuid = None
        self.dstCidrBlock = None
        self.nextHopUuid = None
        self.nextHopType = None
        self.vRouterType = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteOssBucketFileRemoteAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/hybrid/aliyun/oss-bucket-file/remote/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fileName': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteOssBucketFileRemoteAction, self).__init__()
        self.uuid = None
        self.fileName = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteTicketFlowCollectionAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/tickets/flow-collections/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteTicketFlowCollectionAction, self).__init__()
        self.uuid = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteAliyunRouteEntryRemoteAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/hybrid/aliyun/route-entry/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteAliyunRouteEntryRemoteAction, self).__init__()
        self.uuid = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class RemoveCertificateFromLoadBalancerListenerAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/load-balancers/listeners/{listenerUuid}/certificate'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'certificateUuid': ParamAnnotation(required=True,non_empty=True,null_elements=False,empty_string=True,no_trim=False),
        'listenerUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(RemoveCertificateFromLoadBalancerListenerAction, self).__init__()
        self.certificateUuid = None
        self.listenerUuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class UpdateSNSApplicationEndpointAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/sns/application-endpoints/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'updateSNSApplicationEndpoint'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=False,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(UpdateSNSApplicationEndpointAction, self).__init__()
        self.uuid = None
        self.name = None
        self.description = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CreateLoadBalancerListenerAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/load-balancers/{loadBalancerUuid}/listeners'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'loadBalancerUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'instancePort': ParamAnnotation(required=False,number_range=[1, 65535],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'loadBalancerPort': ParamAnnotation(required=True,number_range=[1, 65535],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'protocol': ParamAnnotation(required=False,valid_values=['udp','tcp','http','https'],max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'certificateUuid': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CreateLoadBalancerListenerAction, self).__init__()
        self.loadBalancerUuid = None
        self.name = None
        self.description = None
        self.instancePort = None
        self.loadBalancerPort = None
        self.protocol = None
        self.certificateUuid = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteAliyunDiskFromRemoteAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/hybrid/aliyun/disk/{uuid}/remote'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteAliyunDiskFromRemoteAction, self).__init__()
        self.uuid = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteVmNicFromSecurityGroupAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/security-groups/{securityGroupUuid}/vm-instances/nics'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'securityGroupUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'vmNicUuids': ParamAnnotation(required=True,non_empty=True,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteVmNicFromSecurityGroupAction, self).__init__()
        self.securityGroupUuid = None
        self.vmNicUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteVmCdRomAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/vm-instances/cdroms/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteVmCdRomAction, self).__init__()
        self.uuid = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class AddSimulatorPrimaryStorageAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/primary-storage/simulators'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'totalCapacity': ParamAnnotation(),
        'availableCapacity': ParamAnnotation(),
        'availablePhysicalCapacity': ParamAnnotation(),
        'totalPhysicalCapacity': ParamAnnotation(),
        'url': ParamAnnotation(required=True,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'type': ParamAnnotation(),
        'zoneUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(AddSimulatorPrimaryStorageAction, self).__init__()
        self.totalCapacity = None
        self.availableCapacity = None
        self.availablePhysicalCapacity = None
        self.totalPhysicalCapacity = None
        self.url = None
        self.name = None
        self.description = None
        self.type = None
        self.zoneUuid = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryIAM2ProjectAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/iam2/projects'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryIAM2ProjectAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class GetVmMigrationCandidateHostsAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/vm-instances/{vmInstanceUuid}/migration-target-hosts'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'vmInstanceUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(GetVmMigrationCandidateHostsAction, self).__init__()
        self.vmInstanceUuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class RemoveIAM2VirtualIDsFromGroupAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/iam2/projects/groups/{groupUuid}/virtual-ids'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'virtualIDUuids': ParamAnnotation(required=True,non_empty=True,null_elements=False,empty_string=True,no_trim=False),
        'groupUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(RemoveIAM2VirtualIDsFromGroupAction, self).__init__()
        self.virtualIDUuids = None
        self.groupUuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class SetVipQosAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/vips/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'setVipQos'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'port': ParamAnnotation(required=False,number_range=[1, 65535],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'outboundBandwidth': ParamAnnotation(required=False,number_range=[1, 9223372036854775807],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'inboundBandwidth': ParamAnnotation(required=False,number_range=[1, 9223372036854775807],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(SetVipQosAction, self).__init__()
        self.uuid = None
        self.port = None
        self.outboundBandwidth = None
        self.inboundBandwidth = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CreateAffinityGroupAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/affinity-groups'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'name': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'policy': ParamAnnotation(required=True,valid_values=['antiSoft','antiHard'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'type': ParamAnnotation(required=False,valid_values=['host'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CreateAffinityGroupAction, self).__init__()
        self.name = None
        self.description = None
        self.policy = None
        self.type = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class GetCandidateVmForAttachingIsoAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/images/iso/{isoUuid}/vm-candidates'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'isoUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(GetCandidateVmForAttachingIsoAction, self).__init__()
        self.isoUuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryBaremetalBondingAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/baremetal/network/bondings'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryBaremetalBondingAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class LogOutAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/accounts/sessions/{sessionUuid}'
    NEED_SESSION = False
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'sessionUuid': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation()
    }

    def __init__(self):
        super(LogOutAction, self).__init__()
        self.sessionUuid = None
        self.systemTags = None
        self.userTags = None


class CreateVxlanVtepAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/l2-networks/vxlan/vteps'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'hostUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'poolUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'vtepIp': ParamAnnotation(),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CreateVxlanVtepAction, self).__init__()
        self.hostUuid = None
        self.poolUuid = None
        self.vtepIp = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CreateAutoScalingVmTemplateAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/autoscaling/vmtemplate'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'vmInstanceName': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'vmInstanceDescription': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'vmInstanceOfferingUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'imageUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'l3NetworkUuids': ParamAnnotation(required=True,non_empty=True,null_elements=False,empty_string=True,no_trim=False),
        'vmInstanceType': ParamAnnotation(required=False,valid_values=['UserVm','ApplianceVm'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'rootDiskOfferingUuid': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'dataDiskOfferingUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'vmInstanceZoneUuid': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'vmInstanceClusterUuid': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'hostUuid': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'primaryStorageUuidForRootVolume': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'defaultL3NetworkUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'strategy': ParamAnnotation(required=False,valid_values=['InstantStart','CreateStopped'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'type': ParamAnnotation(),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CreateAutoScalingVmTemplateAction, self).__init__()
        self.vmInstanceName = None
        self.vmInstanceDescription = None
        self.vmInstanceOfferingUuid = None
        self.imageUuid = None
        self.l3NetworkUuids = None
        self.vmInstanceType = None
        self.rootDiskOfferingUuid = None
        self.dataDiskOfferingUuids = None
        self.vmInstanceZoneUuid = None
        self.vmInstanceClusterUuid = None
        self.hostUuid = None
        self.primaryStorageUuidForRootVolume = None
        self.defaultL3NetworkUuid = None
        self.strategy = None
        self.name = None
        self.description = None
        self.type = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class ReconnectSftpBackupStorageAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/backup-storage/sftp/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'reconnectSftpBackupStorage'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(ReconnectSftpBackupStorageAction, self).__init__()
        self.uuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryVirtualRouterOfferingAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/instance-offerings/virtual-routers'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryVirtualRouterOfferingAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class UpdateIAM2VirtualIDAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/iam2/virtual-ids/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'updateIAM2VirtualID'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=False,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'password': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(UpdateIAM2VirtualIDAction, self).__init__()
        self.uuid = None
        self.name = None
        self.description = None
        self.password = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class RemoveSchedulerJobGroupFromSchedulerTriggerAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/scheduler/jobgroups/{schedulerJobGroupUuid}/scheduler/triggers/{schedulerTriggerUuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'schedulerJobGroupUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'schedulerTriggerUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(RemoveSchedulerJobGroupFromSchedulerTriggerAction, self).__init__()
        self.schedulerJobGroupUuid = None
        self.schedulerTriggerUuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class AddPreconfigurationTemplateAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/baremetal/preconfigurations'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'name': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'distribution': ParamAnnotation(required=True,max_length=64,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'type': ParamAnnotation(required=True,valid_values=['kickstart','preseed','autoyast'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'content': ParamAnnotation(required=True,max_length=16777215,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(AddPreconfigurationTemplateAction, self).__init__()
        self.name = None
        self.description = None
        self.distribution = None
        self.type = None
        self.content = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class LocalStorageMigrateVolumeAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/primary-storage/local-storage/volumes/{volumeUuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'localStorageMigrateVolume'

    PARAMS = {
        'volumeUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'destHostUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(LocalStorageMigrateVolumeAction, self).__init__()
        self.volumeUuid = None
        self.destHostUuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class AddMonToCephBackupStorageAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/backup-storage/ceph/{uuid}/mons'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'monUrls': ParamAnnotation(required=True,non_empty=True,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(AddMonToCephBackupStorageAction, self).__init__()
        self.uuid = None
        self.monUrls = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class UpdateHostIommuStateAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/pci-device/hosts/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'updateHostIommuState'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'state': ParamAnnotation(required=True,valid_values=['Enabled','Disabled'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(UpdateHostIommuStateAction, self).__init__()
        self.uuid = None
        self.state = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class GetBaremetalChassisPowerStatusAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/baremetal/chassis/{uuid}/powerstatus'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(GetBaremetalChassisPowerStatusAction, self).__init__()
        self.uuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class AttachOssBucketToEcsDataCenterAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/hybrid/aliyun/oss-bucket/{ossBucketUuid}/attach'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'attachOssBucketToEcsDataCenter'

    PARAMS = {
        'ossBucketUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(AttachOssBucketToEcsDataCenterAction, self).__init__()
        self.ossBucketUuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteIscsiServerAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/storage-devices/iscsi/servers/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteIscsiServerAction, self).__init__()
        self.uuid = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class LocalStorageGetVolumeMigratableHostsAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/volumes/{volumeUuid}/migration-target-hosts'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'volumeUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(LocalStorageGetVolumeMigratableHostsAction, self).__init__()
        self.volumeUuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class UpdateVniRangeAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/l2-networks/vxlan-pool/vni-ranges/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'updateVniRange'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(UpdateVniRangeAction, self).__init__()
        self.uuid = None
        self.name = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class GetVRouterRouteTableAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/vrouter-route-tables/vrouter/{virtualRouterVmUuid}'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'virtualRouterVmUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(GetVRouterRouteTableAction, self).__init__()
        self.virtualRouterVmUuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class AddVRouterRouteEntryAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/vrouter-route-tables/{routeTableUuid}/route-entries'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'type': ParamAnnotation(required=False,max_length=32,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'routeTableUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'destination': ParamAnnotation(required=True,max_length=64,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'target': ParamAnnotation(required=False,max_length=64,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'distance': ParamAnnotation(required=False,number_range=[1, 254],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(AddVRouterRouteEntryAction, self).__init__()
        self.description = None
        self.type = None
        self.routeTableUuid = None
        self.destination = None
        self.target = None
        self.distance = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class ChangeAlarmStateAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/zwatch/alarms/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'changeAlarmState'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'stateEvent': ParamAnnotation(required=True,valid_values=['enable','disable'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(ChangeAlarmStateAction, self).__init__()
        self.uuid = None
        self.stateEvent = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class GetAliyunNasAccessGroupRemoteAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/nas/aliyun/access/remote'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'dataCenterUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'groupName': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=False,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(GetAliyunNasAccessGroupRemoteAction, self).__init__()
        self.dataCenterUuid = None
        self.groupName = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class SyncVCenterAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/vcenters/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'syncVCenter'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(SyncVCenterAction, self).__init__()
        self.uuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteBackupStorageAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/backup-storage/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteBackupStorageAction, self).__init__()
        self.uuid = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryDahoCloudConnectionAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/hybrid/daho/cloud_connections'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryDahoCloudConnectionAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CreateBaremetalInstanceAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/baremetal/instances'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'name': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'chassisUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'imageUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'templateUuid': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'username': ParamAnnotation(required=False,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'password': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'nicCfgs': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'bondingCfgs': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'customConfigurations': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'strategy': ParamAnnotation(required=False,valid_values=['InstantStart','JustCreate'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CreateBaremetalInstanceAction, self).__init__()
        self.name = None
        self.description = None
        self.chassisUuid = None
        self.imageUuid = None
        self.templateUuid = None
        self.username = None
        self.password = None
        self.nicCfgs = None
        self.bondingCfgs = None
        self.customConfigurations = None
        self.strategy = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class RecoverDatabaseFromBackupAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/database-backups/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'recoverDatabaseFromBackup'

    PARAMS = {
        'uuid': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'backupStorageUrl': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'backupInstallPath': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'mysqlRootPassword': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(RecoverDatabaseFromBackupAction, self).__init__()
        self.uuid = None
        self.backupStorageUrl = None
        self.backupInstallPath = None
        self.mysqlRootPassword = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CreateDataVolumeTemplateFromVolumeSnapshotAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/images/data-volume-templates/from/volume-snapshots/{snapshotUuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'snapshotUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'backupStorageUuids': ParamAnnotation(required=True,non_empty=True,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CreateDataVolumeTemplateFromVolumeSnapshotAction, self).__init__()
        self.snapshotUuid = None
        self.name = None
        self.description = None
        self.backupStorageUuids = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class BackupStorageMigrateImageAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/backup-storage/images/{imageUuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'backupStorageMigrateImage'

    PARAMS = {
        'imageUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'srcBackupStorageUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'dstBackupStorageUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(BackupStorageMigrateImageAction, self).__init__()
        self.imageUuid = None
        self.srcBackupStorageUuid = None
        self.dstBackupStorageUuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryVniRangeAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/l2-networks/vxlan-pool/vni-range'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryVniRangeAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class GetVpcVRouterDistributedRoutingConnectionsAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/vpc/virtual-routers/{uuid}/tracked-connections'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(GetVpcVRouterDistributedRoutingConnectionsAction, self).__init__()
        self.uuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class UpdateEcsVSwitchAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/hybrid/aliyun/vswitch/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'updateEcsVSwitch'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=False,valid_regex_values=r'^[\u4e00-\u9fa5a-zA-Z][\u4e00-\u9fa5_a-zA-Z0-9-]+$',max_length=128,min_length=2,non_empty=False,null_elements=False,empty_string=False,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=1024,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(UpdateEcsVSwitchAction, self).__init__()
        self.uuid = None
        self.name = None
        self.description = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteAliyunRouterInterfaceLocalAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/hybrid/aliyun/router-interface/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteAliyunRouterInterfaceLocalAction, self).__init__()
        self.uuid = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryInstanceOfferingAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/instance-offerings'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryInstanceOfferingAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CreateHybridEipAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/hybrid/eip'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'name': ParamAnnotation(required=True,max_length=128,non_empty=False,null_elements=False,empty_string=False,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'bandWidthMb': ParamAnnotation(required=True,number_range=[1, 200],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'type': ParamAnnotation(required=True,valid_values=['aliyun'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'dataCenterUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'chargeType': ParamAnnotation(required=True,valid_values=['PayByTraffic'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CreateHybridEipAction, self).__init__()
        self.name = None
        self.description = None
        self.bandWidthMb = None
        self.type = None
        self.dataCenterUuid = None
        self.chargeType = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CreateAliyunDiskFromRemoteAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/hybrid/aliyun/disk'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'identityUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=True,valid_regex_values=r'^[\u4e00-\u9fa5a-zA-Z][\u4e00-\u9fa5_a-zA-Z0-9.-]+$',max_length=128,min_length=2,non_empty=False,null_elements=False,empty_string=False,no_trim=False),
        'sizeWithGB': ParamAnnotation(required=False,number_range=[20, 32768],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=1024,min_length=2,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'diskCategory': ParamAnnotation(required=False,valid_values=['cloud_efficiency','cloud_ssd'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'snapshotUuid': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CreateAliyunDiskFromRemoteAction, self).__init__()
        self.identityUuid = None
        self.name = None
        self.sizeWithGB = None
        self.description = None
        self.diskCategory = None
        self.snapshotUuid = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteIdentityZoneInLocalAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/hybrid/identity-zone/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteIdentityZoneInLocalAction, self).__init__()
        self.uuid = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class UpdatePreconfigurationTemplateAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/baremetal/preconfigurations/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'updatePreconfigurationTemplate'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=False,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'distribution': ParamAnnotation(required=False,max_length=64,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'type': ParamAnnotation(required=False,valid_values=['kickstart','preseed','autoyast'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'content': ParamAnnotation(required=False,max_length=16777215,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(UpdatePreconfigurationTemplateAction, self).__init__()
        self.uuid = None
        self.name = None
        self.description = None
        self.distribution = None
        self.type = None
        self.content = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteVpcIkeConfigLocalAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/hybrid/vpn-connection/ike/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteVpcIkeConfigLocalAction, self).__init__()
        self.uuid = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DetachMonitorTriggerActionFromTriggerAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/monitoring/triggers/{triggerUuid}/trigger-actions/{actionUuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'triggerUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'actionUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DetachMonitorTriggerActionFromTriggerAction, self).__init__()
        self.triggerUuid = None
        self.actionUuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class SyncEcsVpcFromRemoteAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/hybrid/aliyun/vpc/{dataCenterUuid}/sync'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'dataCenterUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'ecsVpcId': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(SyncEcsVpcFromRemoteAction, self).__init__()
        self.dataCenterUuid = None
        self.ecsVpcId = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class AddCertificateToLoadBalancerListenerAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/load-balancers/listeners/{listenerUuid}/certificate'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'certificateUuid': ParamAnnotation(required=True,non_empty=True,null_elements=False,empty_string=True,no_trim=False),
        'listenerUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(AddCertificateToLoadBalancerListenerAction, self).__init__()
        self.certificateUuid = None
        self.listenerUuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class AddNfsPrimaryStorageAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/primary-storage/nfs'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'url': ParamAnnotation(required=True,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'type': ParamAnnotation(),
        'zoneUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(AddNfsPrimaryStorageAction, self).__init__()
        self.url = None
        self.name = None
        self.description = None
        self.type = None
        self.zoneUuid = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class UpdateAliyunEbsBackupStorageAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/backup-storage/aliyun/ebs/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'updateAliyunEbsBackupStorage'

    PARAMS = {
        'ossBucketUuid': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'url': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=False,no_trim=False),
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=False,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(UpdateAliyunEbsBackupStorageAction, self).__init__()
        self.ossBucketUuid = None
        self.url = None
        self.uuid = None
        self.name = None
        self.description = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DetachUsbDeviceFromVmAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/usb-device/usb-devices/{usbDeviceUuid}/detach'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'usbDeviceUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DetachUsbDeviceFromVmAction, self).__init__()
        self.usbDeviceUuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteHybridEipFromLocalAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/hybrid/eip/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'type': ParamAnnotation(required=True,valid_values=['aliyun'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteHybridEipFromLocalAction, self).__init__()
        self.type = None
        self.uuid = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class GetVmHostnameAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/vm-instances/{uuid}/hostnames'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(GetVmHostnameAction, self).__init__()
        self.uuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class AddMonToCephPrimaryStorageAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/primary-storage/ceph/{uuid}/mons'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'monUrls': ParamAnnotation(required=True,non_empty=True,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(AddMonToCephPrimaryStorageAction, self).__init__()
        self.uuid = None
        self.monUrls = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CreateInstanceOfferingAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/instance-offerings'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'name': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'cpuNum': ParamAnnotation(required=True,number_range=[1, 1024],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'memorySize': ParamAnnotation(required=True,number_range=[1, 9223372036854775807],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'allocatorStrategy': ParamAnnotation(),
        'sortKey': ParamAnnotation(),
        'type': ParamAnnotation(),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CreateInstanceOfferingAction, self).__init__()
        self.name = None
        self.description = None
        self.cpuNum = None
        self.memorySize = None
        self.allocatorStrategy = None
        self.sortKey = None
        self.type = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class UpdateIAM2ProjectTemplateAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/iam2/projects/templates/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'updateIAM2ProjectTemplate'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=False,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'attributes': ParamAnnotation(),
        'quota': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(UpdateIAM2ProjectTemplateAction, self).__init__()
        self.uuid = None
        self.name = None
        self.description = None
        self.attributes = None
        self.quota = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class GetTaskProgressAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/task-progresses/{apiId}'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'apiId': ParamAnnotation(),
        'all': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(GetTaskProgressAction, self).__init__()
        self.apiId = None
        self.all = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class SetVmBootModeAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/vm-instances/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'setVmBootMode'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'bootMode': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(SetVmBootModeAction, self).__init__()
        self.uuid = None
        self.bootMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class PrimaryStorageMigrateVolumeAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/primary-storage/volumes/{volumeUuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'primaryStorageMigrateVolume'

    PARAMS = {
        'volumeUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'dstPrimaryStorageUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(PrimaryStorageMigrateVolumeAction, self).__init__()
        self.volumeUuid = None
        self.dstPrimaryStorageUuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class StopEcsInstanceAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/hybrid/aliyun/ecs/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'stopEcsInstance'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(StopEcsInstanceAction, self).__init__()
        self.uuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class UpdateCephBackupStorageMonAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/backup-storage/ceph/mons/{monUuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'updateCephBackupStorageMon'

    PARAMS = {
        'monUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=False,no_trim=False),
        'hostname': ParamAnnotation(required=False,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'sshUsername': ParamAnnotation(required=False,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'sshPassword': ParamAnnotation(required=False,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'sshPort': ParamAnnotation(required=False,number_range=[1, 65535],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'monPort': ParamAnnotation(required=False,number_range=[1, 65535],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(UpdateCephBackupStorageMonAction, self).__init__()
        self.monUuid = None
        self.hostname = None
        self.sshUsername = None
        self.sshPassword = None
        self.sshPort = None
        self.monPort = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CreateDataVolumeFromVolumeSnapshotAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/volumes/data/from/volume-snapshots/{volumeSnapshotUuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'name': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'volumeSnapshotUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'primaryStorageUuid': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CreateDataVolumeFromVolumeSnapshotAction, self).__init__()
        self.name = None
        self.description = None
        self.volumeSnapshotUuid = None
        self.primaryStorageUuid = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class SyncIdentityFromRemoteAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/hybrid/identity-zone/{uuid}/sync'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(SyncIdentityFromRemoteAction, self).__init__()
        self.uuid = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class AttachAliyunDiskToEcsAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/hybrid/aliyun/disk/{diskUuid}/attach'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'ecsUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'diskUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deleteWithInstance': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(AttachAliyunDiskToEcsAction, self).__init__()
        self.ecsUuid = None
        self.diskUuid = None
        self.deleteWithInstance = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryBaremetalInstanceAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/baremetal/instances'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryBaremetalInstanceAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteHybridKeySecretAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/hybrid/hybrid/key/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteHybridKeySecretAction, self).__init__()
        self.uuid = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class AddAliyunEbsPrimaryStorageAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/primary-storage/aliyun/ebs'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'panguPartitionUuid': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'identityZoneUuid': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'defaultIoType': ParamAnnotation(required=False,valid_values=['io7','io8'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'tdcConfigContent': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'url': ParamAnnotation(required=True,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'type': ParamAnnotation(),
        'zoneUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(AddAliyunEbsPrimaryStorageAction, self).__init__()
        self.panguPartitionUuid = None
        self.identityZoneUuid = None
        self.defaultIoType = None
        self.tdcConfigContent = None
        self.url = None
        self.name = None
        self.description = None
        self.type = None
        self.zoneUuid = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class AddUserToGroupAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/accounts/groups/{groupUuid}/users'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'userUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'groupUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(AddUserToGroupAction, self).__init__()
        self.userUuid = None
        self.groupUuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CreateIAM2ProjectTemplateFromProjectAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/iam2/projects/templates/from/projects/{projectUuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'name': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'projectUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CreateIAM2ProjectTemplateFromProjectAction, self).__init__()
        self.name = None
        self.description = None
        self.projectUuid = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteIAM2VirtualIDAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/iam2/virtual-ids/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteIAM2VirtualIDAction, self).__init__()
        self.uuid = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CreateDahoVllRemoteAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/hybrid/daho/vlls'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'name': ParamAnnotation(required=True,max_length=32,non_empty=False,null_elements=False,empty_string=False,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=128,non_empty=False,null_elements=False,empty_string=False,no_trim=False),
        'bandwidth': ParamAnnotation(required=True,number_range=[1, 10240],non_empty=False,null_elements=False,empty_string=False,no_trim=False),
        'expirePolicy': ParamAnnotation(required=True,valid_values=['shutdown','renewal'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'dcConnUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'cloudConnUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'vlan': ParamAnnotation(required=True,number_range=[2, 4096],non_empty=False,null_elements=False,empty_string=False,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CreateDahoVllRemoteAction, self).__init__()
        self.name = None
        self.description = None
        self.bandwidth = None
        self.expirePolicy = None
        self.dcConnUuid = None
        self.cloudConnUuid = None
        self.vlan = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DestroyBaremetalInstanceAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/baremetal/instances/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DestroyBaremetalInstanceAction, self).__init__()
        self.uuid = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class UpdateAutoScalingGroupRemovalInstanceRuleAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/autoscaling/rules/removal-instance/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'updateAutoScalingGroupRemovalInstanceRule'

    PARAMS = {
        'adjustmentType': ParamAnnotation(required=False,valid_values=['QuantityChangeInCapacity','PercentChangeInCapacity','TotalCapacity'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'adjustmentValue': ParamAnnotation(required=False,number_range=[1, 9223372036854775807],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'removalPolicy': ParamAnnotation(required=False,valid_values=['OldestInstance','NewestInstance','OldestScalingConfiguration','MinimumCPUUsageInstance','MinimumMemoryUsageInstance'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=False,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'cooldown': ParamAnnotation(required=False,number_range=[1, 900],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(UpdateAutoScalingGroupRemovalInstanceRuleAction, self).__init__()
        self.adjustmentType = None
        self.adjustmentValue = None
        self.removalPolicy = None
        self.uuid = None
        self.name = None
        self.description = None
        self.cooldown = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QuerySNSHttpEndpointAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/sns/application-endpoints/http'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QuerySNSHttpEndpointAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QuerySNSApplicationPlatformAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/sns/application-platforms'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QuerySNSApplicationPlatformAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryAliyunDiskFromLocalAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/hybrid/aliyun/disk'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryAliyunDiskFromLocalAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class UpdateUserAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/accounts/users/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'updateUser'

    PARAMS = {
        'uuid': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'password': ParamAnnotation(required=False,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=False,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(UpdateUserAction, self).__init__()
        self.uuid = None
        self.password = None
        self.name = None
        self.description = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class AddSharedMountPointPrimaryStorageAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/primary-storage/smp'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'url': ParamAnnotation(required=True,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'type': ParamAnnotation(),
        'zoneUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(AddSharedMountPointPrimaryStorageAction, self).__init__()
        self.url = None
        self.name = None
        self.description = None
        self.type = None
        self.zoneUuid = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class GetVmConsolePasswordAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/vm-instances/{uuid}/console-passwords'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(GetVmConsolePasswordAction, self).__init__()
        self.uuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class AddDnsToL3NetworkAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/l3-networks/{l3NetworkUuid}/dns'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'l3NetworkUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'dns': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(AddDnsToL3NetworkAction, self).__init__()
        self.l3NetworkUuid = None
        self.dns = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class RemoveRemoteCidrsFromIPsecConnectionAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/ipsec/{uuid}/remote-cidrs'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'peerCidrs': ParamAnnotation(required=True,non_empty=True,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(RemoveRemoteCidrsFromIPsecConnectionAction, self).__init__()
        self.uuid = None
        self.peerCidrs = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryAutoScalingGroupActivityAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/autoscaling/groups/activities'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryAutoScalingGroupActivityAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class AddRolesToIAM2VirtualIDAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/iam2/projects/virtual-ids/{virtualIDUuid}/roles'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'virtualIDUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'roleUuids': ParamAnnotation(required=True,non_empty=True,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(AddRolesToIAM2VirtualIDAction, self).__init__()
        self.virtualIDUuid = None
        self.roleUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CreateTagAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/tags'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'name': ParamAnnotation(required=True,max_length=128,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'value': ParamAnnotation(required=True,max_length=128,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'color': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'type': ParamAnnotation(required=False,valid_values=['simple','withToken'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CreateTagAction, self).__init__()
        self.name = None
        self.value = None
        self.description = None
        self.color = None
        self.type = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class SetVmConsolePasswordAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/vm-instances/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'setVmConsolePassword'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'consolePassword': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(SetVmConsolePasswordAction, self).__init__()
        self.uuid = None
        self.consolePassword = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class AddDnsToVpcRouterAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/vpc/virtual-routers/{uuid}/dns'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'dns': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(AddDnsToVpcRouterAction, self).__init__()
        self.uuid = None
        self.dns = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class RemoveAttributesFromIAM2ProjectAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/iam2/projects/{uuid}/attributes'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'attributeUuids': ParamAnnotation(required=True,non_empty=True,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(RemoveAttributesFromIAM2ProjectAction, self).__init__()
        self.uuid = None
        self.attributeUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class SetVmStaticIpAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/vm-instances/{vmInstanceUuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'setVmStaticIp'

    PARAMS = {
        'vmInstanceUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'l3NetworkUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'ip': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(SetVmStaticIpAction, self).__init__()
        self.vmInstanceUuid = None
        self.l3NetworkUuid = None
        self.ip = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class GetCandidateBackupStorageForCreatingImageAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = 'null'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'volumeUuid': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'volumeSnapshotUuid': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(GetCandidateBackupStorageForCreatingImageAction, self).__init__()
        self.volumeUuid = None
        self.volumeSnapshotUuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CheckElaborationContentAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/errorcode/elaborations/check'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = 'params'

    PARAMS = {
        'elaborateFile': ParamAnnotation(required=True,non_empty=True,null_elements=False,empty_string=False,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CheckElaborationContentAction, self).__init__()
        self.elaborateFile = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class ChangeSchedulerStateAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/schedulers/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'changeSchedulerState'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'stateEvent': ParamAnnotation(required=True,valid_values=['enable','disable'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(ChangeSchedulerStateAction, self).__init__()
        self.uuid = None
        self.stateEvent = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CreateDataVolumeFromVolumeTemplateAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/volumes/data/from/data-volume-templates/{imageUuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'imageUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'primaryStorageUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'hostUuid': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CreateDataVolumeFromVolumeTemplateAction, self).__init__()
        self.imageUuid = None
        self.name = None
        self.description = None
        self.primaryStorageUuid = None
        self.hostUuid = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CreateL3NetworkAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/l3-networks'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'name': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'type': ParamAnnotation(),
        'l2NetworkUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'category': ParamAnnotation(required=False,valid_values=['Public','Private','System'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'ipVersion': ParamAnnotation(required=False,valid_values=['4','6'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'system': ParamAnnotation(),
        'dnsDomain': ParamAnnotation(),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CreateL3NetworkAction, self).__init__()
        self.name = None
        self.description = None
        self.type = None
        self.l2NetworkUuid = None
        self.category = None
        self.ipVersion = None
        self.system = None
        self.dnsDomain = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteVipAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/vips/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteVipAction, self).__init__()
        self.uuid = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class GetBackupStorageCapacityAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/backup-storage/capacities'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'zoneUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'backupStorageUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'all': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(GetBackupStorageCapacityAction, self).__init__()
        self.zoneUuids = None
        self.backupStorageUuids = None
        self.all = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteExportedDatabaseBackupFromBackupStorageAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/exported-database-backup/{databaseBackupUuid}/backup-storage/{backupStorageUuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'backupStorageUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'databaseBackupUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteExportedDatabaseBackupFromBackupStorageAction, self).__init__()
        self.backupStorageUuid = None
        self.databaseBackupUuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryMediaAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/media'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryMediaAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class SetL3NetworkRouterInterfaceIpAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/l3-networks/{l3NetworkUuid}/router-interface-ip'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'l3NetworkUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'routerInterfaceIp': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(SetL3NetworkRouterInterfaceIpAction, self).__init__()
        self.l3NetworkUuid = None
        self.routerInterfaceIp = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DetachScsiLunFromVmInstanceAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/vm-instances/{vmInstanceUuid}/scsi-lun/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'vmInstanceUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DetachScsiLunFromVmInstanceAction, self).__init__()
        self.uuid = None
        self.vmInstanceUuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class SyncAliyunRouteEntryFromRemoteAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/hybrid/aliyun/route-entry/{vRouterUuid}/sync'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'syncAliyunRouteEntryFromRemote'

    PARAMS = {
        'vRouterUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'vRouterType': ParamAnnotation(required=True,valid_values=['vbr','vrouter'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(SyncAliyunRouteEntryFromRemoteAction, self).__init__()
        self.vRouterUuid = None
        self.vRouterType = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteVmNicAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/nics/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteVmNicAction, self).__init__()
        self.uuid = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteVmInstanceHaLevelAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/vm-instances/{uuid}/ha-levels'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteVmInstanceHaLevelAction, self).__init__()
        self.uuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class AddIscsiServerAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/storage-devices/iscsi/servers'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'name': ParamAnnotation(required=False,max_length=256,non_empty=False,null_elements=False,empty_string=False,no_trim=False),
        'ip': ParamAnnotation(required=True,max_length=64,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'port': ParamAnnotation(required=False,number_range=[1, 65535],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'chapUserName': ParamAnnotation(required=False,max_length=128,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'chapUserPassword': ParamAnnotation(required=False,max_length=128,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(AddIscsiServerAction, self).__init__()
        self.name = None
        self.ip = None
        self.port = None
        self.chapUserName = None
        self.chapUserPassword = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryNetworkServiceProviderAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/network-services/providers'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryNetworkServiceProviderAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CreateLoadBalancerAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/load-balancers'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'name': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'vipUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CreateLoadBalancerAction, self).__init__()
        self.name = None
        self.description = None
        self.vipUuid = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class AttachHybridKeyAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/hybrid/hybrid/key/{uuid}/attach'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'attachHybridKey'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(AttachHybridKeyAction, self).__init__()
        self.uuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CreateAutoScalingGroupAddingNewInstanceRuleAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/autoscaling/rules/adding-new-instance'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'adjustmentType': ParamAnnotation(required=True,valid_values=['QuantityChangeInCapacity','PercentChangeInCapacity','TotalCapacity'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'adjustmentValue': ParamAnnotation(required=True,number_range=[1, 9223372036854775807],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'autoScalingGroupUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'type': ParamAnnotation(),
        'cooldown': ParamAnnotation(required=False,number_range=[1, 2147483647],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CreateAutoScalingGroupAddingNewInstanceRuleAction, self).__init__()
        self.adjustmentType = None
        self.adjustmentValue = None
        self.name = None
        self.description = None
        self.autoScalingGroupUuid = None
        self.type = None
        self.cooldown = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryAccountResourceRefAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/accounts/resources/refs'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryAccountResourceRefAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CreateResourceStackAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/cloudformation/stack'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'name': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'type': ParamAnnotation(required=False,valid_values=['zstack'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'rollback': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'templateContent': ParamAnnotation(required=False,max_length=4194304,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'templateUuid': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'parameters': ParamAnnotation(required=False,max_length=524288,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CreateResourceStackAction, self).__init__()
        self.name = None
        self.description = None
        self.type = None
        self.rollback = None
        self.templateContent = None
        self.templateUuid = None
        self.parameters = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteLoadBalancerAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/load-balancers/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteLoadBalancerAction, self).__init__()
        self.uuid = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class RemoveVmNicFromLoadBalancerAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/load-balancers/listeners/{listenerUuid}/vm-instances/nics'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'vmNicUuids': ParamAnnotation(required=True,non_empty=True,null_elements=False,empty_string=True,no_trim=False),
        'listenerUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(RemoveVmNicFromLoadBalancerAction, self).__init__()
        self.vmNicUuids = None
        self.listenerUuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteAliyunPanguPartitionAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/aliyun/pangu/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteAliyunPanguPartitionAction, self).__init__()
        self.uuid = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class GetAliyunNasFileSystemRemoteAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/nas/aliyun/remote'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'dataCenterUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fileSystemId': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=False,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(GetAliyunNasFileSystemRemoteAction, self).__init__()
        self.dataCenterUuid = None
        self.fileSystemId = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class UpdateLdapServerAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/ldap/servers/{ldapServerUuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'updateLdapServer'

    PARAMS = {
        'ldapServerUuid': ParamAnnotation(required=True,max_length=32,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=False,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'url': ParamAnnotation(required=False,max_length=1024,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'base': ParamAnnotation(required=False,max_length=1024,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'username': ParamAnnotation(required=False,max_length=1024,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'password': ParamAnnotation(required=False,max_length=1024,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'encryption': ParamAnnotation(required=False,valid_values=['None','TLS'],max_length=1024,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(UpdateLdapServerAction, self).__init__()
        self.ldapServerUuid = None
        self.name = None
        self.description = None
        self.url = None
        self.base = None
        self.username = None
        self.password = None
        self.encryption = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryVCenterResourcePoolAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/vcenters/clusters/resourcepools'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryVCenterResourcePoolAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class AddSftpBackupStorageAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/backup-storage/sftp'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'hostname': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=False,no_trim=False),
        'username': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'password': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'sshPort': ParamAnnotation(required=False,number_range=[1, 65535],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'url': ParamAnnotation(required=True,max_length=2048,non_empty=False,null_elements=False,empty_string=False,no_trim=False),
        'name': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'type': ParamAnnotation(),
        'importImages': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(AddSftpBackupStorageAction, self).__init__()
        self.hostname = None
        self.username = None
        self.password = None
        self.sshPort = None
        self.url = None
        self.name = None
        self.description = None
        self.type = None
        self.importImages = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class GetHostIommuStateAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/pci-device/hosts/{uuid}/state'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(GetHostIommuStateAction, self).__init__()
        self.uuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CreatePciDeviceSpecAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/pci-device/pci-device-specs'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'name': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'vendorId': ParamAnnotation(required=True,max_length=4,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deviceId': ParamAnnotation(required=True,max_length=4,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'subvendorId': ParamAnnotation(required=False,max_length=4,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'subdeviceId': ParamAnnotation(required=False,max_length=4,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'romContent': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'romVersion': ParamAnnotation(required=False,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CreatePciDeviceSpecAction, self).__init__()
        self.name = None
        self.description = None
        self.vendorId = None
        self.deviceId = None
        self.subvendorId = None
        self.subdeviceId = None
        self.romContent = None
        self.romVersion = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class UpdateVolumeAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/volumes/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'updateVolume'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=False,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(UpdateVolumeAction, self).__init__()
        self.uuid = None
        self.name = None
        self.description = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryAliyunEbsPrimaryStorageAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/primary-storage/aliyun/ebs'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryAliyunEbsPrimaryStorageAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteIAM2OrganizationAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/iam2/organizations/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteIAM2OrganizationAction, self).__init__()
        self.uuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CreateAliyunNasFileSystemAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/nas/aliyun'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'storageType': ParamAnnotation(required=True,valid_values=['Performance','Capacity'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'dataCenterUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'protocol': ParamAnnotation(required=False,valid_values=['NFS','SMB'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=False,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=1024,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CreateAliyunNasFileSystemAction, self).__init__()
        self.storageType = None
        self.dataCenterUuid = None
        self.protocol = None
        self.name = None
        self.description = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class GetPrimaryStorageCandidatesForVolumeMigrationAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/primary-storage/volumes/{volumeUuid}/migration-candidates'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'volumeUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(GetPrimaryStorageCandidatesForVolumeMigrationAction, self).__init__()
        self.volumeUuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class GetResourceAccountAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/resources/accounts'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'resourceUuids': ParamAnnotation(required=True,non_empty=True,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(GetResourceAccountAction, self).__init__()
        self.resourceUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class GetPciDeviceCandidatesForAttachingVmAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/vm-instances/{vmInstanceUuid}/candidate-pci-devices'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'vmInstanceUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'types': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(GetPciDeviceCandidatesForAttachingVmAction, self).__init__()
        self.vmInstanceUuid = None
        self.types = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class ChangeVmPasswordAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/vm-instances/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'changeVmPassword'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'password': ParamAnnotation(required=True,valid_regex_values=r'[\da-zA-Z-`=\\\[\];\',./~!@#$%^&*()_+|{}:"<>?]{1,}',max_length=32,non_empty=False,null_elements=False,empty_string=True,no_trim=True),
        'account': ParamAnnotation(required=True,non_empty=True,null_elements=False,empty_string=True,no_trim=True),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(ChangeVmPasswordAction, self).__init__()
        self.uuid = None
        self.password = None
        self.account = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CleanUpImageCacheOnPrimaryStorageAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/primary-storage/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'cleanUpImageCacheOnPrimaryStorage'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CleanUpImageCacheOnPrimaryStorageAction, self).__init__()
        self.uuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryAutoScalingVmTemplateAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/autoscaling/vmtemplate'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryAutoScalingVmTemplateAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryUsbDeviceAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/usb-device/usb-devices'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryUsbDeviceAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class BatchCreateBaremetalChassisAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/baremetal/chassis/from-file'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'baremetalChassisInfo': ParamAnnotation(required=True,non_empty=True,null_elements=False,empty_string=True,no_trim=False),
        'longJobName': ParamAnnotation(required=False,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'longJobDescription': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(BatchCreateBaremetalChassisAction, self).__init__()
        self.baremetalChassisInfo = None
        self.longJobName = None
        self.longJobDescription = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class RemoveSchedulerJobsFromSchedulerJobGroupAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/scheduler/jobgroups/{schedulerJobGroupUuid}/job'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'schedulerJobGroupUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'schedulerJobUuids': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(RemoveSchedulerJobsFromSchedulerJobGroupAction, self).__init__()
        self.schedulerJobGroupUuid = None
        self.schedulerJobUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CreateRootVolumeTemplateFromVolumeSnapshotAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/images/root-volume-templates/from/volume-snapshots/{snapshotUuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'snapshotUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'guestOsType': ParamAnnotation(),
        'backupStorageUuids': ParamAnnotation(required=True,non_empty=True,null_elements=False,empty_string=True,no_trim=False),
        'platform': ParamAnnotation(required=False,valid_values=['Linux','Windows','Other','Paravirtualization','WindowsVirtio'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'system': ParamAnnotation(),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CreateRootVolumeTemplateFromVolumeSnapshotAction, self).__init__()
        self.snapshotUuid = None
        self.name = None
        self.description = None
        self.guestOsType = None
        self.backupStorageUuids = None
        self.platform = None
        self.system = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryPciDeviceSpecAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/pci-device/pci-device-specs'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryPciDeviceSpecAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class AttachPciDeviceToVmAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/pci-device/pci-devices/{pciDeviceUuid}/attach'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'pciDeviceUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'vmInstanceUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(AttachPciDeviceToVmAction, self).__init__()
        self.pciDeviceUuid = None
        self.vmInstanceUuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteSecurityGroupRuleAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/security-groups/rules'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'ruleUuids': ParamAnnotation(required=True,non_empty=True,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteSecurityGroupRuleAction, self).__init__()
        self.ruleUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class RemoveUserFromGroupAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/accounts/groups/{groupUuid}/users/{userUuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'userUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'groupUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(RemoveUserFromGroupAction, self).__init__()
        self.userUuid = None
        self.groupUuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteRoleAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/identities/roles/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteRoleAction, self).__init__()
        self.uuid = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class UpdateQuotaAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/accounts/quotas/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'updateQuota'

    PARAMS = {
        'identityUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'value': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(UpdateQuotaAction, self).__init__()
        self.identityUuid = None
        self.name = None
        self.value = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryManagementNodeAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/management-nodes'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryManagementNodeAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class RecoveryVirtualBorderRouterRemoteAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/hybrid/aliyun/border-router/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'recoveryVirtualBorderRouterRemote'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(RecoveryVirtualBorderRouterRemoteAction, self).__init__()
        self.uuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class ChangeTicketFlowCollectionStateAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/tickets/flow-collections/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'changeTicketFlowCollectionState'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'stateEvent': ParamAnnotation(required=True,valid_values=['enable','disable'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(ChangeTicketFlowCollectionStateAction, self).__init__()
        self.uuid = None
        self.stateEvent = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteWebhookAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/web-hooks/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteWebhookAction, self).__init__()
        self.uuid = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class SubmitLongJobAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/longjobs'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'name': ParamAnnotation(required=False,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'jobName': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'jobData': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'targetResourceUuid': ParamAnnotation(required=False,max_length=32,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(SubmitLongJobAction, self).__init__()
        self.name = None
        self.description = None
        self.jobName = None
        self.jobData = None
        self.targetResourceUuid = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class AttachPoliciesToUserAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/accounts/users/{userUuid}/policy-collection'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'userUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'policyUuids': ParamAnnotation(required=True,non_empty=True,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(AttachPoliciesToUserAction, self).__init__()
        self.userUuid = None
        self.policyUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryVirtualBorderRouterFromLocalAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/hybrid/aliyun/border-router'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryVirtualBorderRouterFromLocalAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteEipAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/eips/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteEipAction, self).__init__()
        self.uuid = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class SetVmInstanceHaLevelAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/vm-instances/{uuid}/ha-levels'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'level': ParamAnnotation(required=True,valid_values=['NeverStop','OnHostFailure'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(SetVmInstanceHaLevelAction, self).__init__()
        self.uuid = None
        self.level = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DestroyVmInstanceAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/vm-instances/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DestroyVmInstanceAction, self).__init__()
        self.uuid = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class GetConnectionBetweenL3NetworkAndAliyunVSwitchAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/hybrid/aliyun/relationships'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = 'params'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceType': ParamAnnotation(required=True,valid_values=['l3network','vroutervm','vbr','vpc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(GetConnectionBetweenL3NetworkAndAliyunVSwitchAction, self).__init__()
        self.uuid = None
        self.resourceType = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class GetCandidateIsoForAttachingVmAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/vm-instances/{vmInstanceUuid}/iso-candidates'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'vmInstanceUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(GetCandidateIsoForAttachingVmAction, self).__init__()
        self.vmInstanceUuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteVirtualBorderRouterLocalAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/hybrid/aliyun/border-router/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteVirtualBorderRouterLocalAction, self).__init__()
        self.uuid = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryIAM2ProjectAttributeAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/iam2/projects/attributes'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryIAM2ProjectAttributeAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class SyncVpcUserVpnGatewayFromRemoteAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/hybrid/user-vpn/{dataCenterUuid}/sync'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'syncVpcUserVpnGatewayFromRemote'

    PARAMS = {
        'dataCenterUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(SyncVpcUserVpnGatewayFromRemoteAction, self).__init__()
        self.dataCenterUuid = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class UpdateSchedulerJobGroupAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/scheduler/jobgroups/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'updateSchedulerJobGroup'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=False,max_length=255,non_empty=False,null_elements=False,empty_string=False,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'state': ParamAnnotation(required=False,valid_values=['Enabled','Disabled'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'parameters': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(UpdateSchedulerJobGroupAction, self).__init__()
        self.uuid = None
        self.name = None
        self.description = None
        self.state = None
        self.parameters = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryCephPrimaryStorageAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/primary-storage/ceph'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryCephPrimaryStorageAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CreateDataVolumeTemplateFromVolumeAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/images/data-volume-templates/from/volumes/{volumeUuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'name': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'volumeUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'backupStorageUuids': ParamAnnotation(required=False,non_empty=True,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CreateDataVolumeTemplateFromVolumeAction, self).__init__()
        self.name = None
        self.description = None
        self.volumeUuid = None
        self.backupStorageUuids = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryAlarmAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/zwatch/alarms'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryAlarmAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class GetIpAddressCapacityAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/ip-capacity'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'zoneUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'l3NetworkUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'ipRangeUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'all': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(GetIpAddressCapacityAction, self).__init__()
        self.zoneUuids = None
        self.l3NetworkUuids = None
        self.ipRangeUuids = None
        self.all = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CreateVmInstanceAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/vm-instances'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'name': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'instanceOfferingUuid': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'cpuNum': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'memorySize': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'imageUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'l3NetworkUuids': ParamAnnotation(required=True,non_empty=True,null_elements=False,empty_string=True,no_trim=False),
        'type': ParamAnnotation(required=False,valid_values=['UserVm','ApplianceVm'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'rootDiskOfferingUuid': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'rootDiskSize': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'dataDiskOfferingUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'zoneUuid': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'clusterUuid': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'hostUuid': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'primaryStorageUuidForRootVolume': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'defaultL3NetworkUuid': ParamAnnotation(),
        'strategy': ParamAnnotation(required=False,valid_values=['InstantStart','JustCreate','CreateStopped'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'rootVolumeSystemTags': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'dataVolumeSystemTags': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CreateVmInstanceAction, self).__init__()
        self.name = None
        self.instanceOfferingUuid = None
        self.cpuNum = None
        self.memorySize = None
        self.imageUuid = None
        self.l3NetworkUuids = None
        self.type = None
        self.rootDiskOfferingUuid = None
        self.rootDiskSize = None
        self.dataDiskOfferingUuids = None
        self.zoneUuid = None
        self.clusterUuid = None
        self.hostUuid = None
        self.primaryStorageUuidForRootVolume = None
        self.description = None
        self.defaultL3NetworkUuid = None
        self.strategy = None
        self.rootVolumeSystemTags = None
        self.dataVolumeSystemTags = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class GetConnectionAccessPointFromRemoteAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/hybrid/aliyun/access-point{dataCenterUuid}/remote'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'dataCenterUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(GetConnectionAccessPointFromRemoteAction, self).__init__()
        self.dataCenterUuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class GetZoneAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/zones/{uuid}/info'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(GetZoneAction, self).__init__()
        self.uuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class UpdateImageAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/images/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'updateImage'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=False,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'guestOsType': ParamAnnotation(required=False,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'mediaType': ParamAnnotation(required=False,valid_values=['RootVolumeTemplate','DataVolumeTemplate','ISO'],max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'format': ParamAnnotation(required=False,valid_values=['raw','qcow2','iso'],max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'system': ParamAnnotation(),
        'platform': ParamAnnotation(required=False,valid_values=['Linux','Windows','Other','Paravirtualization','WindowsVirtio'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(UpdateImageAction, self).__init__()
        self.uuid = None
        self.name = None
        self.description = None
        self.guestOsType = None
        self.mediaType = None
        self.format = None
        self.system = None
        self.platform = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteUserGroupAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/accounts/groups/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteUserGroupAction, self).__init__()
        self.uuid = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class GetTwoFactorAuthenticationSecretAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/twofactorauthentication/secret'
    NEED_SESSION = False
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'name': ParamAnnotation(required=True,non_empty=True,null_elements=False,empty_string=True,no_trim=False),
        'password': ParamAnnotation(required=True,non_empty=True,null_elements=False,empty_string=True,no_trim=False),
        'type': ParamAnnotation(required=True,valid_values=['account','iam2'],non_empty=True,null_elements=False,empty_string=True,no_trim=False),
        'captchaUuid': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'verifyCode': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation()
    }

    def __init__(self):
        super(GetTwoFactorAuthenticationSecretAction, self).__init__()
        self.name = None
        self.password = None
        self.type = None
        self.captchaUuid = None
        self.verifyCode = None
        self.systemTags = None
        self.userTags = None


class DeleteEcsSecurityGroupInLocalAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/hybrid/aliyun/security-group/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteEcsSecurityGroupInLocalAction, self).__init__()
        self.uuid = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class AttachMonitorTriggerActionToTriggerAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/monitoring/triggers/{triggerUuid}/trigger-actions/{actionUuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'triggerUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'actionUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(AttachMonitorTriggerActionToTriggerAction, self).__init__()
        self.triggerUuid = None
        self.actionUuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DetachAutoScalingTemplateFromGroupAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/autoscaling/template/{uuid}/groups/{groupUuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'templateUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'groupUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DetachAutoScalingTemplateFromGroupAction, self).__init__()
        self.templateUuid = None
        self.groupUuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DetachPoliciesFromUserAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/accounts/users/{userUuid}/policies'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'policyUuids': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'userUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DetachPoliciesFromUserAction, self).__init__()
        self.policyUuids = None
        self.userUuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class GetVipQosAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/vip/{uuid}/vip-qos'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(GetVipQosAction, self).__init__()
        self.uuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteEcsInstanceAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/hybrid/aliyun/ecs/{uuid}/remote'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteEcsInstanceAction, self).__init__()
        self.uuid = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class RecoverImageAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/images/{imageUuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'recoverImage'

    PARAMS = {
        'imageUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'backupStorageUuids': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(RecoverImageAction, self).__init__()
        self.imageUuid = None
        self.backupStorageUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class GetScsiLunCandidatesForAttachingVmAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/vm-instances/{vmInstanceUuid}/candidate-storage-devices'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'vmInstanceUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(GetScsiLunCandidatesForAttachingVmAction, self).__init__()
        self.vmInstanceUuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class RemoveActionFromAlarmAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/zwatch/alarms/{alarmUuid}/actions/{actionUuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'alarmUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'actionUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(RemoveActionFromAlarmAction, self).__init__()
        self.alarmUuid = None
        self.actionUuid = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryUserGroupAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/accounts/groups'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryUserGroupAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CreateDataVolumeAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/volumes/data'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'name': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'diskOfferingUuid': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'diskSize': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'primaryStorageUuid': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CreateDataVolumeAction, self).__init__()
        self.name = None
        self.description = None
        self.diskOfferingUuid = None
        self.diskSize = None
        self.primaryStorageUuid = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class GetVpcVRouterNetworkServiceStateAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/vpc/virtual-routers/{uuid}/networkservicestate'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'networkService': ParamAnnotation(required=True,valid_values=['SNAT'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(GetVpcVRouterNetworkServiceStateAction, self).__init__()
        self.uuid = None
        self.networkService = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryClusterAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/clusters'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryClusterAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class AddDataCenterFromRemoteAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/hybrid/data-center'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'regionId': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=False,no_trim=False),
        'type': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'endpoint': ParamAnnotation(required=False,max_length=127,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=1024,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(AddDataCenterFromRemoteAction, self).__init__()
        self.regionId = None
        self.type = None
        self.endpoint = None
        self.description = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class SyncBackupFromImageStoreBackupStorageAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/volume-backups/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'syncBackupFromImageStoreBackupStorage'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'srcBackupStorageUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'dstBackupStorageUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(SyncBackupFromImageStoreBackupStorageAction, self).__init__()
        self.uuid = None
        self.srcBackupStorageUuid = None
        self.dstBackupStorageUuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CreateVmNicAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/nics'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'l3NetworkUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'ip': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CreateVmNicAction, self).__init__()
        self.l3NetworkUuid = None
        self.ip = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class AddKVMHostFromConfigFileAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/hosts/kvm/from-file'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'hostInfo': ParamAnnotation(required=True,non_empty=True,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(AddKVMHostFromConfigFileAction, self).__init__()
        self.hostInfo = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteVniRangeAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/l2-networks/vxlan-pool/vni-ranges/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteVniRangeAction, self).__init__()
        self.uuid = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class GetAccountQuotaUsageAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/accounts/quota/{uuid}/usages'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(GetAccountQuotaUsageAction, self).__init__()
        self.uuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryIAM2VirtualIDAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/iam2/virtual-ids'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryIAM2VirtualIDAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteIAM2ProjectTemplateAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/iam2/projects/templates/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteIAM2ProjectTemplateAction, self).__init__()
        self.uuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class ExpungeDataVolumeAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/volumes/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'expungeDataVolume'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(ExpungeDataVolumeAction, self).__init__()
        self.uuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class RemoveRolesFromIAM2VirtualIDGroupAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/iam2/projects/groups/{groupUuid}/roles'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'roleUuids': ParamAnnotation(required=True,non_empty=True,null_elements=False,empty_string=True,no_trim=False),
        'groupUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(RemoveRolesFromIAM2VirtualIDGroupAction, self).__init__()
        self.roleUuids = None
        self.groupUuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class MigrateVmAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/vm-instances/{vmInstanceUuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'migrateVm'

    PARAMS = {
        'vmInstanceUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'hostUuid': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'migrateFromDestination': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(MigrateVmAction, self).__init__()
        self.vmInstanceUuid = None
        self.hostUuid = None
        self.migrateFromDestination = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class RebootVmInstanceAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/vm-instances/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'rebootVmInstance'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(RebootVmInstanceAction, self).__init__()
        self.uuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class UpdateImageStoreBackupStorageAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/backup-storage/image-store/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'updateImageStoreBackupStorage'

    PARAMS = {
        'username': ParamAnnotation(required=False,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'password': ParamAnnotation(required=False,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'hostname': ParamAnnotation(required=False,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'sshPort': ParamAnnotation(required=False,number_range=[1, 65535],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=False,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(UpdateImageStoreBackupStorageAction, self).__init__()
        self.username = None
        self.password = None
        self.hostname = None
        self.sshPort = None
        self.uuid = None
        self.name = None
        self.description = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class AddV2VConversionHostAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/v2v-conversion-hosts'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'name': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'type': ParamAnnotation(required=True,valid_values=['VMWARE'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'hostUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'storagePath': ParamAnnotation(required=True,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(AddV2VConversionHostAction, self).__init__()
        self.name = None
        self.description = None
        self.type = None
        self.hostUuid = None
        self.storagePath = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class AddIAM2VirtualIDsToGroupAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/iam2/projects/groups/{groupUuid}/virtual-ids'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'virtualIDUuids': ParamAnnotation(required=True,non_empty=True,null_elements=False,empty_string=True,no_trim=False),
        'groupUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(AddIAM2VirtualIDsToGroupAction, self).__init__()
        self.virtualIDUuids = None
        self.groupUuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DetachAliyunKeyAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/hybrid/aliyun/key/{uuid}/detach'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'detachAliyunKey'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DetachAliyunKeyAction, self).__init__()
        self.uuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CreateWebhookAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/web-hooks'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'name': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'url': ParamAnnotation(required=True,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'type': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'opaque': ParamAnnotation(),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CreateWebhookAction, self).__init__()
        self.name = None
        self.description = None
        self.url = None
        self.type = None
        self.opaque = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CreateAutoScalingGroupAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/autoscaling/groups'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'name': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'scalingResourceType': ParamAnnotation(required=True,valid_values=['VmInstance'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'minResourceSize': ParamAnnotation(required=True,number_range=[0, 2147483647],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'maxResourceSize': ParamAnnotation(required=True,number_range=[0, 2147483647],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'defaultCooldown': ParamAnnotation(required=True,number_range=[0, 2147483647],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'removalPolicy': ParamAnnotation(required=True,valid_values=['OldestInstance','NewestInstance','OldestScalingConfiguration','MinimumCPUUsageInstance','MinimumMemoryUsageInstance'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'defaultEnable': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CreateAutoScalingGroupAction, self).__init__()
        self.name = None
        self.description = None
        self.scalingResourceType = None
        self.minResourceSize = None
        self.maxResourceSize = None
        self.defaultCooldown = None
        self.removalPolicy = None
        self.defaultEnable = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteUserAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/accounts/users/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteUserAction, self).__init__()
        self.uuid = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class SyncVolumeSizeAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/volumes/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'syncVolumeSize'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(SyncVolumeSizeAction, self).__init__()
        self.uuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteTagAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/tags/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteTagAction, self).__init__()
        self.uuid = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class UpdateAlarmDataAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/zwatch/alarm-histories/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'updateAlarmData'

    PARAMS = {
        'dataUuid': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'dataStartTime': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'dataEndTime': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'updateMode': ParamAnnotation(required=True,valid_values=['OnlyOne','InRange','All'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'readStatus': ParamAnnotation(required=False,valid_values=['Read','Unread'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(UpdateAlarmDataAction, self).__init__()
        self.dataUuid = None
        self.dataStartTime = None
        self.dataEndTime = None
        self.updateMode = None
        self.readStatus = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class AddPolicyStatementsToRoleAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/identities/roles/{uuid}/policy-statements'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'statements': ParamAnnotation(required=True,non_empty=True,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(AddPolicyStatementsToRoleAction, self).__init__()
        self.uuid = None
        self.statements = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CreateEcsSecurityGroupRuleRemoteAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/hybrid/aliyun/security-group-rule'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'groupUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'direction': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'protocol': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'portRange': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=False,no_trim=False),
        'cidr': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=False,no_trim=False),
        'policy': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'nictype': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'priority': ParamAnnotation(required=False,number_range=[1, 100],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=256,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CreateEcsSecurityGroupRuleRemoteAction, self).__init__()
        self.groupUuid = None
        self.direction = None
        self.protocol = None
        self.portRange = None
        self.cidr = None
        self.policy = None
        self.nictype = None
        self.priority = None
        self.description = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class AddConnectionAccessPointFromRemoteAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/hybrid/aliyun/access-point'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'dataCenterUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'accessPointId': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=False,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(AddConnectionAccessPointFromRemoteAction, self).__init__()
        self.dataCenterUuid = None
        self.accessPointId = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryCephBackupStorageAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/backup-storage/ceph'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryCephBackupStorageAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class AttachPolicyToUserGroupAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/accounts/groups/{groupUuid}/policies'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'policyUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'groupUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(AttachPolicyToUserGroupAction, self).__init__()
        self.policyUuid = None
        self.groupUuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class AddSNSDingTalkAtPersonAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/sns/application-endpoints/ding-talk/at-persons'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'phoneNumber': ParamAnnotation(required=True,max_length=64,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'endpointUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(AddSNSDingTalkAtPersonAction, self).__init__()
        self.phoneNumber = None
        self.endpointUuid = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryVipAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/vips'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryVipAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class SetVmCleanTrafficAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/vm-instances/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'setVmCleanTraffic'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'enable': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(SetVmCleanTrafficAction, self).__init__()
        self.uuid = None
        self.enable = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class AddSchedulerJobGroupToSchedulerTriggerAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/scheduler/jobgroups/{schedulerJobGroupUuid}/scheduler/triggers/{schedulerTriggerUuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'schedulerJobGroupUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'schedulerTriggerUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'triggerNow': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(AddSchedulerJobGroupToSchedulerTriggerAction, self).__init__()
        self.schedulerJobGroupUuid = None
        self.schedulerTriggerUuid = None
        self.triggerNow = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class AddAttributesToIAM2OrganizationAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/iam2/organizations/{uuid}/attributes'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'attributes': ParamAnnotation(required=True,non_empty=True,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(AddAttributesToIAM2OrganizationAction, self).__init__()
        self.uuid = None
        self.attributes = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class GetLocalStorageHostDiskCapacityAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/primary-storage/local-storage/{primaryStorageUuid}/capacities'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'hostUuid': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'primaryStorageUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(GetLocalStorageHostDiskCapacityAction, self).__init__()
        self.hostUuid = None
        self.primaryStorageUuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class GetVmAttachableL3NetworkAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/vm-instances/{vmInstanceUuid}/l3-networks-candidates'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'vmInstanceUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(GetVmAttachableL3NetworkAction, self).__init__()
        self.vmInstanceUuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class GetAllEventMetadataAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/zwatch/events/meta-data'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(GetAllEventMetadataAction, self).__init__()
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CreateDiskOfferingAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/disk-offerings'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'name': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'diskSize': ParamAnnotation(required=True,number_range=[1, 9223372036854775807],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'sortKey': ParamAnnotation(),
        'allocationStrategy': ParamAnnotation(),
        'type': ParamAnnotation(required=False,valid_values=['zstack'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CreateDiskOfferingAction, self).__init__()
        self.name = None
        self.description = None
        self.diskSize = None
        self.sortKey = None
        self.allocationStrategy = None
        self.type = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class UpdatePortForwardingRuleAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/port-forwarding/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'updatePortForwardingRule'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=False,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(UpdatePortForwardingRuleAction, self).__init__()
        self.uuid = None
        self.name = None
        self.description = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CreateLdapBindingAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/ldap/bindings'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'ldapUid': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'accountUuid': ParamAnnotation(required=True,max_length=32,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CreateLdapBindingAction, self).__init__()
        self.ldapUid = None
        self.accountUuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryEventFromResourceStackAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/cloudformation/event'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryEventFromResourceStackAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class ZQLQueryAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/zql'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'zql': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(ZQLQueryAction, self).__init__()
        self.zql = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class RevokeResourceSharingAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/accounts/resources/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'revokeResourceSharing'

    PARAMS = {
        'resourceUuids': ParamAnnotation(required=True,non_empty=True,null_elements=False,empty_string=True,no_trim=False),
        'toPublic': ParamAnnotation(),
        'accountUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'all': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(RevokeResourceSharingAction, self).__init__()
        self.resourceUuids = None
        self.toPublic = None
        self.accountUuids = None
        self.all = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class SyncDatabaseBackupFromImageStoreBackupStorageAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/database-backups/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'syncDatabaseBackupFromImageStoreBackupStorage'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'srcBackupStorageUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'dstBackupStorageUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(SyncDatabaseBackupFromImageStoreBackupStorageAction, self).__init__()
        self.uuid = None
        self.srcBackupStorageUuid = None
        self.dstBackupStorageUuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryResourcePriceAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/billings/prices'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryResourcePriceAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class AddVmNicToLoadBalancerAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/load-balancers/listeners/{listenerUuid}/vm-instances/nics'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'vmNicUuids': ParamAnnotation(required=True,non_empty=True,null_elements=False,empty_string=True,no_trim=False),
        'listenerUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(AddVmNicToLoadBalancerAction, self).__init__()
        self.vmNicUuids = None
        self.listenerUuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CreateSNSDingTalkEndpointAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/sns/application-endpoints/ding-talk'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'url': ParamAnnotation(required=True,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'atAll': ParamAnnotation(),
        'atPersonPhoneNumbers': ParamAnnotation(required=False,non_empty=True,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'platformUuid': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CreateSNSDingTalkEndpointAction, self).__init__()
        self.url = None
        self.atAll = None
        self.atPersonPhoneNumbers = None
        self.name = None
        self.description = None
        self.platformUuid = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class ChangeIAM2OrganizationParentAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/iam2/organizations/{parentUuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'changeIAM2OrganizationParent'

    PARAMS = {
        'parentUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'childrenUuids': ParamAnnotation(required=True,non_empty=True,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(ChangeIAM2OrganizationParentAction, self).__init__()
        self.parentUuid = None
        self.childrenUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteEcsVpcInLocalAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/hybrid/aliyun/vpc/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteEcsVpcInLocalAction, self).__init__()
        self.uuid = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class StartBaremetalInstanceAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/baremetal/instances/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'startBaremetalInstance'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'pxeBoot': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(StartBaremetalInstanceAction, self).__init__()
        self.uuid = None
        self.pxeBoot = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CreateAliyunRouterInterfaceRemoteAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/hybrid/aliyun/router-interface'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'dataCenterUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'accessPointUuid': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'spec': ParamAnnotation(required=False,valid_regex_values=r'[XxlL]{1}arge.(\d+)',non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'vRouterUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'routerType': ParamAnnotation(required=True,valid_values=['VBR','VRouter'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=1024,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=False,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CreateAliyunRouterInterfaceRemoteAction, self).__init__()
        self.dataCenterUuid = None
        self.accessPointUuid = None
        self.spec = None
        self.vRouterUuid = None
        self.routerType = None
        self.description = None
        self.name = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryAliyunEbsBackupStorageAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/backup-storage/aliyun/ebs'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryAliyunEbsBackupStorageAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteVipQosAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/vips/{uuid}/vip-qos'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'port': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteVipQosAction, self).__init__()
        self.uuid = None
        self.port = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CreateEcsInstanceFromEcsImageAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/hybrid/aliyun/ecs'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'ecsRootVolumeType': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=1024,min_length=2,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'ecsRootVolumeGBSize': ParamAnnotation(required=False,number_range=[40, 500],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'createMode': ParamAnnotation(required=False,valid_values=['atomic','permissive'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'privateIpAddress': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'allocatePublicIp': ParamAnnotation(required=False,valid_values=['true','false'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'ecsConsolePassword': ParamAnnotation(required=False,valid_regex_values=r'[A-Za-z0-9]{6}',max_length=6,min_length=6,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=True,max_length=128,non_empty=False,null_elements=False,empty_string=False,no_trim=False),
        'ecsImageUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'instanceOfferingUuid': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'instanceType': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'ecsVSwitchUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'ecsSecurityGroupUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'ecsRootPassword': ParamAnnotation(required=True,max_length=30,min_length=8,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'ecsBandWidth': ParamAnnotation(required=False,number_range=[1, 200],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CreateEcsInstanceFromEcsImageAction, self).__init__()
        self.ecsRootVolumeType = None
        self.description = None
        self.ecsRootVolumeGBSize = None
        self.createMode = None
        self.privateIpAddress = None
        self.allocatePublicIp = None
        self.ecsConsolePassword = None
        self.name = None
        self.ecsImageUuid = None
        self.instanceOfferingUuid = None
        self.instanceType = None
        self.ecsVSwitchUuid = None
        self.ecsSecurityGroupUuid = None
        self.ecsRootPassword = None
        self.ecsBandWidth = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class UpdateVpcVpnConnectionRemoteAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/hybrid/vpn-connection/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'updateVpcVpnConnectionRemote'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=False,max_length=64,non_empty=False,null_elements=False,empty_string=False,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=1024,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'localCidr': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'remoteCidr': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'active': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'ikeConfUuid': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'ipsecConfUuid': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(UpdateVpcVpnConnectionRemoteAction, self).__init__()
        self.uuid = None
        self.name = None
        self.description = None
        self.localCidr = None
        self.remoteCidr = None
        self.active = None
        self.ikeConfUuid = None
        self.ipsecConfUuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryLoadBalancerListenerAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/load-balancers/listeners'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryLoadBalancerListenerAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class UpdateVpcVpnGatewayAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/hybrid/vpc-vpn/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'updateVpcVpnGateway'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=False,max_length=128,non_empty=False,null_elements=False,empty_string=False,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=1024,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(UpdateVpcVpnGatewayAction, self).__init__()
        self.uuid = None
        self.name = None
        self.description = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class GetVmMonitorNumberAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/vm-instances/{uuid}/monitorNumber'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(GetVmMonitorNumberAction, self).__init__()
        self.uuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DetachHybridEipFromEcsAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/hybrid/eip/{eipUuid}/detach'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'eipUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'type': ParamAnnotation(required=True,valid_values=['aliyun'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DetachHybridEipFromEcsAction, self).__init__()
        self.eipUuid = None
        self.type = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeletePciDeviceOfferingAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/pci-device/pci-device-offerings/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeletePciDeviceOfferingAction, self).__init__()
        self.uuid = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryShareableVolumeVmInstanceRefAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/volumes/vm-instances/refs'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryShareableVolumeVmInstanceRefAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class ChangeIAM2VirtualIDStateAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/iam2/virtual-ids/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'changeIAM2VirtualIDState'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'stateEvent': ParamAnnotation(required=True,valid_values=['enable','disable'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(ChangeIAM2VirtualIDStateAction, self).__init__()
        self.uuid = None
        self.stateEvent = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteSchedulerJobGroupAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/scheduler/jobgroups/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteSchedulerJobGroupAction, self).__init__()
        self.uuid = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteMonitorTriggerAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/monitoring/triggers/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteMonitorTriggerAction, self).__init__()
        self.uuid = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QuerySystemTagAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/system-tags'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QuerySystemTagAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class GetTwoFactorAuthenticationStateAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/twofactorauthentication/state'
    NEED_SESSION = False
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation()
    }

    def __init__(self):
        super(GetTwoFactorAuthenticationStateAction, self).__init__()
        self.systemTags = None
        self.userTags = None


class DeleteVolumeQosAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/volumes/{uuid}/qos'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'mode': ParamAnnotation(required=False,valid_values=['total','read','write','all'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteVolumeQosAction, self).__init__()
        self.uuid = None
        self.mode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteLicenseAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/licenses/mn/{managementNodeUuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(),
        'managementNodeUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteLicenseAction, self).__init__()
        self.uuid = None
        self.managementNodeUuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CreateAccountAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/accounts'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'name': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'password': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'type': ParamAnnotation(required=False,valid_values=['SystemAdmin','Normal'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CreateAccountAction, self).__init__()
        self.name = None
        self.password = None
        self.type = None
        self.description = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class GetCandidateLdapEntryForBindingAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/ldap/entries/candidates'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'ldapFilter': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(required=False,number_range=[1, 2147483647],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(GetCandidateLdapEntryForBindingAction, self).__init__()
        self.ldapFilter = None
        self.limit = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class GetHostAllocatorStrategiesAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/hosts/allocators/strategies'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(GetHostAllocatorStrategiesAction, self).__init__()
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class AttachPrimaryStorageToClusterAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/clusters/{clusterUuid}/primary-storage/{primaryStorageUuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'clusterUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'primaryStorageUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(AttachPrimaryStorageToClusterAction, self).__init__()
        self.clusterUuid = None
        self.primaryStorageUuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryIAM2OrganizationAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/iam2/organizations'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryIAM2OrganizationAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class GetAttachablePublicL3ForVRouterAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/vm-instances/appliances/virtual-routers/{vmInstanceUuid}/attachable-public-l3s'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'vmInstanceUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(GetAttachablePublicL3ForVRouterAction, self).__init__()
        self.vmInstanceUuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class UpdateCertificateAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/certificates/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'updateCertificate'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=False,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(UpdateCertificateAction, self).__init__()
        self.uuid = None
        self.name = None
        self.description = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CreateMonitorTriggerAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/monitoring/triggers'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'name': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'expression': ParamAnnotation(required=True,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'duration': ParamAnnotation(required=True,number_range=[1, 2147483647],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'recoveryExpression': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'targetResourceUuid': ParamAnnotation(required=True,max_length=32,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CreateMonitorTriggerAction, self).__init__()
        self.name = None
        self.expression = None
        self.duration = None
        self.recoveryExpression = None
        self.description = None
        self.targetResourceUuid = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CreateDatabaseBackupAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/database-backups'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'name': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=False,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=1024,non_empty=False,null_elements=False,empty_string=False,no_trim=False),
        'backupStorageUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CreateDatabaseBackupAction, self).__init__()
        self.name = None
        self.description = None
        self.backupStorageUuid = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryVCenterAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/vcenters'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryVCenterAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class ChangeEipStateAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/eips/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'changeEipState'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'stateEvent': ParamAnnotation(required=True,valid_values=['enable','disable'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(ChangeEipStateAction, self).__init__()
        self.uuid = None
        self.stateEvent = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteZoneAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/zones/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteZoneAction, self).__init__()
        self.uuid = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryMonitorTriggerActionAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/monitoring/trigger-actions'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryMonitorTriggerActionAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class GetVolumeFormatAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/volumes/formats'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(GetVolumeFormatAction, self).__init__()
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class UpdateIAM2OrganizationAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/iam2/organizations/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'updateIAM2Organization'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=False,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'parentUuid': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'type': ParamAnnotation(required=False,valid_values=['Company','Department'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(UpdateIAM2OrganizationAction, self).__init__()
        self.uuid = None
        self.name = None
        self.description = None
        self.parentUuid = None
        self.type = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QuerySftpBackupStorageAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/backup-storage/sftp'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QuerySftpBackupStorageAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class ValidateSessionAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/accounts/sessions/{sessionUuid}/valid'
    NEED_SESSION = False
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'sessionUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation()
    }

    def __init__(self):
        super(ValidateSessionAction, self).__init__()
        self.sessionUuid = None
        self.systemTags = None
        self.userTags = None


class GetSupportedCloudFormationResourcesAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/cloudformation/resources'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'version': ParamAnnotation(required=False,valid_values=['v1'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'type': ParamAnnotation(required=False,valid_values=['zstack'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(GetSupportedCloudFormationResourcesAction, self).__init__()
        self.version = None
        self.type = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryL3NetworkAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/l3-networks'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryL3NetworkAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class UpdateGlobalConfigAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/global-configurations/{category}/{name}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'updateGlobalConfig'

    PARAMS = {
        'category': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'value': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(UpdateGlobalConfigAction, self).__init__()
        self.category = None
        self.name = None
        self.value = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteL3NetworkAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/l3-networks/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteL3NetworkAction, self).__init__()
        self.uuid = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteBaremetalPxeServerAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/baremetal/pxeservers/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteBaremetalPxeServerAction, self).__init__()
        self.uuid = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class GetLicenseAddOnsAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/licenses/addons'
    NEED_SESSION = False
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation()
    }

    def __init__(self):
        super(GetLicenseAddOnsAction, self).__init__()
        self.systemTags = None
        self.userTags = None


class PutMetricDataAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/zwatch/metrics'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'namespace': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'data': ParamAnnotation(required=True,non_empty=True,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(PutMetricDataAction, self).__init__()
        self.namespace = None
        self.data = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class PowerOffBaremetalChassisAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/baremetal/chassis/{chassisUuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'powerOffBaremetalChassis'

    PARAMS = {
        'chassisUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(PowerOffBaremetalChassisAction, self).__init__()
        self.chassisUuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class GetVmCapabilitiesAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/vm-instances/{uuid}/capabilities'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(GetVmCapabilitiesAction, self).__init__()
        self.uuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryDahoDataCenterConnectionAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/hybrid/daho/connections'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryDahoDataCenterConnectionAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryUserTagAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/user-tags'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryUserTagAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class SyncDiskFromAliyunFromRemoteAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/hybrid/aliyun/disk/{identityUuid}/sync'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'identityUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'diskId': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(SyncDiskFromAliyunFromRemoteAction, self).__init__()
        self.identityUuid = None
        self.diskId = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteVRouterRouteEntryAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/vrouter-route-tables/{routeTableUuid}/route-entries/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'routeTableUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteVRouterRouteEntryAction, self).__init__()
        self.uuid = None
        self.routeTableUuid = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class GetEcsInstanceVncUrlAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/hybrid/aliyun/ecs-vnc/{uuid}'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(GetEcsInstanceVncUrlAction, self).__init__()
        self.uuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteVpcVpnConnectionRemoteAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/hybrid/vpn-connection/{uuid}/remote'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteVpcVpnConnectionRemoteAction, self).__init__()
        self.uuid = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class UpdateVolumeSnapshotAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/volume-snapshots/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'updateVolumeSnapshot'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=False,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(UpdateVolumeSnapshotAction, self).__init__()
        self.uuid = None
        self.name = None
        self.description = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class ValidateSNSEmailPlatformAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/sns/application-platforms/email/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'validateSNSEmailPlatform'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(ValidateSNSEmailPlatformAction, self).__init__()
        self.uuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class UpdateEcsInstanceAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/hybrid/aliyun/{uuid}/ecs'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=False,max_length=128,non_empty=False,null_elements=False,empty_string=False,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=1024,min_length=2,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'password': ParamAnnotation(required=False,max_length=30,min_length=8,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(UpdateEcsInstanceAction, self).__init__()
        self.uuid = None
        self.name = None
        self.description = None
        self.password = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class ReconnectHostAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/hosts/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'reconnectHost'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(ReconnectHostAction, self).__init__()
        self.uuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class LogInByLdapAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/ldap/login'
    NEED_SESSION = False
    NEED_POLL = False
    PARAM_NAME = 'logInByLdap'

    PARAMS = {
        'uid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'password': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'verifyCode': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'captchaUuid': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation()
    }

    def __init__(self):
        super(LogInByLdapAction, self).__init__()
        self.uid = None
        self.password = None
        self.verifyCode = None
        self.captchaUuid = None
        self.systemTags = None
        self.userTags = None


class QuerySchedulerTriggerAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/scheduler/triggers'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QuerySchedulerTriggerAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class UpdateRoleAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/identities/roles/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'updateRole'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=False,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'statements': ParamAnnotation(),
        'policyUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(UpdateRoleAction, self).__init__()
        self.uuid = None
        self.name = None
        self.description = None
        self.statements = None
        self.policyUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryArchiveTicketHistoryAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/tickets/histories/archives'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryArchiveTicketHistoryAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DetachSecurityGroupFromL3NetworkAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/security-groups/{securityGroupUuid}/l3-networks/{l3NetworkUuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'securityGroupUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'l3NetworkUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DetachSecurityGroupFromL3NetworkAction, self).__init__()
        self.securityGroupUuid = None
        self.l3NetworkUuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class AddKVMHostAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/hosts/kvm'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'username': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'password': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'sshPort': ParamAnnotation(required=False,number_range=[1, 65535],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'managementIp': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=False,no_trim=False),
        'clusterUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(AddKVMHostAction, self).__init__()
        self.username = None
        self.password = None
        self.sshPort = None
        self.name = None
        self.description = None
        self.managementIp = None
        self.clusterUuid = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class UnsubscribeEventAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/zwatch/events/subscriptions/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(UnsubscribeEventAction, self).__init__()
        self.uuid = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class AddMonToFusionstorBackupStorageAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/backup-storage/fusionstor/{uuid}/mons'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'monUrls': ParamAnnotation(required=True,non_empty=True,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(AddMonToFusionstorBackupStorageAction, self).__init__()
        self.uuid = None
        self.monUrls = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class UpdateIAM2ProjectAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/iam2/projects/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'updateIAM2Project'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=False,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(UpdateIAM2ProjectAction, self).__init__()
        self.uuid = None
        self.name = None
        self.description = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class AddOssBucketFromRemoteAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/hybrid/aliyun/oss-bucket'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'bucketName': ParamAnnotation(required=True,max_length=128,non_empty=False,null_elements=False,empty_string=False,no_trim=False),
        'dataCenterUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=1024,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'ossDomain': ParamAnnotation(required=False,max_length=256,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'ossKey': ParamAnnotation(required=False,max_length=127,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'ossSecret': ParamAnnotation(required=False,max_length=127,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(AddOssBucketFromRemoteAction, self).__init__()
        self.bucketName = None
        self.dataCenterUuid = None
        self.description = None
        self.ossDomain = None
        self.ossKey = None
        self.ossSecret = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class RemoveVmFromAffinityGroupAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/affinity-groups/{affinityGroupUuid}/vm-instances'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'affinityGroupUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(RemoveVmFromAffinityGroupAction, self).__init__()
        self.affinityGroupUuid = None
        self.uuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class ChangeV2VConversionHostStateAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/v2v-conversion-hosts/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'changeV2VConversionHostState'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'stateEvent': ParamAnnotation(required=True,valid_values=['enable','disable'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(ChangeV2VConversionHostStateAction, self).__init__()
        self.uuid = None
        self.stateEvent = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DetachPolicyFromUserGroupAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/accounts/groups/{groupUuid}/policies/{policyUuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'policyUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'groupUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DetachPolicyFromUserGroupAction, self).__init__()
        self.policyUuid = None
        self.groupUuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class SyncEcsSecurityGroupRuleFromRemoteAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/hybrid/aliyun/security-group-rule/{uuid}/sync'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'syncEcsSecurityGroupRuleFromRemote'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(SyncEcsSecurityGroupRuleFromRemoteAction, self).__init__()
        self.uuid = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class RemoveMonFromFusionstorBackupStorageAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/backup-storage/fusionstor/{uuid}/mons'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'monHostnames': ParamAnnotation(required=True,non_empty=True,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(RemoveMonFromFusionstorBackupStorageAction, self).__init__()
        self.uuid = None
        self.monHostnames = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteAutoScalingRuleAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/autoscaling/rules/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteAutoScalingRuleAction, self).__init__()
        self.uuid = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class UpdateAliyunDiskAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/hybrid/aliyun/disk/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'updateAliyunDisk'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=False,valid_regex_values=r'^[\u4e00-\u9fa5a-zA-Z][\u4e00-\u9fa5_a-zA-Z0-9.-]+$',max_length=128,min_length=2,non_empty=False,null_elements=False,empty_string=False,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=1024,min_length=2,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deleteWithInstance': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deleteAutoSnapshot': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'enableAutoSnapshot': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(UpdateAliyunDiskAction, self).__init__()
        self.uuid = None
        self.name = None
        self.description = None
        self.deleteWithInstance = None
        self.deleteAutoSnapshot = None
        self.enableAutoSnapshot = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class SyncImageSizeAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/images/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'syncImageSize'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(SyncImageSizeAction, self).__init__()
        self.uuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class UpdateIAM2ProjectAttributeAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/iam2/projects/attributes/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'updateIAM2ProjectAttribute'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'value': ParamAnnotation(required=True,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(UpdateIAM2ProjectAttributeAction, self).__init__()
        self.uuid = None
        self.value = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class GetVmBootOrderAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/vm-instances/{uuid}/boot-orders'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(GetVmBootOrderAction, self).__init__()
        self.uuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class RemoveActionFromEventSubscriptionAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/zwatch/events/subscriptions/{subscriptionUuid}/actions/{actionUuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'subscriptionUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'actionUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(RemoveActionFromEventSubscriptionAction, self).__init__()
        self.subscriptionUuid = None
        self.actionUuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class SetVmUsbRedirectAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/vm-instances/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'setVmUsbRedirect'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'enable': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(SetVmUsbRedirectAction, self).__init__()
        self.uuid = None
        self.enable = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class SyncHybridEipFromRemoteAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/hybrid/eip/{dataCenterUuid}/sync'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'syncHybridEipFromRemote'

    PARAMS = {
        'type': ParamAnnotation(required=True,valid_values=['aliyun'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'dataCenterUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(SyncHybridEipFromRemoteAction, self).__init__()
        self.type = None
        self.dataCenterUuid = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryBaremetalPxeServerAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/baremetal/pxeservers'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryBaremetalPxeServerAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteEcsVSwitchInLocalAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/hybrid/aliyun/vswitch/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteEcsVSwitchInLocalAction, self).__init__()
        self.uuid = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class IsOpensourceVersionAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/meta-data/opensource'
    NEED_SESSION = False
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation()
    }

    def __init__(self):
        super(IsOpensourceVersionAction, self).__init__()
        self.systemTags = None
        self.userTags = None


class DeleteNasMountTargetAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/primary-storage/nas/mount/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteNasMountTargetAction, self).__init__()
        self.uuid = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CreateVolumesSnapshotAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/volumes/volume-snapshots'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'volumeUuids': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CreateVolumesSnapshotAction, self).__init__()
        self.volumeUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryVmNicAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/vm-instances/nics'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryVmNicAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class RevertVolumeFromVolumeBackupAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/volume-backups/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'revertVolumeFromVolumeBackup'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'backupStorageUuid': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(RevertVolumeFromVolumeBackupAction, self).__init__()
        self.uuid = None
        self.backupStorageUuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryEcsVpcFromLocalAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/hybrid/aliyun/vpc'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryEcsVpcFromLocalAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class UpdateVmNicMacAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/vm-instances/nics/{vmNicUuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'updateVmNicMac'

    PARAMS = {
        'vmNicUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'mac': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(UpdateVmNicMacAction, self).__init__()
        self.vmNicUuid = None
        self.mac = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryLdapBindingAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/ldap/bindings'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryLdapBindingAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class RerunLongJobAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/longjobs/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'rerunLongJob'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(RerunLongJobAction, self).__init__()
        self.uuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class RecoverBaremetalInstanceAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/baremetal/instances/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'recoverBaremetalInstance'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(RecoverBaremetalInstanceAction, self).__init__()
        self.uuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteVmSshKeyAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/vm-instances/{uuid}/ssh-keys'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteVmSshKeyAction, self).__init__()
        self.uuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class SyncAliyunRouterInterfaceFromRemoteAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/hybrid/aliyun/router-interface/{dataCenterUuid}/sync'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'syncAliyunRouterInterfaceFromRemote'

    PARAMS = {
        'dataCenterUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(SyncAliyunRouterInterfaceFromRemoteAction, self).__init__()
        self.dataCenterUuid = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CreateEcsImageFromLocalImageAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/hybrid/aliyun/image'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'imageUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'dataCenterUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'backupStorageUuid': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=1024,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=True,valid_regex_values=r'[A-Za-z\u4e00-\u9fa5]{1}[A-Za-z0-9-_\u4e00-\u9fa5]{1,127}',max_length=128,min_length=2,non_empty=False,null_elements=False,empty_string=False,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CreateEcsImageFromLocalImageAction, self).__init__()
        self.imageUuid = None
        self.dataCenterUuid = None
        self.backupStorageUuid = None
        self.description = None
        self.name = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class GetLdapEntryAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/ldap/entry'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'ldapFilter': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(required=False,number_range=[1, 2147483647],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(GetLdapEntryAction, self).__init__()
        self.ldapFilter = None
        self.limit = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class BatchQueryAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/batch-queries'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'script': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(BatchQueryAction, self).__init__()
        self.script = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class RemoveIAM2VirtualIDsFromOrganizationAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/iam2/organizations/{organizationUuid}/virtual-ids'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'virtualIDUuids': ParamAnnotation(required=True,non_empty=True,null_elements=False,empty_string=True,no_trim=False),
        'organizationUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(RemoveIAM2VirtualIDsFromOrganizationAction, self).__init__()
        self.virtualIDUuids = None
        self.organizationUuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryOssBucketFileNameAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/hybrid/aliyun/oss-bucket'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryOssBucketFileNameAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class AttachL2NetworkToClusterAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/l2-networks/{l2NetworkUuid}/clusters/{clusterUuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'null'

    PARAMS = {
        'l2NetworkUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'clusterUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(AttachL2NetworkToClusterAction, self).__init__()
        self.l2NetworkUuid = None
        self.clusterUuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class ResizeDataVolumeAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/volumes/data/resize/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'resizeDataVolume'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'size': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(ResizeDataVolumeAction, self).__init__()
        self.uuid = None
        self.size = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class UpdateSystemTagAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/system-tags/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'updateSystemTag'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'tag': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(UpdateSystemTagAction, self).__init__()
        self.uuid = None
        self.tag = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class GetVmSshKeyAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/vm-instances/{uuid}/ssh-keys'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(GetVmSshKeyAction, self).__init__()
        self.uuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryVpcIkeConfigFromLocalAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/hybrid/vpn-connection/ike'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryVpcIkeConfigFromLocalAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class SyncEcsInstanceFromRemoteAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/hybrid/aliyun/ecs/{dataCenterUuid}/sync'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'dataCenterUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'onlyZstack': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(SyncEcsInstanceFromRemoteAction, self).__init__()
        self.dataCenterUuid = None
        self.onlyZstack = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CloneVmInstanceAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/vm-instances/{vmInstanceUuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'cloneVmInstance'

    PARAMS = {
        'vmInstanceUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'strategy': ParamAnnotation(required=False,valid_values=['InstantStart','JustCreate'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'names': ParamAnnotation(required=True,non_empty=True,null_elements=False,empty_string=True,no_trim=False),
        'primaryStorageUuidForRootVolume': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'primaryStorageUuidForDataVolume': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'full': ParamAnnotation(),
        'rootVolumeSystemTags': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'dataVolumeSystemTags': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CloneVmInstanceAction, self).__init__()
        self.vmInstanceUuid = None
        self.strategy = None
        self.names = None
        self.primaryStorageUuidForRootVolume = None
        self.primaryStorageUuidForDataVolume = None
        self.full = None
        self.rootVolumeSystemTags = None
        self.dataVolumeSystemTags = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryPciDeviceAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/pci-device/pci-devices'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryPciDeviceAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteHostAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/hosts/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteHostAction, self).__init__()
        self.uuid = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class GetL3NetworkRouterInterfaceIpAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/l3-networks/{l3NetworkUuid}/router-interface-ip'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'l3NetworkUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(GetL3NetworkRouterInterfaceIpAction, self).__init__()
        self.l3NetworkUuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QuerySecurityGroupAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/security-groups'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QuerySecurityGroupAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CreateL2VxlanNetworkAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/l2-networks/vxlan'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'vni': ParamAnnotation(required=False,number_range=[1, 16777214],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'poolUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'zoneUuid': ParamAnnotation(required=False,max_length=1024,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'physicalInterface': ParamAnnotation(required=False,max_length=1024,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'type': ParamAnnotation(),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CreateL2VxlanNetworkAction, self).__init__()
        self.vni = None
        self.poolUuid = None
        self.name = None
        self.description = None
        self.zoneUuid = None
        self.physicalInterface = None
        self.type = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryFiberChannelLunAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/storage-devices/fiber-channel/luns'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryFiberChannelLunAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CreateVRouterRouteTableAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/vrouter-route-tables'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'name': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CreateVRouterRouteTableAction, self).__init__()
        self.name = None
        self.description = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class StopAllResourcesInIAM2ProjectAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/iam2/projects/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'stopAllResourcesInIAM2Project'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(StopAllResourcesInIAM2ProjectAction, self).__init__()
        self.uuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class AddVCenterAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/vcenters'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'username': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'password': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'zoneUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'https': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'port': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'domainName': ParamAnnotation(required=True,max_length=256,non_empty=True,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(AddVCenterAction, self).__init__()
        self.username = None
        self.password = None
        self.zoneUuid = None
        self.name = None
        self.https = None
        self.port = None
        self.domainName = None
        self.description = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CreateEmailMonitorTriggerActionAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/monitoring/trigger-actions/emails'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'email': ParamAnnotation(required=True,max_length=512,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'mediaUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'triggerUuids': ParamAnnotation(required=False,non_empty=True,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CreateEmailMonitorTriggerActionAction, self).__init__()
        self.email = None
        self.mediaUuid = None
        self.name = None
        self.description = None
        self.triggerUuids = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class PauseVmInstanceAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/vm-instances/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'pauseVmInstance'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(PauseVmInstanceAction, self).__init__()
        self.uuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class RemoveAttributesFromIAM2VirtualIDAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/iam2/virtual-ids/{uuid}/attributes'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'attributeUuids': ParamAnnotation(required=True,non_empty=True,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(RemoveAttributesFromIAM2VirtualIDAction, self).__init__()
        self.uuid = None
        self.attributeUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class UpdateLoadBalancerListenerAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/load-balancers/listeners/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'updateLoadBalancerListener'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=False,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(UpdateLoadBalancerListenerAction, self).__init__()
        self.uuid = None
        self.name = None
        self.description = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CreateAliyunProxyVSwitchAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/aliyun-proxy/vpcs/vswitches'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'aliyunProxyVpcUuid': ParamAnnotation(required=True,max_length=32,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'vpcL3NetworkUuid': ParamAnnotation(required=True,max_length=32,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'isDefault': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CreateAliyunProxyVSwitchAction, self).__init__()
        self.aliyunProxyVpcUuid = None
        self.vpcL3NetworkUuid = None
        self.isDefault = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class ChangeDiskOfferingStateAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/disk-offerings/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'changeDiskOfferingState'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'stateEvent': ParamAnnotation(required=True,valid_values=['enable','disable'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(ChangeDiskOfferingStateAction, self).__init__()
        self.uuid = None
        self.stateEvent = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class AddAliyunNasFileSystemAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/nas/aliyun'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'addAliyunNasFileSystem'

    PARAMS = {
        'fileSystemId': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=False,no_trim=False),
        'dataCenterUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(AddAliyunNasFileSystemAction, self).__init__()
        self.fileSystemId = None
        self.name = None
        self.dataCenterUuid = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class ChangeAffinityGroupStateAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/affinity-groups/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'changeAffinityGroupState'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'stateEvent': ParamAnnotation(required=True,valid_values=['enable','disable'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(ChangeAffinityGroupStateAction, self).__init__()
        self.uuid = None
        self.stateEvent = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class RefreshSharedblockDeviceCapacityAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/primary-storage/sharedblockgroup/{sharedBlockGroupUuid}/sharedblocks/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'uuid': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'sharedBlockGroupUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(RefreshSharedblockDeviceCapacityAction, self).__init__()
        self.uuid = None
        self.sharedBlockGroupUuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class AddStackTemplateAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/cloudformation/template'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'name': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'type': ParamAnnotation(required=False,valid_values=['zstack'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'templateContent': ParamAnnotation(required=False,max_length=4194304,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(AddStackTemplateAction, self).__init__()
        self.name = None
        self.description = None
        self.type = None
        self.templateContent = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryVpcUserVpnGatewayFromLocalAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/hybrid/user-vpn'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryVpcUserVpnGatewayFromLocalAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class SyncDatabaseBackupAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/database-backups/imageStore/{imageStoreUuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'syncDatabaseBackup'

    PARAMS = {
        'imageStoreUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(SyncDatabaseBackupAction, self).__init__()
        self.imageStoreUuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CreateAutoScalingGroupRemovalInstanceRuleAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/autoscaling/rules/removal-instance'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'adjustmentType': ParamAnnotation(required=True,valid_values=['QuantityChangeInCapacity','PercentChangeInCapacity','TotalCapacity'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'adjustmentValue': ParamAnnotation(required=True,number_range=[1, 9223372036854775807],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'removalPolicy': ParamAnnotation(required=True,valid_values=['OldestInstance','NewestInstance','OldestScalingConfiguration','MinimumCPUUsageInstance','MinimumMemoryUsageInstance'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'autoScalingGroupUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'type': ParamAnnotation(),
        'cooldown': ParamAnnotation(required=False,number_range=[1, 2147483647],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CreateAutoScalingGroupRemovalInstanceRuleAction, self).__init__()
        self.adjustmentType = None
        self.adjustmentValue = None
        self.removalPolicy = None
        self.name = None
        self.description = None
        self.autoScalingGroupUuid = None
        self.type = None
        self.cooldown = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class GetLicenseCapabilitiesAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/licenses/capabilities'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(GetLicenseCapabilitiesAction, self).__init__()
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class UpdateIPsecConnectionAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/ipsec/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'updateIPsecConnection'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=False,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(UpdateIPsecConnectionAction, self).__init__()
        self.uuid = None
        self.name = None
        self.description = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class GetPciDeviceSpecCandidatesAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/pci-device/pci-device-specs/candidates'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'type': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(GetPciDeviceSpecCandidatesAction, self).__init__()
        self.type = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CheckStackTemplateParametersAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/cloudformation/stack/check'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = 'params'

    PARAMS = {
        'type': ParamAnnotation(required=False,valid_values=['zstack'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'templateContent': ParamAnnotation(required=False,max_length=4194304,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'uuid': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CheckStackTemplateParametersAction, self).__init__()
        self.type = None
        self.templateContent = None
        self.uuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class TriggerGCJobAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/gc-jobs/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'triggerGCJob'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(TriggerGCJobAction, self).__init__()
        self.uuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class AddImageStoreBackupStorageAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/backup-storage/image-store'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'hostname': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=False,no_trim=False),
        'username': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'password': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'sshPort': ParamAnnotation(required=False,number_range=[1, 65535],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'url': ParamAnnotation(required=True,max_length=2048,non_empty=False,null_elements=False,empty_string=False,no_trim=False),
        'name': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'type': ParamAnnotation(),
        'importImages': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(AddImageStoreBackupStorageAction, self).__init__()
        self.hostname = None
        self.username = None
        self.password = None
        self.sshPort = None
        self.url = None
        self.name = None
        self.description = None
        self.type = None
        self.importImages = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryVRouterOspfAreaAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/routerArea'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryVRouterOspfAreaAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class ChangeTicketStatusAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/tickets/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'changeTicketStatus'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'statusEvent': ParamAnnotation(required=True,valid_values=['open','approve','cancel','reject','reopen'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'comment': ParamAnnotation(required=False,max_length=65535,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(ChangeTicketStatusAction, self).__init__()
        self.uuid = None
        self.statusEvent = None
        self.comment = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class AttachBackupStorageToZoneAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/zones/{zoneUuid}/backup-storage/{backupStorageUuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'zoneUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'backupStorageUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(AttachBackupStorageToZoneAction, self).__init__()
        self.zoneUuid = None
        self.backupStorageUuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class AddLabelToAlarmAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/zwatch/alarms/{alarmUuid}/labels'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'alarmUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'key': ParamAnnotation(required=True,max_length=1024,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'value': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'operator': ParamAnnotation(required=True,valid_values=['Regex','Equal'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(AddLabelToAlarmAction, self).__init__()
        self.alarmUuid = None
        self.key = None
        self.value = None
        self.operator = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class AddAliyunNasAccessGroupAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/nas/aliyun/access'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'addAliyunNasAccessGroup'

    PARAMS = {
        'dataCenterUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'groupName': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=False,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(AddAliyunNasAccessGroupAction, self).__init__()
        self.dataCenterUuid = None
        self.groupName = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryVolumeAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/volumes'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryVolumeAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class RenewSessionAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/accounts/sessions/{sessionUuid}/renew'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'renewSession'

    PARAMS = {
        'sessionUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'duration': ParamAnnotation(required=False,number_range=[60, 31536000],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(RenewSessionAction, self).__init__()
        self.sessionUuid = None
        self.duration = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class GetAuditDataAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/zwatch/audits'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'startTime': ParamAnnotation(required=False,number_range=[0, 9223372036854775807],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'endTime': ParamAnnotation(required=False,number_range=[0, 9223372036854775807],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(required=False,number_range=[0, 2147483647],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'conditions': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(GetAuditDataAction, self).__init__()
        self.startTime = None
        self.endTime = None
        self.limit = None
        self.conditions = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryDiskOfferingAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/disk-offerings'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryDiskOfferingAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class AddCephPrimaryStoragePoolAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/primary-storage/ceph/{primaryStorageUuid}/pools'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'primaryStorageUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'poolName': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'aliasName': ParamAnnotation(required=False,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'type': ParamAnnotation(required=True,valid_values=['Root','Data'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'isCreate': ParamAnnotation(),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(AddCephPrimaryStoragePoolAction, self).__init__()
        self.primaryStorageUuid = None
        self.poolName = None
        self.aliasName = None
        self.description = None
        self.type = None
        self.isCreate = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CalculateResourceSpendingAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/billings/resources/actions'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = 'calculateResourceSpending'

    PARAMS = {
        'resourceType': ParamAnnotation(required=False,valid_values=['VM','cpu','memory','rootVolume','dataVolume','snapShot','gpu','pubIpVipBandwidth','pubIpVipBandwidthIn','pubIpVipBandwidthOut','pubIpVmNicBandwidth','pubIpVmNicBandwidthIn','pubIpVmNicBandwidthOut','all'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'dateStart': ParamAnnotation(required=False,valid_regex_values=r'[0-9]{4}[0-9]{2}[0-9]{2}',non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'dateEnd': ParamAnnotation(required=False,valid_regex_values=r'[0-9]{4}[0-9]{2}[0-9]{2}',non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'start': ParamAnnotation(required=False,number_range=[0, 9223372036854775807],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(required=False,number_range=[1, 10000],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CalculateResourceSpendingAction, self).__init__()
        self.resourceType = None
        self.resourceUuid = None
        self.dateStart = None
        self.dateEnd = None
        self.start = None
        self.limit = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class ExportDatabaseBackupFromBackupStorageAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/database-backups/{databaseBackupUuid}/backup-storage/{backupStorageUuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'exportDatabaseBackupFromBackupStorage'

    PARAMS = {
        'backupStorageUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'databaseBackupUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(ExportDatabaseBackupFromBackupStorageAction, self).__init__()
        self.backupStorageUuid = None
        self.databaseBackupUuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class ChangeVmImageAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/vm-instances/{vmInstanceUuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'changeVmImage'

    PARAMS = {
        'vmInstanceUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'imageUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(ChangeVmImageAction, self).__init__()
        self.vmInstanceUuid = None
        self.imageUuid = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class SyncAliyunVirtualRouterFromRemoteAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/hybrid/aliyun/vrouter/{vpcUuid}/sync'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'syncAliyunVirtualRouterFromRemote'

    PARAMS = {
        'vpcUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(SyncAliyunVirtualRouterFromRemoteAction, self).__init__()
        self.vpcUuid = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteEcsSecurityGroupRuleRemoteAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/hybrid/aliyun/security-group-rule/remote/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteEcsSecurityGroupRuleRemoteAction, self).__init__()
        self.uuid = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QuerySNSDingTalkEndpointAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/sns/application-endpoints/ding-talk'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QuerySNSDingTalkEndpointAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class AddIAM2VirtualIDsToProjectAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/iam2/projects/{projectUuid}/virtual-ids'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'projectUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'virtualIDUuids': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'roleUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(AddIAM2VirtualIDsToProjectAction, self).__init__()
        self.projectUuid = None
        self.virtualIDUuids = None
        self.roleUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CreateTicketAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/tickets'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'name': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'requests': ParamAnnotation(required=True,non_empty=True,null_elements=False,empty_string=True,no_trim=False),
        'flowCollectionUuid': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'accountSystemType': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'accountSystemContext': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CreateTicketAction, self).__init__()
        self.name = None
        self.description = None
        self.requests = None
        self.flowCollectionUuid = None
        self.accountSystemType = None
        self.accountSystemContext = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CreateVniRangeAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/l2-networks/vxlan-pool/{l2NetworkUuid}/vni-ranges'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'name': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'startVni': ParamAnnotation(required=True,number_range=[0, 16777214],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'endVni': ParamAnnotation(required=True,number_range=[0, 16777214],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'l2NetworkUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CreateVniRangeAction, self).__init__()
        self.name = None
        self.description = None
        self.startVni = None
        self.endVni = None
        self.l2NetworkUuid = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class ExpungeVmInstanceAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/vm-instances/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'expungeVmInstance'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(ExpungeVmInstanceAction, self).__init__()
        self.uuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class UpdateConnectionBetweenL3NetWorkAndAliyunVSwitchAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/hybrid/aliyun/connections/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'updateConnectionBetweenL3NetWorkAndAliyunVSwitch'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=False,max_length=64,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=1024,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(UpdateConnectionBetweenL3NetWorkAndAliyunVSwitchAction, self).__init__()
        self.uuid = None
        self.name = None
        self.description = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class AttachRoleToAccountAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/identities/accounts/{accountUuid}/roles/{roleUuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'roleUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'accountUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(AttachRoleToAccountAction, self).__init__()
        self.roleUuid = None
        self.accountUuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class ReconnectBackupStorageAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/backup-storage/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'reconnectBackupStorage'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(ReconnectBackupStorageAction, self).__init__()
        self.uuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class AddAliyunEbsBackupStorageAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/backup-storage/aliyun/ebs'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'ossBucketUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'url': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'type': ParamAnnotation(),
        'importImages': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(AddAliyunEbsBackupStorageAction, self).__init__()
        self.ossBucketUuid = None
        self.url = None
        self.name = None
        self.description = None
        self.type = None
        self.importImages = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class UpdateL2NetworkAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/l2-networks/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'updateL2Network'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=False,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(UpdateL2NetworkAction, self).__init__()
        self.uuid = None
        self.name = None
        self.description = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class RemovePolicyStatementsFromRoleAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/identities/roles/{uuid}/policy-statements'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(),
        'policyStatementUuids': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(RemovePolicyStatementsFromRoleAction, self).__init__()
        self.uuid = None
        self.policyStatementUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryUserAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/accounts/users'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryUserAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class SetVmBootOrderAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/vm-instances/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'setVmBootOrder'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'bootOrder': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(SetVmBootOrderAction, self).__init__()
        self.uuid = None
        self.bootOrder = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CreateVpnIpsecConfigAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/hybrid/vpn-connection/ipsec'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'name': ParamAnnotation(required=True,max_length=64,non_empty=False,null_elements=False,empty_string=False,no_trim=False),
        'pfs': ParamAnnotation(required=False,valid_values=['disabled','group1','group2','group5','group14','group24'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'encAlg': ParamAnnotation(required=False,valid_values=['3des','aes-128','aes-192','aes-256','des'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'authAlg': ParamAnnotation(required=False,valid_values=['md5','sha1'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'lifetime': ParamAnnotation(required=False,number_range=[60, 86400],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=1024,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CreateVpnIpsecConfigAction, self).__init__()
        self.name = None
        self.pfs = None
        self.encAlg = None
        self.authAlg = None
        self.lifetime = None
        self.description = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryTicketAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/tickets'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryTicketAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class GetUsbDeviceCandidatesForAttachingVmAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/vm-instances/{vmInstanceUuid}/candidate-usb-devices'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'vmInstanceUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(GetUsbDeviceCandidatesForAttachingVmAction, self).__init__()
        self.vmInstanceUuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CreateRootVolumeTemplateFromVolumeBackupAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/images/root-volume-templates/from/volume-template/{backupUuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'backupUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'backupStorageUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'guestOsType': ParamAnnotation(),
        'platform': ParamAnnotation(required=False,valid_values=['Linux','Windows','Other','Paravirtualization','WindowsVirtio'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'system': ParamAnnotation(),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CreateRootVolumeTemplateFromVolumeBackupAction, self).__init__()
        self.backupUuid = None
        self.backupStorageUuid = None
        self.name = None
        self.description = None
        self.guestOsType = None
        self.platform = None
        self.system = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteOssBucketNameLocalAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/hybrid/aliyun/oss-bucket/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteOssBucketNameLocalAction, self).__init__()
        self.uuid = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteAliyunNasAccessGroupRuleAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/nas/access/rule/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteAliyunNasAccessGroupRuleAction, self).__init__()
        self.uuid = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class AddActionToEventSubscriptionAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/zwatch/events/subscriptions/{subscriptionUuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'subscriptionUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'actionUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'actionType': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(AddActionToEventSubscriptionAction, self).__init__()
        self.subscriptionUuid = None
        self.actionUuid = None
        self.actionType = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class GetResourceBindableConfigAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/resource-configurations/bindable'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'category': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(GetResourceBindableConfigAction, self).__init__()
        self.category = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class StartConnectionBetweenAliyunRouterInterfaceAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/hybrid/aliyun/router-interface/{vbrInterfaceUuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'startConnectionBetweenAliyunRouterInterface'

    PARAMS = {
        'vrouterInterfaceUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'vbrInterfaceUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(StartConnectionBetweenAliyunRouterInterfaceAction, self).__init__()
        self.vrouterInterfaceUuid = None
        self.vbrInterfaceUuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryLdapServerAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/ldap/servers'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryLdapServerAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class AttachBaremetalPxeServerToClusterAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/clusters/{clusterUuid}/pxeservers/{pxeServerUuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'pxeServerUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'clusterUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(AttachBaremetalPxeServerToClusterAction, self).__init__()
        self.pxeServerUuid = None
        self.clusterUuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class GetIAM2VirtualIDAPIPermissionAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/iam2/virtual-ids/api-permissions'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'apisToCheck': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(GetIAM2VirtualIDAPIPermissionAction, self).__init__()
        self.apisToCheck = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryWebhookAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/web-hooks'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryWebhookAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class UpdateTicketRequestAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/tickets/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'updateTicketRequest'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'requests': ParamAnnotation(required=True,non_empty=True,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(UpdateTicketRequestAction, self).__init__()
        self.uuid = None
        self.requests = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteMetricDataAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/zwatch/metrics'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'namespace': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'metricName': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'labels': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteMetricDataAction, self).__init__()
        self.namespace = None
        self.metricName = None
        self.labels = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class RemoveMonFromCephBackupStorageAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/backup-storage/ceph/{uuid}/mons'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'monHostnames': ParamAnnotation(required=True,non_empty=True,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(RemoveMonFromCephBackupStorageAction, self).__init__()
        self.uuid = None
        self.monHostnames = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class ReconnectConsoleProxyAgentAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/consoles/agents'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'reconnectConsoleProxyAgent'

    PARAMS = {
        'agentUuids': ParamAnnotation(required=False,non_empty=True,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(ReconnectConsoleProxyAgentAction, self).__init__()
        self.agentUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class AddLocalPrimaryStorageAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/primary-storage/local-storage'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'url': ParamAnnotation(required=True,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'type': ParamAnnotation(),
        'zoneUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(AddLocalPrimaryStorageAction, self).__init__()
        self.url = None
        self.name = None
        self.description = None
        self.type = None
        self.zoneUuid = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QuerySharedBlockAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/sharedblock-group/sharedblocks'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QuerySharedBlockAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CheckScsiLunClusterStatusAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/storage-devices/scsi-lun/{uuid}/cluster/{clusterUuid}'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = 'checkScsiLunClusterStatus'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'clusterUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CheckScsiLunClusterStatusAction, self).__init__()
        self.uuid = None
        self.clusterUuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteInstanceOfferingAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/instance-offerings/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteInstanceOfferingAction, self).__init__()
        self.uuid = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DetachBaremetalPxeServerFromClusterAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/clusters/{clusterUuid}/pxeservers/{pxeServerUuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'pxeServerUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'clusterUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DetachBaremetalPxeServerFromClusterAction, self).__init__()
        self.pxeServerUuid = None
        self.clusterUuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteVpcUserVpnGatewayRemoteAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/hybrid/user-gateway/{uuid}/remote'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteVpcUserVpnGatewayRemoteAction, self).__init__()
        self.uuid = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class UpdateBaremetalChassisAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/baremetal/chassis/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'updateBaremetalChassis'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=False,max_length=255,non_empty=False,null_elements=False,empty_string=False,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'ipmiAddress': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'ipmiPort': ParamAnnotation(required=False,number_range=[1, 65535],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'ipmiUsername': ParamAnnotation(required=False,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'ipmiPassword': ParamAnnotation(required=False,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(UpdateBaremetalChassisAction, self).__init__()
        self.uuid = None
        self.name = None
        self.description = None
        self.ipmiAddress = None
        self.ipmiPort = None
        self.ipmiUsername = None
        self.ipmiPassword = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteIpRangeAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/l3-networks/ip-ranges/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteIpRangeAction, self).__init__()
        self.uuid = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class AddAttributesToIAM2VirtualIDAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/iam2/virtual-ids/{uuid}/attributes'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'attributes': ParamAnnotation(required=True,non_empty=True,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(AddAttributesToIAM2VirtualIDAction, self).__init__()
        self.uuid = None
        self.attributes = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryTwoFactorAuthenticationAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/twofactorauthentication/secrets'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryTwoFactorAuthenticationAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class RequestConsoleAccessAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/consoles'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'vmInstanceUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(RequestConsoleAccessAction, self).__init__()
        self.vmInstanceUuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class UpdateEmailMonitorTriggerActionAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/monitoring/trigger-actions/emails/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'updateEmailMonitorTriggerAction'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=False,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'email': ParamAnnotation(required=False,max_length=512,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'mediaUuid': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(UpdateEmailMonitorTriggerActionAction, self).__init__()
        self.uuid = None
        self.name = None
        self.email = None
        self.mediaUuid = None
        self.description = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteVCenterAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/vcenters/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteVCenterAction, self).__init__()
        self.uuid = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteEcsInstanceLocalAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/hybrid/aliyun/ecs/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteEcsInstanceLocalAction, self).__init__()
        self.uuid = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CreateVolumeSnapshotAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/volumes/{volumeUuid}/volume-snapshots'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'volumeUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CreateVolumeSnapshotAction, self).__init__()
        self.volumeUuid = None
        self.name = None
        self.description = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryConnectionAccessPointFromLocalAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/hybrid/aliyun/access-point'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryConnectionAccessPointFromLocalAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DetachBackupStorageFromZoneAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/zones/{zoneUuid}/backup-storage/{backupStorageUuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'backupStorageUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'zoneUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DetachBackupStorageFromZoneAction, self).__init__()
        self.backupStorageUuid = None
        self.zoneUuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class GetImagesFromImageStoreBackupStorageAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/backup-storage/{uuid}/image-store'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = 'getImagesFromImageStoreBackupStorage'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(GetImagesFromImageStoreBackupStorageAction, self).__init__()
        self.uuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteNicQosAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/vm-instances/{uuid}/nic-qos'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'direction': ParamAnnotation(required=True,valid_values=['in','out'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteNicQosAction, self).__init__()
        self.uuid = None
        self.direction = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class RefreshFiberChannelStorageAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/storage-devices/fiber-channel/controllers'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'zoneUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(RefreshFiberChannelStorageAction, self).__init__()
        self.zoneUuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class AddIpRangeByNetworkCidrAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/l3-networks/{l3NetworkUuid}/ip-ranges/by-cidr'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'name': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'l3NetworkUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'networkCidr': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(AddIpRangeByNetworkCidrAction, self).__init__()
        self.name = None
        self.description = None
        self.l3NetworkUuid = None
        self.networkCidr = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class ChangeAutoScalingGroupStateAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/autoscaling/groups/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'changeAutoScalingGroupState'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'stateEvent': ParamAnnotation(required=True,valid_values=['enable','disable'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(ChangeAutoScalingGroupStateAction, self).__init__()
        self.uuid = None
        self.stateEvent = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class RemoveMonFromCephPrimaryStorageAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/primary-storage/ceph/{uuid}/mons'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'monHostnames': ParamAnnotation(required=True,non_empty=True,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(RemoveMonFromCephPrimaryStorageAction, self).__init__()
        self.uuid = None
        self.monHostnames = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteAliyunDiskFromLocalAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/hybrid/aliyun/disk/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteAliyunDiskFromLocalAction, self).__init__()
        self.uuid = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteConnectionAccessPointLocalAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/hybrid/aliyun/access-point/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteConnectionAccessPointLocalAction, self).__init__()
        self.uuid = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryVCenterClusterAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/vcenters/clusters'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryVCenterClusterAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class SetVmInstanceDefaultCdRomAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/vm-instances/{vmInstanceUuid}/cdroms/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'setVmInstanceDefaultCdRom'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'vmInstanceUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(SetVmInstanceDefaultCdRomAction, self).__init__()
        self.uuid = None
        self.vmInstanceUuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryCertificateAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/certificates'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryCertificateAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryVRouterRouteTableAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/vrouter-route-tables'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryVRouterRouteTableAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class UpdateSNSApplicationPlatformAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/sns/application-platforms/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'updateSNSApplicationPlatform'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=False,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(UpdateSNSApplicationPlatformAction, self).__init__()
        self.uuid = None
        self.name = None
        self.description = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryAliyunPanguPartitionAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/aliyun/pangu'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryAliyunPanguPartitionAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class UpdateAliyunRouteInterfaceRemoteAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/hybrid/aliyun/router-interface/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'updateAliyunRouteInterfaceRemote'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'op': ParamAnnotation(required=True,valid_values=['active','inactive'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'vRouterType': ParamAnnotation(required=True,valid_values=['vbr','vrouter'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(UpdateAliyunRouteInterfaceRemoteAction, self).__init__()
        self.uuid = None
        self.op = None
        self.vRouterType = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class RemoveSNSDingTalkAtPersonAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/sns/application-endpoints/ding-talk/{endpointUuid}/at-persons/{phoneNumber}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'endpointUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'phoneNumber': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(RemoveSNSDingTalkAtPersonAction, self).__init__()
        self.endpointUuid = None
        self.phoneNumber = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class UpdateIAM2VirtualIDGroupAttributeAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/iam2/projects/groups/attributes/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'updateIAM2VirtualIDGroupAttribute'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'value': ParamAnnotation(required=True,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(UpdateIAM2VirtualIDGroupAttributeAction, self).__init__()
        self.uuid = None
        self.value = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryVpcIpSecConfigFromLocalAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/hybrid/vpn-connection/ipsec'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryVpcIpSecConfigFromLocalAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CreateAliyunSnapshotRemoteAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/hybrid/aliyun/snapshot'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'diskUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=True,valid_regex_values=r'^[\u4e00-\u9fa5a-zA-Z][\u4e00-\u9fa5_a-zA-Z0-9.-]+$',max_length=128,min_length=2,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=1024,min_length=2,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CreateAliyunSnapshotRemoteAction, self).__init__()
        self.diskUuid = None
        self.name = None
        self.description = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class AddIdentityZoneFromRemoteAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/hybrid/identity-zone'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'dataCenterUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'zoneId': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'type': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=1024,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(AddIdentityZoneFromRemoteAction, self).__init__()
        self.dataCenterUuid = None
        self.zoneId = None
        self.type = None
        self.description = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteOssBucketRemoteAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/hybrid/aliyun/oss-bucket/remote/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteOssBucketRemoteAction, self).__init__()
        self.uuid = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class RevertVmFromVmBackupAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/vm-backups/{groupUuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'revertVmFromVmBackup'

    PARAMS = {
        'groupUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'backupStorageUuid': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(RevertVmFromVmBackupAction, self).__init__()
        self.groupUuid = None
        self.backupStorageUuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CreateIAM2OrganizationAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/iam2/organizations'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'name': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'type': ParamAnnotation(required=True,valid_values=['Company','Department'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'parentUuid': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'attributes': ParamAnnotation(),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CreateIAM2OrganizationAction, self).__init__()
        self.name = None
        self.description = None
        self.type = None
        self.parentUuid = None
        self.attributes = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryVtepAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/l2-networks/vteps'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryVtepAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class GetCurrentTimeAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/management-nodes/actions'
    NEED_SESSION = False
    NEED_POLL = False
    PARAM_NAME = 'getCurrentTime'

    PARAMS = {
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation()
    }

    def __init__(self):
        super(GetCurrentTimeAction, self).__init__()
        self.systemTags = None
        self.userTags = None


class CreateIAM2VirtualIDAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/iam2/virtual-ids'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'name': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'password': ParamAnnotation(required=True,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'attributes': ParamAnnotation(),
        'projectUuid': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'organizationUuid': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'withoutDefaultRole': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CreateIAM2VirtualIDAction, self).__init__()
        self.name = None
        self.password = None
        self.description = None
        self.attributes = None
        self.projectUuid = None
        self.organizationUuid = None
        self.withoutDefaultRole = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryL2VxlanNetworkPoolAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/l2-networks/vxlan-pool'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryL2VxlanNetworkPoolAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteAliyunKeySecretAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/hybrid/aliyun/key/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteAliyunKeySecretAction, self).__init__()
        self.uuid = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteTicketAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/tickets/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteTicketAction, self).__init__()
        self.uuid = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class UpdateIpRangeAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/l3-networks/ip-ranges/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'updateIpRange'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=False,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(UpdateIpRangeAction, self).__init__()
        self.uuid = None
        self.name = None
        self.description = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryVRouterOspfNetworkAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/routerArea/network'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryVRouterOspfNetworkAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryImageCacheAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/primary-storage/imagecache'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryImageCacheAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CreateVipAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/vips'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'name': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'l3NetworkUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'allocatorStrategy': ParamAnnotation(),
        'requiredIp': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CreateVipAction, self).__init__()
        self.name = None
        self.description = None
        self.l3NetworkUuid = None
        self.allocatorStrategy = None
        self.requiredIp = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class UpdatePciDeviceAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/pci-device/pci-devices/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'updatePciDevice'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'state': ParamAnnotation(required=False,valid_values=['Enabled','Disabled'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'metaData': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(UpdatePciDeviceAction, self).__init__()
        self.uuid = None
        self.state = None
        self.description = None
        self.metaData = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteVmStaticIpAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/vm-instances/{vmInstanceUuid}/static-ips'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'vmInstanceUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'l3NetworkUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteVmStaticIpAction, self).__init__()
        self.vmInstanceUuid = None
        self.l3NetworkUuid = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryLongJobAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/longjobs'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryLongJobAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryEipAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/eips'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryEipAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class RecoverBackupFromImageStoreBackupStorageAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/volume-backups/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'recoverBackupFromImageStoreBackupStorage'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'srcBackupStorageUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'dstBackupStorageUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(RecoverBackupFromImageStoreBackupStorageAction, self).__init__()
        self.uuid = None
        self.srcBackupStorageUuid = None
        self.dstBackupStorageUuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class UpdateInstanceOfferingAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/instance-offerings/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'updateInstanceOffering'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=False,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'allocatorStrategy': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(UpdateInstanceOfferingAction, self).__init__()
        self.uuid = None
        self.name = None
        self.description = None
        self.allocatorStrategy = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryZoneAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/zones'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryZoneAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class GetMetricLabelValueAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/zwatch/metrics/label-values'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'namespace': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'metricName': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'labelNames': ParamAnnotation(required=True,non_empty=True,null_elements=False,empty_string=True,no_trim=False),
        'filterLabels': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(GetMetricLabelValueAction, self).__init__()
        self.namespace = None
        self.metricName = None
        self.labelNames = None
        self.filterLabels = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class UpdateLoadBalancerAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/load-balancers/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'updateLoadBalancer'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=False,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(UpdateLoadBalancerAction, self).__init__()
        self.uuid = None
        self.name = None
        self.description = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class GetEipAttachableVmNicsAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/eips/{eipUuid}/vm-instances/candidate-nics'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'eipUuid': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'vipUuid': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(GetEipAttachableVmNicsAction, self).__init__()
        self.eipUuid = None
        self.vipUuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class RemoveRolesFromIAM2VirtualIDAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/iam2/projects/virtual-ids/{virtualIDUuid}/roles'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'roleUuids': ParamAnnotation(required=True,non_empty=True,null_elements=False,empty_string=True,no_trim=False),
        'virtualIDUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(RemoveRolesFromIAM2VirtualIDAction, self).__init__()
        self.roleUuids = None
        self.virtualIDUuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CancelLongJobAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/longjobs/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'cancelLongJob'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CancelLongJobAction, self).__init__()
        self.uuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryArchiveTicketAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/tickets/archives'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryArchiveTicketAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class UpdateAutoScalingRuleAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/autoscaling/rules/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'updateAutoScalingRule'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=False,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'cooldown': ParamAnnotation(required=False,number_range=[1, 900],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(UpdateAutoScalingRuleAction, self).__init__()
        self.uuid = None
        self.name = None
        self.description = None
        self.cooldown = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class AddAliyunKeySecretAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/hybrid/aliyun/key'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'name': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=False,no_trim=False),
        'key': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=False,no_trim=False),
        'secret': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=False,no_trim=False),
        'accountUuid': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=1024,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'sync': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(AddAliyunKeySecretAction, self).__init__()
        self.name = None
        self.key = None
        self.secret = None
        self.accountUuid = None
        self.description = None
        self.sync = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DetachPrimaryStorageFromClusterAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/clusters/{clusterUuid}/primary-storage/{primaryStorageUuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'primaryStorageUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'clusterUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DetachPrimaryStorageFromClusterAction, self).__init__()
        self.primaryStorageUuid = None
        self.clusterUuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteVmBootModeAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/vm-instances/{uuid}/bootmode'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteVmBootModeAction, self).__init__()
        self.uuid = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryConnectionBetweenL3NetworkAndAliyunVSwitchAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/hybrid/aliyun/relationships'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryConnectionBetweenL3NetworkAndAliyunVSwitchAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class AttachVRouterRouteTableToVRouterAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/vrouter-route-tables/{routeTableUuid}/attach'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'routeTableUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'virtualRouterVmUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(AttachVRouterRouteTableToVRouterAction, self).__init__()
        self.routeTableUuid = None
        self.virtualRouterVmUuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class ReconnectBaremetalPxeServerAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/baremetal/pxeservers/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'reconnectBaremetalPxeServer'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(ReconnectBaremetalPxeServerAction, self).__init__()
        self.uuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CreateIAM2TickFlowCollectionAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/tickets/flow-collections'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'flows': ParamAnnotation(),
        'projectUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=True,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'isDefault': ParamAnnotation(),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CreateIAM2TickFlowCollectionAction, self).__init__()
        self.flows = None
        self.projectUuid = None
        self.name = None
        self.description = None
        self.isDefault = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class UpdateLicenseAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/licenses/mn/{managementNodeUuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'updateLicense'

    PARAMS = {
        'managementNodeUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'license': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(UpdateLicenseAction, self).__init__()
        self.managementNodeUuid = None
        self.license = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteNasFileSystemAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/primary-storage/nas/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteNasFileSystemAction, self).__init__()
        self.uuid = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class UpdateHybridKeySecretAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/hybrid/hybrid/{uuid}/key'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=False,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(UpdateHybridKeySecretAction, self).__init__()
        self.uuid = None
        self.name = None
        self.description = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryIAM2ProjectTemplateAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/iam2/projects/templates'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryIAM2ProjectTemplateAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryMonitorTriggerAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/monitoring/triggers'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryMonitorTriggerAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class UpdateDahoCloudConnectionAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/hybrid/daho/cloud_connections/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'updateDahoCloudConnection'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=False,max_length=255,non_empty=False,null_elements=False,empty_string=False,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=1024,non_empty=False,null_elements=False,empty_string=False,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(UpdateDahoCloudConnectionAction, self).__init__()
        self.uuid = None
        self.name = None
        self.description = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryIAM2VirtualIDGroupAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/iam2/projects/groups'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryIAM2VirtualIDGroupAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CreateUserGroupAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/accounts/groups'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'name': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CreateUserGroupAction, self).__init__()
        self.name = None
        self.description = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class UpdateAliyunVirtualRouterAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/hybrid/aliyun/vrouter/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'updateAliyunVirtualRouter'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=False,valid_regex_values=r'^[\\u4e00-\\u9fa5a-zA-Z][\\u4e00-\\u9fa5_a-zA-Z0-9-]+$',max_length=128,min_length=2,non_empty=False,null_elements=False,empty_string=False,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=1024,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(UpdateAliyunVirtualRouterAction, self).__init__()
        self.uuid = None
        self.name = None
        self.description = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class ChangeIAM2ProjectStateAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/iam2/projects/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'changeIAM2ProjectState'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'stateEvent': ParamAnnotation(required=True,valid_values=['enable','disable'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(ChangeIAM2ProjectStateAction, self).__init__()
        self.uuid = None
        self.stateEvent = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CleanUpBaremetalChassisBondingAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/baremetal/chassis/{chassisUuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'cleanUpBaremetalChassisBonding'

    PARAMS = {
        'chassisUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CleanUpBaremetalChassisBondingAction, self).__init__()
        self.chassisUuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class GetAttachableVpcL3NetworkAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/vpc/virtual-routers/{uuid}/attachable-vpc-l3s'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = 'params'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(GetAttachableVpcL3NetworkAction, self).__init__()
        self.uuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class AddFusionstorPrimaryStorageAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/primary-storage/fusionstor'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'monUrls': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=False,no_trim=False),
        'rootVolumePoolName': ParamAnnotation(required=False,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'dataVolumePoolName': ParamAnnotation(required=False,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'imageCachePoolName': ParamAnnotation(required=False,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'url': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'type': ParamAnnotation(),
        'zoneUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(AddFusionstorPrimaryStorageAction, self).__init__()
        self.monUrls = None
        self.rootVolumePoolName = None
        self.dataVolumePoolName = None
        self.imageCachePoolName = None
        self.url = None
        self.name = None
        self.description = None
        self.type = None
        self.zoneUuid = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryAliyunVirtualRouterFromLocalAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/hybrid/aliyun/vrouter'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryAliyunVirtualRouterFromLocalAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class RemoveIAM2VirtualIDsFromProjectAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/iam2/projects/{projectUuid}/virtual-ids'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'projectUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'virtualIDUuids': ParamAnnotation(required=True,non_empty=True,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(RemoveIAM2VirtualIDsFromProjectAction, self).__init__()
        self.projectUuid = None
        self.virtualIDUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class UpdateL3NetworkAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/l3-networks/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'updateL3Network'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=False,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'dnsDomain': ParamAnnotation(required=False,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'category': ParamAnnotation(required=False,valid_values=['Public','Private','System'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'system': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(UpdateL3NetworkAction, self).__init__()
        self.uuid = None
        self.name = None
        self.description = None
        self.dnsDomain = None
        self.category = None
        self.system = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryScsiLunAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/storage-devices/scsi-lun/luns'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryScsiLunAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class RemoveMonFromFusionstorPrimaryStorageAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/primary-storage/fusionstor/{uuid}/mons'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'monHostnames': ParamAnnotation(required=True,non_empty=True,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(RemoveMonFromFusionstorPrimaryStorageAction, self).__init__()
        self.uuid = None
        self.monHostnames = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class ChangeMonitorTriggerActionStateAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/monitoring/trigger-actions/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'changeMonitorTriggerActionState'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'stateEvent': ParamAnnotation(required=True,valid_values=['enable','disable'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(ChangeMonitorTriggerActionStateAction, self).__init__()
        self.uuid = None
        self.stateEvent = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class SyncPrimaryStorageCapacityAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/primary-storage/{primaryStorageUuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'syncPrimaryStorageCapacity'

    PARAMS = {
        'primaryStorageUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(SyncPrimaryStorageCapacityAction, self).__init__()
        self.primaryStorageUuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteDatabaseBackupAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/database-backups/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'backupStorageUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteDatabaseBackupAction, self).__init__()
        self.uuid = None
        self.backupStorageUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class SetVmSshKeyAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/vm-instances/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'setVmSshKey'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'SshKey': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(SetVmSshKeyAction, self).__init__()
        self.uuid = None
        self.SshKey = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryDahoVllVbrRefAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/hybrid/daho/vllsRef'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryDahoVllVbrRefAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CreateAutoScalingRuleAlarmTriggerAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/zwatch/alarms/{alarmUuid}/autoscaling/rules/{ruleUuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'alarmUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'triggerType': ParamAnnotation(),
        'name': ParamAnnotation(required=True,max_length=256,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'ruleUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CreateAutoScalingRuleAlarmTriggerAction, self).__init__()
        self.alarmUuid = None
        self.triggerType = None
        self.name = None
        self.description = None
        self.ruleUuid = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteDahoVllAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/hybrid/daho/vlls/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteDahoVllAction, self).__init__()
        self.uuid = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class UpdateIscsiServerAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/storage-devices/iscsi/servers/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'updateIscsiServer'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=False,max_length=256,non_empty=False,null_elements=False,empty_string=False,no_trim=False),
        'chapUserName': ParamAnnotation(required=False,max_length=128,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'chapUserPassword': ParamAnnotation(required=False,max_length=128,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'state': ParamAnnotation(required=False,valid_values=['Enabled','Disabled'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(UpdateIscsiServerAction, self).__init__()
        self.uuid = None
        self.name = None
        self.chapUserName = None
        self.chapUserPassword = None
        self.state = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QuerySNSEmailPlatformAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/sns/application-platforms/email'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QuerySNSEmailPlatformAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class UpdateVRouterRouteTableAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/vrouter-route-tables/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'updateVRouterRouteTable'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=False,max_length=255,non_empty=False,null_elements=False,empty_string=False,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(UpdateVRouterRouteTableAction, self).__init__()
        self.uuid = None
        self.name = None
        self.description = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class BackupDatabaseToPublicCloudAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/hybrid/backup-mysql'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'type': ParamAnnotation(required=True,valid_values=['aliyun'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'regionId': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=False,no_trim=False),
        'local': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(BackupDatabaseToPublicCloudAction, self).__init__()
        self.type = None
        self.regionId = None
        self.local = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class ChangePreconfigurationTemplateStateAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/baremetal/preconfigurations/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'changePreconfigurationTemplateState'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'stateEvent': ParamAnnotation(required=True,valid_values=['enable','disable'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(ChangePreconfigurationTemplateStateAction, self).__init__()
        self.uuid = None
        self.stateEvent = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryConsoleProxyAgentAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/consoles/agents'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryConsoleProxyAgentAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryAlertAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/monitoring/alerts'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryAlertAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class UpdateAliyunEbsPrimaryStorageAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/primary-storage/aliyun/ebs/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'updateAliyunEbsPrimaryStorage'

    PARAMS = {
        'panguAppName': ParamAnnotation(required=False,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'panguPartitionName': ParamAnnotation(required=False,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=False,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'url': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(UpdateAliyunEbsPrimaryStorageAction, self).__init__()
        self.panguAppName = None
        self.panguPartitionName = None
        self.uuid = None
        self.name = None
        self.description = None
        self.url = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class PreviewResourceStackAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/cloudformation/stack/preview'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = 'params'

    PARAMS = {
        'type': ParamAnnotation(required=False,valid_values=['zstack'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'templateContent': ParamAnnotation(required=False,max_length=4194304,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'uuid': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'parameters': ParamAnnotation(required=False,max_length=524288,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(PreviewResourceStackAction, self).__init__()
        self.type = None
        self.templateContent = None
        self.uuid = None
        self.parameters = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QuerySNSTextTemplateAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/zwatch/alarms/sns/text-templates'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QuerySNSTextTemplateAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class AddHybridKeySecretAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/hybrid/hybrid/key'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'name': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=False,no_trim=False),
        'key': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=False,no_trim=False),
        'secret': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=False,no_trim=False),
        'accountUuid': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=1024,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'type': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'sync': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(AddHybridKeySecretAction, self).__init__()
        self.name = None
        self.key = None
        self.secret = None
        self.accountUuid = None
        self.description = None
        self.type = None
        self.sync = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class PowerOnBaremetalChassisAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/baremetal/chassis/{chassisUuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'powerOnBaremetalChassis'

    PARAMS = {
        'chassisUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(PowerOnBaremetalChassisAction, self).__init__()
        self.chassisUuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteAutoScalingTemplateAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/autoscaling/template/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteAutoScalingTemplateAction, self).__init__()
        self.uuid = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryPciDevicePciDeviceOfferingAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/pci-devices/pci-devices/pci-device-offerings'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryPciDevicePciDeviceOfferingAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class BatchDeleteVolumeSnapshotAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/volume-snapshots/batch-delete'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'batchDeleteVolumeSnapshot'

    PARAMS = {
        'uuids': ParamAnnotation(required=True,non_empty=True,null_elements=False,empty_string=False,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(BatchDeleteVolumeSnapshotAction, self).__init__()
        self.uuids = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class UpdateDahoDataCenterConnectionAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/hybrid/daho/connections/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'updateDahoDataCenterConnection'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=False,max_length=255,non_empty=False,null_elements=False,empty_string=False,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=1024,non_empty=False,null_elements=False,empty_string=False,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(UpdateDahoDataCenterConnectionAction, self).__init__()
        self.uuid = None
        self.name = None
        self.description = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteResourcePriceAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/billings/prices/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteResourcePriceAction, self).__init__()
        self.uuid = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteAutoScalingGroupAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/autoscaling/groups/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteAutoScalingGroupAction, self).__init__()
        self.uuid = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class AttachPortForwardingRuleAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/port-forwarding/{ruleUuid}/vm-instances/nics/{vmNicUuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'ruleUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'vmNicUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(AttachPortForwardingRuleAction, self).__init__()
        self.ruleUuid = None
        self.vmNicUuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class UpdateVirtualBorderRouterRemoteAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/hybrid/aliyun/border-router/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'updateVirtualBorderRouterRemote'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'localGatewayIp': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'peerGatewayIp': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'peeringSubnetMask': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=False,max_length=64,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=1024,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'vlanId': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'circuitCode': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(UpdateVirtualBorderRouterRemoteAction, self).__init__()
        self.uuid = None
        self.localGatewayIp = None
        self.peerGatewayIp = None
        self.peeringSubnetMask = None
        self.name = None
        self.description = None
        self.vlanId = None
        self.circuitCode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryIAM2VirtualIDAttributeAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/iam2/virtual-ids/attributes'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryIAM2VirtualIDAttributeAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryResourceConfigAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/resource-configurations'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryResourceConfigAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class GetEventDataAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/zwatch/events'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'startTime': ParamAnnotation(required=False,number_range=[0, 9223372036854775807],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'endTime': ParamAnnotation(required=False,number_range=[0, 9223372036854775807],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'offsetAheadOfCurrentTime': ParamAnnotation(required=False,number_range=[0, 9223372036854775807],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(required=False,number_range=[0, 2147483647],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'conditions': ParamAnnotation(),
        'count': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(GetEventDataAction, self).__init__()
        self.startTime = None
        self.endTime = None
        self.offsetAheadOfCurrentTime = None
        self.limit = None
        self.conditions = None
        self.count = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class UpdateSftpBackupStorageAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/backup-storage/sftp/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'updateSftpBackupStorage'

    PARAMS = {
        'username': ParamAnnotation(required=False,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'password': ParamAnnotation(required=False,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'hostname': ParamAnnotation(required=False,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'sshPort': ParamAnnotation(required=False,number_range=[1, 65535],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=False,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(UpdateSftpBackupStorageAction, self).__init__()
        self.username = None
        self.password = None
        self.hostname = None
        self.sshPort = None
        self.uuid = None
        self.name = None
        self.description = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryVolumeSnapshotAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/volume-snapshots'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryVolumeSnapshotAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryTagAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/tags'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryTagAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CreateSystemTagAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/system-tags'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'resourceType': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'tag': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CreateSystemTagAction, self).__init__()
        self.resourceType = None
        self.resourceUuid = None
        self.tag = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryPciDeviceOfferingAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/pci-device/pci-device-offerings'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryPciDeviceOfferingAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class AddSecurityGroupRuleAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/security-groups/{securityGroupUuid}/rules'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'securityGroupUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'rules': ParamAnnotation(required=True,non_empty=True,null_elements=False,empty_string=True,no_trim=False),
        'remoteSecurityGroupUuids': ParamAnnotation(required=False,non_empty=True,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(AddSecurityGroupRuleAction, self).__init__()
        self.securityGroupUuid = None
        self.rules = None
        self.remoteSecurityGroupUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteImageAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/images/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'backupStorageUuids': ParamAnnotation(required=False,non_empty=True,null_elements=False,empty_string=True,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteImageAction, self).__init__()
        self.uuid = None
        self.backupStorageUuids = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class UpdateSecurityGroupAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/security-groups/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'updateSecurityGroup'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=False,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(UpdateSecurityGroupAction, self).__init__()
        self.uuid = None
        self.name = None
        self.description = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CreateSecurityGroupAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/security-groups'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'name': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'ipVersion': ParamAnnotation(required=False,valid_values=['4','6'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CreateSecurityGroupAction, self).__init__()
        self.name = None
        self.description = None
        self.ipVersion = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteV2VConversionHostAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/v2v-conversion-hosts/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteV2VConversionHostAction, self).__init__()
        self.uuid = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class GetOssBucketFileFromRemoteAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/hybrid/oss/file/remote'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'ossDomain': ParamAnnotation(required=False,max_length=127,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'ossKey': ParamAnnotation(required=False,max_length=127,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'ossSecret': ParamAnnotation(required=False,max_length=127,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(GetOssBucketFileFromRemoteAction, self).__init__()
        self.uuid = None
        self.ossDomain = None
        self.ossKey = None
        self.ossSecret = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class AddRolesToIAM2VirtualIDGroupAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/iam2/projects/groups/{groupUuid}/roles'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'roleUuids': ParamAnnotation(required=True,non_empty=True,null_elements=False,empty_string=True,no_trim=False),
        'groupUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(AddRolesToIAM2VirtualIDGroupAction, self).__init__()
        self.roleUuids = None
        self.groupUuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class GetHypervisorTypesAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/hosts/hypervisor-types'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(GetHypervisorTypesAction, self).__init__()
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class AddAliyunPanguPartitionAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/aliyun/pangu'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'name': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'identityZoneUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'appName': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'partitionName': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(AddAliyunPanguPartitionAction, self).__init__()
        self.name = None
        self.description = None
        self.identityZoneUuid = None
        self.appName = None
        self.partitionName = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QuerySchedulerJobAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/scheduler/jobs'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QuerySchedulerJobAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class UpdateVipAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/vips/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'updateVip'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=False,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(UpdateVipAction, self).__init__()
        self.uuid = None
        self.name = None
        self.description = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DetachIscsiServerFromClusterAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/clusters/{clusterUuid}/storage-devices/iscsi/servers/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'clusterUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DetachIscsiServerFromClusterAction, self).__init__()
        self.uuid = None
        self.clusterUuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class SyncVirtualBorderRouterFromRemoteAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/hybrid/aliyun/border-router/{dataCenterUuid}/sync'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'syncVirtualBorderRouterFromRemote'

    PARAMS = {
        'dataCenterUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(SyncVirtualBorderRouterFromRemoteAction, self).__init__()
        self.dataCenterUuid = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class GetNoTriggerSchedulerJobsAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/scheduler/jobs/candidates'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(GetNoTriggerSchedulerJobsAction, self).__init__()
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryVmNicInSecurityGroupAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/security-groups/vm-instances/nics'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryVmNicInSecurityGroupAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class StartVmInstanceAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/vm-instances/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'startVmInstance'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'clusterUuid': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'hostUuid': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(StartVmInstanceAction, self).__init__()
        self.uuid = None
        self.clusterUuid = None
        self.hostUuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteEcsSecurityGroupRemoteAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/hybrid/aliyun/security-group/remote/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteEcsSecurityGroupRemoteAction, self).__init__()
        self.uuid = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class ChangeBaremetalChassisStateAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/baremetal/chassis/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'changeBaremetalChassisState'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'stateEvent': ParamAnnotation(required=True,valid_values=['enable','disable'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(ChangeBaremetalChassisStateAction, self).__init__()
        self.uuid = None
        self.stateEvent = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryAccessKeyAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/accesskeys'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryAccessKeyAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class AttachL3NetworkToVmAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/vm-instances/{vmInstanceUuid}/l3-networks/{l3NetworkUuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'vmInstanceUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'l3NetworkUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'staticIp': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(AttachL3NetworkToVmAction, self).__init__()
        self.vmInstanceUuid = None
        self.l3NetworkUuid = None
        self.staticIp = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class PowerResetBaremetalChassisAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/baremetal/chassis/{chassisUuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'powerResetBaremetalChassis'

    PARAMS = {
        'chassisUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(PowerResetBaremetalChassisAction, self).__init__()
        self.chassisUuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class UpdateBaremetalPxeServerAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/baremetal/pxeservers/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'updateBaremetalPxeServer'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=False,max_length=255,non_empty=False,null_elements=False,empty_string=False,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'dhcpRangeBegin': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'dhcpRangeEnd': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'dhcpRangeNetmask': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(UpdateBaremetalPxeServerAction, self).__init__()
        self.uuid = None
        self.name = None
        self.description = None
        self.dhcpRangeBegin = None
        self.dhcpRangeEnd = None
        self.dhcpRangeNetmask = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class UpdateIAM2TicketFlowAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/tickets/flow/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'updateIAM2TicketFlow'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'approverUuid': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'approverTitle': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(UpdateIAM2TicketFlowAction, self).__init__()
        self.uuid = None
        self.name = None
        self.description = None
        self.approverUuid = None
        self.approverTitle = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteAliyunSnapshotFromLocalAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/hybrid/aliyun/snapshot/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteAliyunSnapshotFromLocalAction, self).__init__()
        self.uuid = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class GetResourceConfigAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/resource-configurations/{resourceUuid}/{category}/{name}'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'category': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(GetResourceConfigAction, self).__init__()
        self.category = None
        self.name = None
        self.resourceUuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryResourceStackAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/cloudformation/stack'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryResourceStackAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class GetVolumeQosAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/volumes/{uuid}/qos'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'forceSync': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(GetVolumeQosAction, self).__init__()
        self.uuid = None
        self.forceSync = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class SetNicQosAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/vm-instances/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'setNicQos'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'outboundBandwidth': ParamAnnotation(required=False,number_range=[8192, 9223372036854775807],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'inboundBandwidth': ParamAnnotation(required=False,number_range=[8192, 9223372036854775807],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(SetNicQosAction, self).__init__()
        self.uuid = None
        self.outboundBandwidth = None
        self.inboundBandwidth = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryNetworkServiceL3NetworkRefAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/l3-networks/network-services/refs'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryNetworkServiceL3NetworkRefAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryLocalStorageResourceRefAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/primary-storage/local-storage/resource-refs'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryLocalStorageResourceRefAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class SyncDahoCloudConnectionAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/hybrid/daho/cloud_connections/{dataCenterUuid}/sync'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'dataCenterUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(SyncDahoCloudConnectionAction, self).__init__()
        self.dataCenterUuid = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeletePrimaryStorageAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/primary-storage/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeletePrimaryStorageAction, self).__init__()
        self.uuid = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class UpdateConsoleProxyAgentAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/consoles/agents/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'updateConsoleProxyAgent'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'consoleProxyOverriddenIp': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(UpdateConsoleProxyAgentAction, self).__init__()
        self.uuid = None
        self.consoleProxyOverriddenIp = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class UpdateVpcUserVpnGatewayAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/hybrid/user-vpn/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'updateVpcUserVpnGateway'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=False,valid_regex_values=r'^[\\u4e00-\\u9fa5a-zA-Z][\\u4e00-\\u9fa5_a-zA-Z0-9-]+$',max_length=128,min_length=2,non_empty=False,null_elements=False,empty_string=False,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=1024,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(UpdateVpcUserVpnGatewayAction, self).__init__()
        self.uuid = None
        self.name = None
        self.description = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class AttachVmNicToVmAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/vm-instances/{vmInstanceUuid}/nices/{vmNicUuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'vmNicUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'vmInstanceUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(AttachVmNicToVmAction, self).__init__()
        self.vmNicUuid = None
        self.vmInstanceUuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class UpdateAlarmAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/zwatch/alarms/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'updateAlarm'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=False,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2047,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'comparisonOperator': ParamAnnotation(required=False,valid_values=['GreaterThanOrEqualTo','GreaterThan','LessThan','LessThanOrEqualTo'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'period': ParamAnnotation(required=False,number_range=[1, 2147483647],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'threshold': ParamAnnotation(required=False,number_range=[0, 9223372036854775807],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'repeatInterval': ParamAnnotation(required=False,number_range=[0, 9223372036854775807],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'repeatCount': ParamAnnotation(required=False,number_range=[-1, 2147483647],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'enableRecovery': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(UpdateAlarmAction, self).__init__()
        self.uuid = None
        self.name = None
        self.description = None
        self.comparisonOperator = None
        self.period = None
        self.threshold = None
        self.repeatInterval = None
        self.repeatCount = None
        self.enableRecovery = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class GetTrashOnPrimaryStorageAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/primary-storage/trash'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(GetTrashOnPrimaryStorageAction, self).__init__()
        self.uuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class GetL3NetworkDhcpIpAddressAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/l3-networks/{l3NetworkUuid}/dhcp-ip'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'l3NetworkUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(GetL3NetworkDhcpIpAddressAction, self).__init__()
        self.l3NetworkUuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryQuotaAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/accounts/quotas'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryQuotaAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeletePciDeviceAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/pci-device/pci-devices/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeletePciDeviceAction, self).__init__()
        self.uuid = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class UpdateEmailMediaAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/media/emails/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'updateEmailMedia'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=False,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'smtpServer': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'smtpPort': ParamAnnotation(required=False,number_range=[1, 65535],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'username': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'password': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(UpdateEmailMediaAction, self).__init__()
        self.uuid = None
        self.name = None
        self.description = None
        self.smtpServer = None
        self.smtpPort = None
        self.username = None
        self.password = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class UpdateV2VConversionHostAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/v2v-conversion-hosts/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'updateV2VConversionHost'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=False,max_length=255,non_empty=False,null_elements=False,empty_string=False,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'storagePath': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(UpdateV2VConversionHostAction, self).__init__()
        self.uuid = None
        self.name = None
        self.description = None
        self.storagePath = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class PrimaryStorageMigrateVmAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/vm-instances/{vmInstanceUuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'primaryStorageMigrateVm'

    PARAMS = {
        'vmInstanceUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'dstPrimaryStorageUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'withDataVolumes': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'withSnapshots': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(PrimaryStorageMigrateVmAction, self).__init__()
        self.vmInstanceUuid = None
        self.dstPrimaryStorageUuid = None
        self.withDataVolumes = None
        self.withSnapshots = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CreateIAM2ProjectAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/iam2/projects'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'name': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'attributes': ParamAnnotation(),
        'quota': ParamAnnotation(),
        'roleUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CreateIAM2ProjectAction, self).__init__()
        self.name = None
        self.description = None
        self.attributes = None
        self.quota = None
        self.roleUuids = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class RemoveLabelFromEventSubscriptionAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/zwatch/events/subscriptions/labels/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(RemoveLabelFromEventSubscriptionAction, self).__init__()
        self.uuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CheckKVMHostConfigFileAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/hosts/kvm/from-file/check'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = 'params'

    PARAMS = {
        'hostInfo': ParamAnnotation(required=True,non_empty=True,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CheckKVMHostConfigFileAction, self).__init__()
        self.hostInfo = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class ChangeInstanceOfferingAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/vm-instances/{vmInstanceUuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'changeInstanceOffering'

    PARAMS = {
        'vmInstanceUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'instanceOfferingUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(ChangeInstanceOfferingAction, self).__init__()
        self.vmInstanceUuid = None
        self.instanceOfferingUuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryFusionstorPrimaryStorageAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/primary-storage/fusionstor'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryFusionstorPrimaryStorageAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QuerySNSTopicSubscriberAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/sns/topics/subscribers'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QuerySNSTopicSubscriberAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteL2NetworkAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/l2-networks/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteL2NetworkAction, self).__init__()
        self.uuid = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class UpdateIAM2TicketFlowCollectionAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/tickets/flow-collections/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'updateIAM2TicketFlowCollection'

    PARAMS = {
        'flows': ParamAnnotation(),
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=False,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'isDefault': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(UpdateIAM2TicketFlowCollectionAction, self).__init__()
        self.flows = None
        self.uuid = None
        self.name = None
        self.description = None
        self.isDefault = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class InspectBaremetalChassisAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/baremetal/chassis/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'inspectBaremetalChassis'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(InspectBaremetalChassisAction, self).__init__()
        self.uuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class UpdateFusionstorPrimaryStorageMonAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/primary-storage/fusionstor/mons/{monUuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'updateFusionstorPrimaryStorageMon'

    PARAMS = {
        'monUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=False,no_trim=False),
        'hostname': ParamAnnotation(required=False,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'sshUsername': ParamAnnotation(required=False,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'sshPassword': ParamAnnotation(required=False,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'sshPort': ParamAnnotation(required=False,number_range=[1, 65535],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'monPort': ParamAnnotation(required=False,number_range=[1, 65535],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(UpdateFusionstorPrimaryStorageMonAction, self).__init__()
        self.monUuid = None
        self.hostname = None
        self.sshUsername = None
        self.sshPassword = None
        self.sshPort = None
        self.monPort = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CreateDataVolumeTemplateFromVolumeBackupAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/images/data-volume-templates/from/volume-template/{backupUuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'backupUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'backupStorageUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'guestOsType': ParamAnnotation(),
        'platform': ParamAnnotation(required=False,valid_values=['Linux','Windows','Other','Paravirtualization','WindowsVirtio'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'system': ParamAnnotation(),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CreateDataVolumeTemplateFromVolumeBackupAction, self).__init__()
        self.backupUuid = None
        self.backupStorageUuid = None
        self.name = None
        self.description = None
        self.guestOsType = None
        self.platform = None
        self.system = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class UpdateCephPrimaryStoragePoolAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/primary-storage/ceph/pools/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'updateCephPrimaryStoragePool'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'aliasName': ParamAnnotation(required=False,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(UpdateCephPrimaryStoragePoolAction, self).__init__()
        self.uuid = None
        self.aliasName = None
        self.description = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CreateAliyunNasAccessGroupAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/nas/aliyun/access'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'dataCenterUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=False,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=1024,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'networkType': ParamAnnotation(required=False,valid_values=['classic','vpc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CreateAliyunNasAccessGroupAction, self).__init__()
        self.dataCenterUuid = None
        self.name = None
        self.description = None
        self.networkType = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class GetElaborationCategoriesAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/errorcode/elaborations/categories'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(GetElaborationCategoriesAction, self).__init__()
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CheckBaremetalChassisConfigFileAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/baremetal/chassis/from-file/check'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = 'params'

    PARAMS = {
        'baremetalChassisInfo': ParamAnnotation(required=True,non_empty=True,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CheckBaremetalChassisConfigFileAction, self).__init__()
        self.baremetalChassisInfo = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class GetVmInstanceHaLevelAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/vm-instances/{uuid}/ha-levels'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(GetVmInstanceHaLevelAction, self).__init__()
        self.uuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryVCenterDatacenterAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/vcenters/datacenters'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryVCenterDatacenterAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class UpdateHybridEipAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/hybrid/eip/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'updateHybridEip'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=False,max_length=128,non_empty=False,null_elements=False,empty_string=False,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'type': ParamAnnotation(required=True,valid_values=['aliyun'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(UpdateHybridEipAction, self).__init__()
        self.uuid = None
        self.name = None
        self.description = None
        self.type = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CreateSNSHttpEndpointAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/sns/application-endpoints/http'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'url': ParamAnnotation(required=True,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'username': ParamAnnotation(required=False,max_length=128,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'password': ParamAnnotation(required=False,max_length=512,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'platformUuid': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CreateSNSHttpEndpointAction, self).__init__()
        self.url = None
        self.username = None
        self.password = None
        self.name = None
        self.description = None
        self.platformUuid = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryAffinityGroupAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/affinity-groups'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryAffinityGroupAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryIdentityZoneFromLocalAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/hybrid/identity-zone'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryIdentityZoneFromLocalAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class UpdateNasMountTargetAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/primary-storage/nas/mount/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'updateNasMountTarget'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=False,max_length=255,non_empty=False,null_elements=False,empty_string=False,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=1024,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(UpdateNasMountTargetAction, self).__init__()
        self.uuid = None
        self.name = None
        self.description = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeletePolicyAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/accounts/policies/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeletePolicyAction, self).__init__()
        self.uuid = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryVpcVpnConnectionFromLocalAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/hybrid/vpn-connection'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryVpcVpnConnectionFromLocalAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DebugSignalAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/debug'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'signals': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DebugSignalAction, self).__init__()
        self.signals = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class SyncAliyunSnapshotRemoteAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/hybrid/aliyun/snapshot/{dataCenterUuid}/sync'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'dataCenterUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'snapshotId': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(SyncAliyunSnapshotRemoteAction, self).__init__()
        self.dataCenterUuid = None
        self.snapshotId = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteVmConsolePasswordAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/vm-instances/{uuid}/console-password'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteVmConsolePasswordAction, self).__init__()
        self.uuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class SetVpcVRouterDistributedRoutingEnabledAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/vpc/virtual-routers/{uuid}/distributed-routing'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'stateEvent': ParamAnnotation(required=True,valid_values=['enable','disable'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(SetVpcVRouterDistributedRoutingEnabledAction, self).__init__()
        self.uuid = None
        self.stateEvent = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class StopBaremetalPxeServerAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/baremetal/pxeservers/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'stopBaremetalPxeServer'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(StopBaremetalPxeServerAction, self).__init__()
        self.uuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class AddSimulatorBackupStorageAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/backup-storage/simulators'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'totalCapacity': ParamAnnotation(),
        'availableCapacity': ParamAnnotation(),
        'url': ParamAnnotation(required=True,max_length=2048,non_empty=False,null_elements=False,empty_string=False,no_trim=False),
        'name': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'type': ParamAnnotation(),
        'importImages': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(AddSimulatorBackupStorageAction, self).__init__()
        self.totalCapacity = None
        self.availableCapacity = None
        self.url = None
        self.name = None
        self.description = None
        self.type = None
        self.importImages = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryAutoScalingRuleTriggerAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/autoscaling/groups/rules/trigger'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryAutoScalingRuleTriggerAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class ChangeMonitorTriggerStateAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/monitoring/triggers/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'changeMonitorTriggerState'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'stateEvent': ParamAnnotation(required=True,valid_values=['enable','disable'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(ChangeMonitorTriggerStateAction, self).__init__()
        self.uuid = None
        self.stateEvent = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class UpdateHostAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/hosts/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'updateHost'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=False,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'managementIp': ParamAnnotation(required=False,max_length=255,non_empty=False,null_elements=False,empty_string=False,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(UpdateHostAction, self).__init__()
        self.uuid = None
        self.name = None
        self.description = None
        self.managementIp = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryEcsImageFromLocalAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/hybrid/aliyun/image'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryEcsImageFromLocalAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryNasMountTargetAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/primary-storage/nas/mount'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryNasMountTargetAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QuerySNSTopicAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/sns/topics'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QuerySNSTopicAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class UpdateVirtualRouterOfferingAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/instance-offerings/virtual-routers/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'updateVirtualRouterOffering'

    PARAMS = {
        'isDefault': ParamAnnotation(),
        'imageUuid': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=False,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'allocatorStrategy': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(UpdateVirtualRouterOfferingAction, self).__init__()
        self.isDefault = None
        self.imageUuid = None
        self.uuid = None
        self.name = None
        self.description = None
        self.allocatorStrategy = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class AddAttributesToIAM2ProjectAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/iam2/projects/{uuid}/attributes'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'attributes': ParamAnnotation(required=True,non_empty=True,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(AddAttributesToIAM2ProjectAction, self).__init__()
        self.uuid = None
        self.attributes = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class RemoveLabelFromAlarmAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/zwatch/alarms/labels/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(RemoveLabelFromAlarmAction, self).__init__()
        self.uuid = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class GetResourceFromResourceStackAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/cloudformation/stack/resources'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(GetResourceFromResourceStackAction, self).__init__()
        self.uuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class GetPrimaryStorageAllocatorStrategiesAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/primary-storage/allocators/strategies'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(GetPrimaryStorageAllocatorStrategiesAction, self).__init__()
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class UnsubscribeSNSTopicAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/sns/topics/{topicUuid}/endpoints/{endpointUuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'topicUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'endpointUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(UnsubscribeSNSTopicAction, self).__init__()
        self.topicUuid = None
        self.endpointUuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class ChangeSNSApplicationPlatformStateAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/sns/application-platforms/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'changeSNSApplicationPlatformState'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'stateEvent': ParamAnnotation(required=True,valid_values=['enable','disable'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(ChangeSNSApplicationPlatformStateAction, self).__init__()
        self.uuid = None
        self.stateEvent = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryIpRangeAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/l3-networks/ip-ranges'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryIpRangeAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class RestartResourceStackAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/cloudformation/stack/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'restartResourceStack'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(RestartResourceStackAction, self).__init__()
        self.uuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryEmailTriggerActionAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/monitoring/trigger-actions/emails'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryEmailTriggerActionAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryVCenterBackupStorageAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/vcenters/backup-storage'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryVCenterBackupStorageAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class UpdateResourceStackAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/cloudformation/stack/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'updateResourceStack'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=False,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'rollback': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'templateContent': ParamAnnotation(required=False,max_length=4194304,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'parameters': ParamAnnotation(required=False,max_length=524288,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(UpdateResourceStackAction, self).__init__()
        self.uuid = None
        self.name = None
        self.description = None
        self.rollback = None
        self.templateContent = None
        self.parameters = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteVmHostnameAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/vm-instances/{uuid}/hostnames'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteVmHostnameAction, self).__init__()
        self.uuid = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class ExpungeImageAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/images/{imageUuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'expungeImage'

    PARAMS = {
        'uuid': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'imageUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'backupStorageUuids': ParamAnnotation(required=False,non_empty=True,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(ExpungeImageAction, self).__init__()
        self.uuid = None
        self.imageUuid = None
        self.backupStorageUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteAliyunNasAccessGroupAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/nas/access/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteAliyunNasAccessGroupAction, self).__init__()
        self.uuid = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class StopVmInstanceAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/vm-instances/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'stopVmInstance'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'type': ParamAnnotation(required=False,valid_values=['grace','cold'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'stopHA': ParamAnnotation(required=False,valid_values=['true'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(StopVmInstanceAction, self).__init__()
        self.uuid = None
        self.type = None
        self.stopHA = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CreateAliyunNasAccessGroupRuleAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/nas/aliyun/rule'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'accessGroupUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'sourceCidrIp': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'rwAccessType': ParamAnnotation(required=False,valid_values=['RDWR','RDONLY'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'priority': ParamAnnotation(required=False,number_range=[1, 100],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CreateAliyunNasAccessGroupRuleAction, self).__init__()
        self.accessGroupUuid = None
        self.sourceCidrIp = None
        self.rwAccessType = None
        self.priority = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryL2VxlanNetworkAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/l2-networks/vxlan'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryL2VxlanNetworkAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class AddCephBackupStorageAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/backup-storage/ceph'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'monUrls': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=False,no_trim=False),
        'poolName': ParamAnnotation(required=False,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'url': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'type': ParamAnnotation(),
        'importImages': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(AddCephBackupStorageAction, self).__init__()
        self.monUrls = None
        self.poolName = None
        self.url = None
        self.name = None
        self.description = None
        self.type = None
        self.importImages = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class UpdateEcsVpcAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/hybrid/aliyun/vpc/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'updateEcsVpc'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=False,max_length=64,non_empty=False,null_elements=False,empty_string=False,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=256,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(UpdateEcsVpcAction, self).__init__()
        self.uuid = None
        self.name = None
        self.description = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CreateVpcUserVpnGatewayRemoteAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/hybrid/user-vpn'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'dataCenterUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'ip': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=False,no_trim=False),
        'name': ParamAnnotation(required=True,valid_regex_values=r'^[\u4e00-\u9fa5a-zA-Z][\u4e00-\u9fa5_a-zA-Z0-9-]+$',max_length=128,min_length=2,non_empty=False,null_elements=False,empty_string=False,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=1024,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CreateVpcUserVpnGatewayRemoteAction, self).__init__()
        self.dataCenterUuid = None
        self.ip = None
        self.name = None
        self.description = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class SyncVpcVpnConnectionFromRemoteAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/hybrid/vpn-connection/{dataCenterUuid}/sync'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'syncVpcVpnConnectionFromRemote'

    PARAMS = {
        'dataCenterUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(SyncVpcVpnConnectionFromRemoteAction, self).__init__()
        self.dataCenterUuid = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CleanInvalidLdapBindingAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/ldap/bindings/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'cleanInvalidLdapBinding'

    PARAMS = {
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CleanInvalidLdapBindingAction, self).__init__()
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class AttachL3NetworksToIPsecConnectionAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/ipsec/{uuid}/l3networks'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'l3NetworkUuids': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(AttachL3NetworksToIPsecConnectionAction, self).__init__()
        self.uuid = None
        self.l3NetworkUuids = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class GetFreeIpAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = 'null'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'l3NetworkUuid': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'ipRangeUuid': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'start': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(GetFreeIpAction, self).__init__()
        self.l3NetworkUuid = None
        self.ipRangeUuid = None
        self.start = None
        self.limit = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class ConvertVmFromForeignHypervisorAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/v2vs'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'url': ParamAnnotation(required=True,max_length=1024,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'conversionHostUuid': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'cpuNum': ParamAnnotation(required=True,number_range=[1, 1024],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'memorySize': ParamAnnotation(required=True,number_range=[1, 9223372036854775807],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'zoneUuid': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'clusterUuid': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'hostUuid': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'primaryStorageUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'l3NetworkUuids': ParamAnnotation(required=True,non_empty=True,null_elements=False,empty_string=True,no_trim=False),
        'defaultL3NetworkUuid': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'platform': ParamAnnotation(required=False,valid_values=['Linux','Windows','WindowsVirtio','Paravirtualization','Other'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'type': ParamAnnotation(required=False,valid_values=['UserVm','ApplianceVm'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'strategy': ParamAnnotation(required=False,valid_values=['InstantStart','JustConvert'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'convertStrategy': ParamAnnotation(required=False,valid_values=['CapacityOptimized','EfficiencyFirst'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'longJobName': ParamAnnotation(required=False,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'longJobDescription': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(ConvertVmFromForeignHypervisorAction, self).__init__()
        self.url = None
        self.name = None
        self.description = None
        self.conversionHostUuid = None
        self.cpuNum = None
        self.memorySize = None
        self.zoneUuid = None
        self.clusterUuid = None
        self.hostUuid = None
        self.primaryStorageUuid = None
        self.l3NetworkUuids = None
        self.defaultL3NetworkUuid = None
        self.platform = None
        self.type = None
        self.strategy = None
        self.convertStrategy = None
        self.longJobName = None
        self.longJobDescription = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class GetVipUsedPortsAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/vips/{uuid}/usedports'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'protocol': ParamAnnotation(required=True,valid_values=['TCP','UDP'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(GetVipUsedPortsAction, self).__init__()
        self.uuid = None
        self.protocol = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class AttachEipAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/eips/{eipUuid}/vm-instances/nics/{vmNicUuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'eipUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'vmNicUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'usedIpUuid': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(AttachEipAction, self).__init__()
        self.eipUuid = None
        self.vmNicUuid = None
        self.usedIpUuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DetachPolicyFromRoleAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/identities/policies/{policyUuid}/roles/{roleUuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'roleUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'policyUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DetachPolicyFromRoleAction, self).__init__()
        self.roleUuid = None
        self.policyUuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryAutoScalingGroupAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/autoscaling/groups'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryAutoScalingGroupAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryPolicyAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/accounts/policies'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryPolicyAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class UpdateUsbDeviceAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/usb-device/usb-devices/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'updateUsbDevice'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'state': ParamAnnotation(required=False,valid_values=['Enabled','Disabled'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(UpdateUsbDeviceAction, self).__init__()
        self.uuid = None
        self.name = None
        self.description = None
        self.state = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class GetVersionAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/management-nodes/actions'
    NEED_SESSION = False
    NEED_POLL = False
    PARAM_NAME = 'getVersion'

    PARAMS = {
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation()
    }

    def __init__(self):
        super(GetVersionAction, self).__init__()
        self.systemTags = None
        self.userTags = None


class SetVmRDPAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/vm-instances/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'setVmRDP'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'enable': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(SetVmRDPAction, self).__init__()
        self.uuid = None
        self.enable = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteEcsVSwitchRemoteAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/hybrid/aliyun/vswitch/remote/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteEcsVSwitchRemoteAction, self).__init__()
        self.uuid = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryPreconfigurationTemplateAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/baremetal/preconfigurations'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryPreconfigurationTemplateAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class RecoverVmBackupFromImageStoreBackupStorageAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/vm-backups/{groupUuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'recoverVmBackupFromImageStoreBackupStorage'

    PARAMS = {
        'groupUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'srcBackupStorageUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'dstBackupStorageUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(RecoverVmBackupFromImageStoreBackupStorageAction, self).__init__()
        self.groupUuid = None
        self.srcBackupStorageUuid = None
        self.dstBackupStorageUuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class GetCpuMemoryCapacityAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/hosts/capacities/cpu-memory'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'zoneUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'clusterUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'hostUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'hypervisorType': ParamAnnotation(required=False,valid_values=['KVM','ESX'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'all': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(GetCpuMemoryCapacityAction, self).__init__()
        self.zoneUuids = None
        self.clusterUuids = None
        self.hostUuids = None
        self.hypervisorType = None
        self.all = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CreateIAM2VirtualIDGroupAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/iam2/projects/{projectUuid}/groups'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'projectUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'attributes': ParamAnnotation(),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CreateIAM2VirtualIDGroupAction, self).__init__()
        self.projectUuid = None
        self.name = None
        self.description = None
        self.attributes = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CreateEcsSecurityGroupRemoteAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/hybrid/aliyun/security-group/remote'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'vpcUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=256,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=True,max_length=64,non_empty=False,null_elements=False,empty_string=False,no_trim=False),
        'strategy': ParamAnnotation(required=False,valid_values=['all','security','basic'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CreateEcsSecurityGroupRemoteAction, self).__init__()
        self.vpcUuid = None
        self.description = None
        self.name = None
        self.strategy = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CreateAccessKeyAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/accesskeys'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'accountUuid': ParamAnnotation(required=True,max_length=32,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'userUuid': ParamAnnotation(required=True,max_length=32,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CreateAccessKeyAction, self).__init__()
        self.accountUuid = None
        self.userUuid = None
        self.description = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class AddIpv6RangeByNetworkCidrAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/l3-networks/{l3NetworkUuid}/ipv6-ranges/by-cidr'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'name': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'l3NetworkUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'networkCidr': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'addressMode': ParamAnnotation(required=True,valid_values=['SLAAC','Stateful-DHCP','Stateless-DHCP'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(AddIpv6RangeByNetworkCidrAction, self).__init__()
        self.name = None
        self.description = None
        self.l3NetworkUuid = None
        self.networkCidr = None
        self.addressMode = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteAllEcsInstancesFromDataCenterAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/hybrid/aliyun/dc-ecs/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteAllEcsInstancesFromDataCenterAction, self).__init__()
        self.uuid = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class GetResourceNamesAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/resources/names'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'uuids': ParamAnnotation(required=True,non_empty=True,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(GetResourceNamesAction, self).__init__()
        self.uuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class RecoveryImageFromImageStoreBackupStorageAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/backup-storage/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'recoveryImageFromImageStoreBackupStorage'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'srcBackupStorageUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'dstBackupStorageUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=False,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=1024,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(RecoveryImageFromImageStoreBackupStorageAction, self).__init__()
        self.uuid = None
        self.srcBackupStorageUuid = None
        self.dstBackupStorageUuid = None
        self.name = None
        self.description = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CreateEipAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/eips'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'name': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'vipUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'vmNicUuid': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'usedIpUuid': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CreateEipAction, self).__init__()
        self.name = None
        self.description = None
        self.vipUuid = None
        self.vmNicUuid = None
        self.usedIpUuid = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class UpdateWebhookAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/web-hooks/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'updateWebhook'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=False,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'url': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'type': ParamAnnotation(required=False,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'opaque': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(UpdateWebhookAction, self).__init__()
        self.uuid = None
        self.name = None
        self.description = None
        self.url = None
        self.type = None
        self.opaque = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class UpdatePciDeviceSpecAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/pci-device/pci-device-specs/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'updatePciDeviceSpec'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=False,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'romContent': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'romVersion': ParamAnnotation(required=False,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'abandonSpecRom': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(UpdatePciDeviceSpecAction, self).__init__()
        self.uuid = None
        self.name = None
        self.description = None
        self.romContent = None
        self.romVersion = None
        self.abandonSpecRom = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CreateVirtualRouterOfferingAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/instance-offerings/virtual-routers'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'zoneUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'managementNetworkUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'imageUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'publicNetworkUuid': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'isDefault': ParamAnnotation(),
        'name': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'cpuNum': ParamAnnotation(required=True,number_range=[1, 1024],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'memorySize': ParamAnnotation(required=True,number_range=[1, 9223372036854775807],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'allocatorStrategy': ParamAnnotation(),
        'sortKey': ParamAnnotation(),
        'type': ParamAnnotation(),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CreateVirtualRouterOfferingAction, self).__init__()
        self.zoneUuid = None
        self.managementNetworkUuid = None
        self.imageUuid = None
        self.publicNetworkUuid = None
        self.isDefault = None
        self.name = None
        self.description = None
        self.cpuNum = None
        self.memorySize = None
        self.allocatorStrategy = None
        self.sortKey = None
        self.type = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DetachPortForwardingRuleAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/port-forwarding/{uuid}/vm-instances/nics'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DetachPortForwardingRuleAction, self).__init__()
        self.uuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CreateVmFromVmBackupAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/vm-instances/from/vm-backups/{groupUuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'name': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'groupUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'backupStorageUuid': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'instanceOfferingUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'l3NetworkUuids': ParamAnnotation(required=True,non_empty=True,null_elements=False,empty_string=True,no_trim=False),
        'type': ParamAnnotation(required=False,valid_values=['UserVm','ApplianceVm'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'zoneUuid': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'clusterUuid': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'hostUuid': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'primaryStorageUuidForRootVolume': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'primaryStorageUuidForDataVolume': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'rootVolumeSystemTags': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'dataVolumeSystemTags': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'defaultL3NetworkUuid': ParamAnnotation(),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CreateVmFromVmBackupAction, self).__init__()
        self.name = None
        self.groupUuid = None
        self.backupStorageUuid = None
        self.instanceOfferingUuid = None
        self.l3NetworkUuids = None
        self.type = None
        self.zoneUuid = None
        self.clusterUuid = None
        self.hostUuid = None
        self.primaryStorageUuidForRootVolume = None
        self.primaryStorageUuidForDataVolume = None
        self.description = None
        self.rootVolumeSystemTags = None
        self.dataVolumeSystemTags = None
        self.defaultL3NetworkUuid = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class LoginIAM2ProjectAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/iam2/projects/login'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = 'loginIAM2Project'

    PARAMS = {
        'projectName': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(LoginIAM2ProjectAction, self).__init__()
        self.projectName = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class RefreshLoadBalancerAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/load-balancers/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'refreshLoadBalancer'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(RefreshLoadBalancerAction, self).__init__()
        self.uuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class AddIpRangeAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/l3-networks/{l3NetworkUuid}/ip-ranges'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'l3NetworkUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'startIp': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'endIp': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'netmask': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'gateway': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(AddIpRangeAction, self).__init__()
        self.l3NetworkUuid = None
        self.name = None
        self.description = None
        self.startIp = None
        self.endIp = None
        self.netmask = None
        self.gateway = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class UpdateClusterAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/clusters/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'updateCluster'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=False,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(UpdateClusterAction, self).__init__()
        self.uuid = None
        self.name = None
        self.description = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DetachPciDeviceFromVmAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/pci-device/pci-devices/{pciDeviceUuid}/detach'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'pciDeviceUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'vmInstanceUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DetachPciDeviceFromVmAction, self).__init__()
        self.pciDeviceUuid = None
        self.vmInstanceUuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class ChangeSNSApplicationEndpointStateAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/sns/application-endpoints/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'changeSNSApplicationEndpointState'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'stateEvent': ParamAnnotation(required=True,valid_values=['enable','disable'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(ChangeSNSApplicationEndpointStateAction, self).__init__()
        self.uuid = None
        self.stateEvent = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class RemoveAttributesFromIAM2OrganizationAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/iam2/organizations/{uuid}/attributes'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'attributeUuids': ParamAnnotation(required=True,non_empty=True,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(RemoveAttributesFromIAM2OrganizationAction, self).__init__()
        self.uuid = None
        self.attributeUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryVolumeBackupAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/volume-backups'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryVolumeBackupAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteMediaAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/media/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteMediaAction, self).__init__()
        self.uuid = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class UpdateMonitorTriggerAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/monitoring/triggers/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'updateMonitorTrigger'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=False,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'expression': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'duration': ParamAnnotation(required=False,number_range=[1, 2147483647],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(UpdateMonitorTriggerAction, self).__init__()
        self.uuid = None
        self.name = None
        self.description = None
        self.expression = None
        self.duration = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryIAM2VirtualIDGroupAttributeAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/iam2/projects/groups/attributes/'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryIAM2VirtualIDGroupAttributeAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class GCAliyunSnapshotRemoteAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/hybrid/aliyun/snapshot/{dataCenterUuid}/gc'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'dataCenterUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(GCAliyunSnapshotRemoteAction, self).__init__()
        self.dataCenterUuid = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class UpdateScsiLunAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/storage-devices/scsi-lun/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'updateScsiLun'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=False,max_length=256,non_empty=False,null_elements=False,empty_string=False,no_trim=False),
        'state': ParamAnnotation(required=False,valid_values=['Enabled','Disabled'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(UpdateScsiLunAction, self).__init__()
        self.uuid = None
        self.name = None
        self.state = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class StartEcsInstanceAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/hybrid/aliyun/ecs/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'startEcsInstance'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(StartEcsInstanceAction, self).__init__()
        self.uuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QuerySharedBlockGroupPrimaryStorageHostRefAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/sharedblock-group/host-refs'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QuerySharedBlockGroupPrimaryStorageHostRefAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class ChangeIAM2VirtualIDGroupStateAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/iam2/projects/groups/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'changeIAM2VirtualIDGroupState'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'stateEvent': ParamAnnotation(required=True,valid_values=['enable','disable'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(ChangeIAM2VirtualIDGroupStateAction, self).__init__()
        self.uuid = None
        self.stateEvent = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteGCJobAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/gc-jobs/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteGCJobAction, self).__init__()
        self.uuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class UpdateAccountAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/accounts/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'updateAccount'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'password': ParamAnnotation(required=False,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=False,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(UpdateAccountAction, self).__init__()
        self.uuid = None
        self.password = None
        self.name = None
        self.description = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QuerySNSApplicationEndpointAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/sns/application-endpoints'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QuerySNSApplicationEndpointAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class AttachScsiLunToVmInstanceAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/vm-instances/{vmInstanceUuid}/scsi-lun/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'vmInstanceUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'disableMultiPathAttach': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(AttachScsiLunToVmInstanceAction, self).__init__()
        self.uuid = None
        self.vmInstanceUuid = None
        self.disableMultiPathAttach = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class UpdateVCenterAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/vcenters/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'updateVCenter'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=False,max_length=255,non_empty=False,null_elements=False,empty_string=False,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'username': ParamAnnotation(required=False,max_length=255,non_empty=True,null_elements=False,empty_string=True,no_trim=False),
        'password': ParamAnnotation(required=False,max_length=255,non_empty=True,null_elements=False,empty_string=True,no_trim=False),
        'domainName': ParamAnnotation(required=False,max_length=256,non_empty=True,null_elements=False,empty_string=True,no_trim=False),
        'port': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(UpdateVCenterAction, self).__init__()
        self.uuid = None
        self.name = None
        self.description = None
        self.username = None
        self.password = None
        self.domainName = None
        self.port = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class UpdateKVMHostAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/hosts/kvm/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'updateKVMHost'

    PARAMS = {
        'username': ParamAnnotation(required=False,max_length=255,non_empty=False,null_elements=False,empty_string=False,no_trim=False),
        'password': ParamAnnotation(required=False,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'sshPort': ParamAnnotation(required=False,number_range=[1, 65535],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=False,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'managementIp': ParamAnnotation(required=False,max_length=255,non_empty=False,null_elements=False,empty_string=False,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(UpdateKVMHostAction, self).__init__()
        self.username = None
        self.password = None
        self.sshPort = None
        self.uuid = None
        self.name = None
        self.description = None
        self.managementIp = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteAccessKeyAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/accesskeys/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteAccessKeyAction, self).__init__()
        self.uuid = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CreateL2VlanNetworkAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/l2-networks/vlan'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'vlan': ParamAnnotation(required=True,number_range=[1, 4094],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'zoneUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'physicalInterface': ParamAnnotation(required=True,max_length=1024,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'type': ParamAnnotation(),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CreateL2VlanNetworkAction, self).__init__()
        self.vlan = None
        self.name = None
        self.description = None
        self.zoneUuid = None
        self.physicalInterface = None
        self.type = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteEcsVpcRemoteAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/hybrid/aliyun/vpc/remote/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteEcsVpcRemoteAction, self).__init__()
        self.uuid = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class UpdateAliyunPanguPartitionAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/aliyun/pangu/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'updateAliyunPanguPartition'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=False,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'appName': ParamAnnotation(required=False,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'partitionName': ParamAnnotation(required=False,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(UpdateAliyunPanguPartitionAction, self).__init__()
        self.uuid = None
        self.name = None
        self.description = None
        self.appName = None
        self.partitionName = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteStackTemplateAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/cloudformation/template/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteStackTemplateAction, self).__init__()
        self.uuid = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CreateIPsecConnectionAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/ipsec'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'name': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'l3NetworkUuid': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'peerAddress': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'authMode': ParamAnnotation(required=False,valid_values=['psk','certs'],max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'authKey': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'vipUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'peerCidrs': ParamAnnotation(required=False,non_empty=True,null_elements=False,empty_string=True,no_trim=False),
        'ikeAuthAlgorithm': ParamAnnotation(required=False,valid_values=['md5','sha1','sha256','sha384','sha512'],max_length=32,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'ikeEncryptionAlgorithm': ParamAnnotation(required=False,valid_values=['3des','aes-128','aes-192','aes-256'],max_length=32,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'ikeDhGroup': ParamAnnotation(),
        'policyAuthAlgorithm': ParamAnnotation(required=False,valid_values=['md5','sha1','sha256','sha384','sha512'],max_length=32,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'policyEncryptionAlgorithm': ParamAnnotation(required=False,valid_values=['3des','aes-128','aes-192','aes-256'],max_length=32,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'pfs': ParamAnnotation(required=False,valid_values=['dh-group2','dh-group5','dh-group14','dh-group15','dh-group16','dh-group17','dh-group18','dh-group19','dh-group20','dh-group21','dh-group22','dh-group23','dh-group24','dh-group25','dh-group26'],max_length=32,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'policyMode': ParamAnnotation(required=False,valid_values=['tunnel','transport'],max_length=32,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'transformProtocol': ParamAnnotation(required=False,valid_values=['esp','ah','ah-esp'],max_length=32,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CreateIPsecConnectionAction, self).__init__()
        self.name = None
        self.description = None
        self.l3NetworkUuid = None
        self.peerAddress = None
        self.authMode = None
        self.authKey = None
        self.vipUuid = None
        self.peerCidrs = None
        self.ikeAuthAlgorithm = None
        self.ikeEncryptionAlgorithm = None
        self.ikeDhGroup = None
        self.policyAuthAlgorithm = None
        self.policyEncryptionAlgorithm = None
        self.pfs = None
        self.policyMode = None
        self.transformProtocol = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryCephPrimaryStoragePoolAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/primary-storage/ceph/pools'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryCephPrimaryStoragePoolAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryDataCenterFromLocalAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/hybrid/data-center'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryDataCenterFromLocalAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DetachTagFromResourcesAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/tags/{tagUuid}/resources'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'tagUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuids': ParamAnnotation(required=True,non_empty=True,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DetachTagFromResourcesAction, self).__init__()
        self.tagUuid = None
        self.resourceUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class AddRemoteCidrsToIPsecConnectionAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/ipsec/{uuid}/remote-cidrs'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'peerCidrs': ParamAnnotation(required=True,non_empty=True,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(AddRemoteCidrsToIPsecConnectionAction, self).__init__()
        self.uuid = None
        self.peerCidrs = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class RecoverDataVolumeAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/volumes/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'recoverDataVolume'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(RecoverDataVolumeAction, self).__init__()
        self.uuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class GetIAM2ProjectsOfVirtualIDAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/iam2/virtual-ids/projects'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(GetIAM2ProjectsOfVirtualIDAction, self).__init__()
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class ChangeVipStateAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/vips/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'changeVipState'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'stateEvent': ParamAnnotation(required=True,valid_values=['enable','disable'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(ChangeVipStateAction, self).__init__()
        self.uuid = None
        self.stateEvent = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class AttachDataVolumeToVmAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/volumes/{volumeUuid}/vm-instances/{vmInstanceUuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'vmInstanceUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'volumeUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(AttachDataVolumeToVmAction, self).__init__()
        self.vmInstanceUuid = None
        self.volumeUuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class ReloadLicenseAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/licenses/actions'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = 'reloadLicense'

    PARAMS = {
        'managementNodeUuids': ParamAnnotation(required=False,non_empty=True,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(ReloadLicenseAction, self).__init__()
        self.managementNodeUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class AddCephPrimaryStorageAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/primary-storage/ceph'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'monUrls': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=False,no_trim=False),
        'rootVolumePoolName': ParamAnnotation(required=False,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'dataVolumePoolName': ParamAnnotation(required=False,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'imageCachePoolName': ParamAnnotation(required=False,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'url': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'type': ParamAnnotation(),
        'zoneUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(AddCephPrimaryStorageAction, self).__init__()
        self.monUrls = None
        self.rootVolumePoolName = None
        self.dataVolumePoolName = None
        self.imageCachePoolName = None
        self.url = None
        self.name = None
        self.description = None
        self.type = None
        self.zoneUuid = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryL2NetworkAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/l2-networks'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryL2NetworkAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class UpdateBaremetalInstanceAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/baremetal/instances/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'updateBaremetalInstance'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=False,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'password': ParamAnnotation(required=False,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'platform': ParamAnnotation(required=False,valid_values=['Linux'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(UpdateBaremetalInstanceAction, self).__init__()
        self.uuid = None
        self.name = None
        self.description = None
        self.password = None
        self.platform = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteEcsImageLocalAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/hybrid/aliyun/image/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteEcsImageLocalAction, self).__init__()
        self.uuid = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CreateSNSEmailEndpointAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/sns/application-endpoints/emails'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'email': ParamAnnotation(required=True,max_length=1024,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'platformUuid': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CreateSNSEmailEndpointAction, self).__init__()
        self.email = None
        self.name = None
        self.description = None
        self.platformUuid = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CreateClusterAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/clusters'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'zoneUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'hypervisorType': ParamAnnotation(required=True,valid_values=['KVM','Simulator','baremetal'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'type': ParamAnnotation(required=False,valid_values=['zstack','baremetal'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CreateClusterAction, self).__init__()
        self.zoneUuid = None
        self.name = None
        self.description = None
        self.hypervisorType = None
        self.type = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class UpdateEipAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/eips/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'updateEip'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=False,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(UpdateEipAction, self).__init__()
        self.uuid = None
        self.name = None
        self.description = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryEcsSecurityGroupRuleFromLocalAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/hybrid/aliyun/security-group-rule'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryEcsSecurityGroupRuleFromLocalAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class AddAttributesToIAM2VirtualIDGroupAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/iam2/projects/groups/{uuid}/attributes'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'attributes': ParamAnnotation(required=True,non_empty=True,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(AddAttributesToIAM2VirtualIDGroupAction, self).__init__()
        self.uuid = None
        self.attributes = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class RemoveDnsFromVpcRouterAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/vpc/virtual-routers/{uuid}/dns'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'dns': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(RemoveDnsFromVpcRouterAction, self).__init__()
        self.uuid = None
        self.dns = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class StopBaremetalInstanceAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/baremetal/instances/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'stopBaremetalInstance'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'type': ParamAnnotation(required=False,valid_values=['grace','cold'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(StopBaremetalInstanceAction, self).__init__()
        self.uuid = None
        self.type = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CreateConnectionBetweenL3NetworkAndAliyunVSwitchAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/hybrid/aliyun/connections'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'l3networkUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'vpcUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'vbrUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'cpeIp': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=False,no_trim=False),
        'name': ParamAnnotation(required=True,max_length=128,non_empty=False,null_elements=False,empty_string=False,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=1024,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'direction': ParamAnnotation(required=True,valid_values=['in','out','both'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CreateConnectionBetweenL3NetworkAndAliyunVSwitchAction, self).__init__()
        self.l3networkUuid = None
        self.vpcUuid = None
        self.vbrUuid = None
        self.cpeIp = None
        self.name = None
        self.description = None
        self.direction = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class AttachL3NetworkToVmNicAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/nics/{vmNicUuid}/l3-networks/{l3NetworkUuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'vmNicUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'l3NetworkUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'staticIp': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(AttachL3NetworkToVmNicAction, self).__init__()
        self.vmNicUuid = None
        self.l3NetworkUuid = None
        self.staticIp = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteVpcVpnGatewayLocalAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/hybrid/vpn-gateway/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteVpcVpnGatewayLocalAction, self).__init__()
        self.uuid = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CreateOssBucketRemoteAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/hybrid/aliyun/oss-bucket/remote'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'dataCenterUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'bucketName': ParamAnnotation(required=True,max_length=128,non_empty=False,null_elements=False,empty_string=False,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=1024,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'ossDomain': ParamAnnotation(required=False,max_length=256,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'ossKey': ParamAnnotation(required=False,max_length=127,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'ossSecret': ParamAnnotation(required=False,max_length=127,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CreateOssBucketRemoteAction, self).__init__()
        self.dataCenterUuid = None
        self.bucketName = None
        self.description = None
        self.ossDomain = None
        self.ossKey = None
        self.ossSecret = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteSNSTextTemplateAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/zwatch/alarms/sns/text-templates/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteSNSTextTemplateAction, self).__init__()
        self.uuid = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryAliyunProxyVSwitchAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/aliyun-proxy/vpcs/vswitches'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryAliyunProxyVSwitchAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryV2VConversionHostAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/v2v-conversion-hosts'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryV2VConversionHostAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CreateSNSTopicAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/sns/topics'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'name': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CreateSNSTopicAction, self).__init__()
        self.name = None
        self.description = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class GetPciDeviceCandidatesForNewCreateVmAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/pci-device/candidate-pci-devices-for-new-create-vm'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'hostUuid': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'clusterUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'types': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(GetPciDeviceCandidatesForNewCreateVmAction, self).__init__()
        self.hostUuid = None
        self.clusterUuids = None
        self.types = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class AddImageAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/images'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'name': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'url': ParamAnnotation(required=True,max_length=1024,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'mediaType': ParamAnnotation(required=False,valid_values=['RootVolumeTemplate','ISO','DataVolumeTemplate'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'guestOsType': ParamAnnotation(required=False,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'system': ParamAnnotation(),
        'format': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'platform': ParamAnnotation(required=False,valid_values=['Linux','Windows','Other','Paravirtualization','WindowsVirtio'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'backupStorageUuids': ParamAnnotation(required=True,non_empty=True,null_elements=False,empty_string=True,no_trim=False),
        'type': ParamAnnotation(),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(AddImageAction, self).__init__()
        self.name = None
        self.description = None
        self.url = None
        self.mediaType = None
        self.guestOsType = None
        self.system = None
        self.format = None
        self.platform = None
        self.backupStorageUuids = None
        self.type = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteAccountAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/accounts/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteAccountAction, self).__init__()
        self.uuid = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class RemoveHostRouteFromL3NetworkAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/l3-networks/{l3NetworkUuid}/hostroute'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'l3NetworkUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'prefix': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(RemoveHostRouteFromL3NetworkAction, self).__init__()
        self.l3NetworkUuid = None
        self.prefix = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class UpdatePrimaryStorageAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/primary-storage/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'updatePrimaryStorage'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=False,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'url': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(UpdatePrimaryStorageAction, self).__init__()
        self.uuid = None
        self.name = None
        self.description = None
        self.url = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class AttachPolicyToRoleAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/identities/policies/{policyUuid}/roles/{roleUuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'roleUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'policyUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(AttachPolicyToRoleAction, self).__init__()
        self.roleUuid = None
        self.policyUuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CreateRootVolumeTemplateFromRootVolumeAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/images/root-volume-templates/from/volumes/{rootVolumeUuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'name': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'guestOsType': ParamAnnotation(),
        'backupStorageUuids': ParamAnnotation(required=False,non_empty=True,null_elements=False,empty_string=True,no_trim=False),
        'rootVolumeUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'platform': ParamAnnotation(required=False,valid_values=['Linux','Windows','Other','Paravirtualization','WindowsVirtio'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'system': ParamAnnotation(),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CreateRootVolumeTemplateFromRootVolumeAction, self).__init__()
        self.name = None
        self.description = None
        self.guestOsType = None
        self.backupStorageUuids = None
        self.rootVolumeUuid = None
        self.platform = None
        self.system = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DecodeStackTemplateAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/cloudformation/stack/preview/resource'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = 'params'

    PARAMS = {
        'type': ParamAnnotation(required=False,valid_values=['zstack'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'templateContent': ParamAnnotation(required=False,max_length=4194304,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'uuid': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'parameters': ParamAnnotation(required=False,max_length=524288,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DecodeStackTemplateAction, self).__init__()
        self.type = None
        self.templateContent = None
        self.uuid = None
        self.parameters = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class ChangePrimaryStorageStateAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/primary-storage/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'changePrimaryStorageState'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'stateEvent': ParamAnnotation(required=True,valid_values=['enable','disable','maintain','deleting'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(ChangePrimaryStorageStateAction, self).__init__()
        self.uuid = None
        self.stateEvent = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class ChangeBackupStorageStateAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/backup-storage/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'changeBackupStorageState'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'stateEvent': ParamAnnotation(required=True,valid_values=['enable','disable'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(ChangeBackupStorageStateAction, self).__init__()
        self.uuid = None
        self.stateEvent = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class GetVmRDPAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/vm-instances/{uuid}/rdp'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(GetVmRDPAction, self).__init__()
        self.uuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CreateBaremetalChassisAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/baremetal/chassis'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'name': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=False,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'clusterUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'ipmiAddress': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'ipmiPort': ParamAnnotation(required=False,number_range=[1, 65535],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'ipmiUsername': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'ipmiPassword': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CreateBaremetalChassisAction, self).__init__()
        self.name = None
        self.description = None
        self.clusterUuid = None
        self.ipmiAddress = None
        self.ipmiPort = None
        self.ipmiUsername = None
        self.ipmiPassword = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CreateVRouterOspfAreaAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/routerArea'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'areaId': ParamAnnotation(required=True,max_length=64,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'areaAuth': ParamAnnotation(required=False,max_length=16,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'areaType': ParamAnnotation(required=False,max_length=16,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'password': ParamAnnotation(required=False,max_length=16,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'keyId': ParamAnnotation(required=False,number_range=[1, 255],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CreateVRouterOspfAreaAction, self).__init__()
        self.areaId = None
        self.areaAuth = None
        self.areaType = None
        self.password = None
        self.keyId = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class AddIpv6RangeAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/l3-networks/{l3NetworkUuid}/ipv6-ranges'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'l3NetworkUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'startIp': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'endIp': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'gateway': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'prefixLen': ParamAnnotation(required=True,number_range=[8, 126],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'addressMode': ParamAnnotation(required=True,valid_values=['SLAAC','Stateful-DHCP','Stateless-DHCP'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(AddIpv6RangeAction, self).__init__()
        self.l3NetworkUuid = None
        self.name = None
        self.description = None
        self.startIp = None
        self.endIp = None
        self.gateway = None
        self.prefixLen = None
        self.addressMode = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class PrometheusQueryVmMonitoringDataAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/prometheus/vm-instances'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'vmUuids': ParamAnnotation(required=True,non_empty=True,null_elements=False,empty_string=True,no_trim=False),
        'instant': ParamAnnotation(),
        'startTime': ParamAnnotation(required=False,number_range=[0, 9223372036854775807],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'endTime': ParamAnnotation(required=False,number_range=[0, 9223372036854775807],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'step': ParamAnnotation(),
        'expression': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'relativeTime': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(PrometheusQueryVmMonitoringDataAction, self).__init__()
        self.vmUuids = None
        self.instant = None
        self.startTime = None
        self.endTime = None
        self.step = None
        self.expression = None
        self.relativeTime = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class ChangeIAM2OrganizationStateAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/iam2/organizations/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'changeIAM2OrganizationState'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'stateEvent': ParamAnnotation(required=True,valid_values=['enable','disable'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(ChangeIAM2OrganizationStateAction, self).__init__()
        self.uuid = None
        self.stateEvent = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class SetVpcVRouterNetworkServiceStateAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/vpc/virtual-routers/{uuid}/networkservicestate'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'networkService': ParamAnnotation(required=True,valid_values=['SNAT'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'state': ParamAnnotation(required=True,valid_values=['enable','disable'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(SetVpcVRouterNetworkServiceStateAction, self).__init__()
        self.uuid = None
        self.networkService = None
        self.state = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class GetCandidateVmNicsForLoadBalancerAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/load-balancers/listeners/{listenerUuid}/vm-instances/candidate-nics'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'listenerUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(GetCandidateVmNicsForLoadBalancerAction, self).__init__()
        self.listenerUuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class UpdateZoneAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/zones/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'updateZone'

    PARAMS = {
        'name': ParamAnnotation(required=False,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(UpdateZoneAction, self).__init__()
        self.name = None
        self.description = None
        self.uuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryFusionstorBackupStorageAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/backup-storage/fusionstor'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryFusionstorBackupStorageAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class UpdateVRouterOspfAreaAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/routerArea/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'updateVRouterOspfArea'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'areaAuth': ParamAnnotation(required=False,max_length=16,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'areaType': ParamAnnotation(required=False,max_length=16,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'password': ParamAnnotation(required=False,max_length=16,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'keyId': ParamAnnotation(required=False,number_range=[1, 255],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(UpdateVRouterOspfAreaAction, self).__init__()
        self.uuid = None
        self.areaAuth = None
        self.areaType = None
        self.password = None
        self.keyId = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryVpcVpnGatewayFromLocalAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/hybrid/vpc-vpn'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryVpcVpnGatewayFromLocalAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DetachOssBucketFromEcsDataCenterAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/hybrid/aliyun/oss-bucket/{ossBucketUuid}/detach'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'detachOssBucketFromEcsDataCenter'

    PARAMS = {
        'ossBucketUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DetachOssBucketFromEcsDataCenterAction, self).__init__()
        self.ossBucketUuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class AddHostRouteToL3NetworkAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/l3-networks/{l3NetworkUuid}/hostroute'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'l3NetworkUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'prefix': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'nexthop': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(AddHostRouteToL3NetworkAction, self).__init__()
        self.l3NetworkUuid = None
        self.prefix = None
        self.nexthop = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class SyncEcsSecurityGroupFromRemoteAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/hybrid/aliyun/security-group/{ecsVpcUuid}/sync'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'syncEcsSecurityGroupFromRemote'

    PARAMS = {
        'ecsVpcUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'securityGroupId': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(SyncEcsSecurityGroupFromRemoteAction, self).__init__()
        self.ecsVpcUuid = None
        self.securityGroupId = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class ChangeAccessKeyStateAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/accesskeys/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'changeAccessKeyState'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'stateEvent': ParamAnnotation(required=True,valid_values=['enable','disable'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(ChangeAccessKeyStateAction, self).__init__()
        self.uuid = None
        self.stateEvent = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CreateSNSEmailPlatformAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/sns/application-platforms/email'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'smtpServer': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'smtpPort': ParamAnnotation(required=True,number_range=[1, 65535],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'username': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'password': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'encryptType': ParamAnnotation(required=False,valid_values=['SSL','STARTTLS','NONE'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CreateSNSEmailPlatformAction, self).__init__()
        self.smtpServer = None
        self.smtpPort = None
        self.username = None
        self.password = None
        self.encryptType = None
        self.name = None
        self.description = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class PrometheusQueryMetadataAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/prometheus/meta-data'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'matches': ParamAnnotation(required=True,non_empty=True,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(PrometheusQueryMetadataAction, self).__init__()
        self.matches = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class GetInterdependentL3NetworksImagesAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/images-l3networks/dependencies'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'zoneUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'l3NetworkUuids': ParamAnnotation(required=False,non_empty=True,null_elements=False,empty_string=True,no_trim=False),
        'imageUuid': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(GetInterdependentL3NetworksImagesAction, self).__init__()
        self.zoneUuid = None
        self.l3NetworkUuids = None
        self.imageUuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CreatePortForwardingRuleAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/port-forwarding'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'vipUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'vipPortStart': ParamAnnotation(required=True,number_range=[1, 65535],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'vipPortEnd': ParamAnnotation(required=False,number_range=[1, 65535],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'privatePortStart': ParamAnnotation(required=False,number_range=[1, 65535],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'privatePortEnd': ParamAnnotation(required=False,number_range=[1, 65535],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'protocolType': ParamAnnotation(required=True,valid_values=['TCP','UDP'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'vmNicUuid': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'allowedCidr': ParamAnnotation(),
        'name': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CreatePortForwardingRuleAction, self).__init__()
        self.vipUuid = None
        self.vipPortStart = None
        self.vipPortEnd = None
        self.privatePortStart = None
        self.privatePortEnd = None
        self.protocolType = None
        self.vmNicUuid = None
        self.allowedCidr = None
        self.name = None
        self.description = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryAliyunRouterInterfaceFromLocalAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/hybrid/aliyun/router-interface'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryAliyunRouterInterfaceFromLocalAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CleanV2VConversionCacheAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/v2v/conversion/host/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'cleanV2VConversionCache'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CleanV2VConversionCacheAction, self).__init__()
        self.uuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class ChangeSNSTopicStateAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/zwatch/topics/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'changeSNSTopicState'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'stateEvent': ParamAnnotation(required=True,valid_values=['enable','disable'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(ChangeSNSTopicStateAction, self).__init__()
        self.uuid = None
        self.stateEvent = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class GetAvailableTriggersAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/scheduler/triggers/available'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(GetAvailableTriggersAction, self).__init__()
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CreatePciDeviceOfferingAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/pci-device/pci-device-offerings'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'name': ParamAnnotation(required=False,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'vendorId': ParamAnnotation(required=True,max_length=4,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deviceId': ParamAnnotation(required=True,max_length=4,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'subvendorId': ParamAnnotation(required=False,max_length=4,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'subdeviceId': ParamAnnotation(required=False,max_length=4,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CreatePciDeviceOfferingAction, self).__init__()
        self.name = None
        self.description = None
        self.vendorId = None
        self.deviceId = None
        self.subvendorId = None
        self.subdeviceId = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class GetTrashOnBackupStorageAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/backup-storage/trash'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(GetTrashOnBackupStorageAction, self).__init__()
        self.uuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class GetVmAttachableDataVolumeAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/vm-instances/{vmInstanceUuid}/data-volume-candidates'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'vmInstanceUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(GetVmAttachableDataVolumeAction, self).__init__()
        self.vmInstanceUuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class AttachSecurityGroupToL3NetworkAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/security-groups/{securityGroupUuid}/l3-networks/{l3NetworkUuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'securityGroupUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'l3NetworkUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(AttachSecurityGroupToL3NetworkAction, self).__init__()
        self.securityGroupUuid = None
        self.l3NetworkUuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CreateResourcePriceAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/billings/prices'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'resourceName': ParamAnnotation(required=True,valid_values=['cpu','memory','rootVolume','dataVolume','snapShot','gpu','pubIpVmNicBandwidthOut','pubIpVmNicBandwidthIn','pubIpVipBandwidthOut','pubIpVipBandwidthIn'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUnit': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'timeUnit': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'price': ParamAnnotation(required=True,number_range=[0, 9223372036854775807],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'accountUuid': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'dateInLong': ParamAnnotation(required=False,number_range=[0, 9223372036854775807],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CreateResourcePriceAction, self).__init__()
        self.resourceName = None
        self.resourceUnit = None
        self.timeUnit = None
        self.price = None
        self.accountUuid = None
        self.dateInLong = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryHybridKeySecretAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/hybrid/hybrid/key'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryHybridKeySecretAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CreateVmCdRomAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/vm-instances/cdroms'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'name': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'vmInstanceUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'isoUuid': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CreateVmCdRomAction, self).__init__()
        self.name = None
        self.vmInstanceUuid = None
        self.isoUuid = None
        self.description = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class RecoverIAM2ProjectAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/iam2/projects/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'recoverIAM2Project'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(RecoverIAM2ProjectAction, self).__init__()
        self.uuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class ExportImageFromBackupStorageAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/backup-storage/{backupStorageUuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'exportImageFromBackupStorage'

    PARAMS = {
        'backupStorageUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'imageUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(ExportImageFromBackupStorageAction, self).__init__()
        self.backupStorageUuid = None
        self.imageUuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class UpdateEcsImageAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/hybrid/aliyun/image/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'updateEcsImage'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=1024,non_empty=False,null_elements=False,empty_string=False,no_trim=False),
        'name': ParamAnnotation(required=False,valid_regex_values=r'[A-Za-z\u4e00-\u9fa5]{1}[A-Za-z0-9-_\u4e00-\u9fa5]{1,127}',max_length=128,min_length=2,non_empty=False,null_elements=False,empty_string=False,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(UpdateEcsImageAction, self).__init__()
        self.uuid = None
        self.description = None
        self.name = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class UpdateStackTemplateAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/cloudformation/template/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'updateStackTemplate'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=False,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'state': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'templateContent': ParamAnnotation(required=False,max_length=4194304,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(UpdateStackTemplateAction, self).__init__()
        self.uuid = None
        self.name = None
        self.description = None
        self.state = None
        self.templateContent = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class UpdateDahoVllAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/hybrid/daho/vlls/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'updateDahoVll'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=False,max_length=32,non_empty=False,null_elements=False,empty_string=False,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=128,non_empty=False,null_elements=False,empty_string=False,no_trim=False),
        'bandWidthMbps': ParamAnnotation(required=False,number_range=[1, 10240],non_empty=False,null_elements=False,empty_string=False,no_trim=False),
        'expirePolicy': ParamAnnotation(required=False,valid_values=['shutdown','renewal'],non_empty=False,null_elements=False,empty_string=False,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(UpdateDahoVllAction, self).__init__()
        self.uuid = None
        self.name = None
        self.description = None
        self.bandWidthMbps = None
        self.expirePolicy = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteSNSTopicAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/sns/topics/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteSNSTopicAction, self).__init__()
        self.uuid = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class GetDataCenterFromRemoteAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/hybrid/data-center/remote'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'type': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'endpoint': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(GetDataCenterFromRemoteAction, self).__init__()
        self.type = None
        self.endpoint = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteCephPrimaryStoragePoolAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/primary-storage/ceph/pools/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteCephPrimaryStoragePoolAction, self).__init__()
        self.uuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CleanUpTrashOnBackupStorageAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/backup-storage/{uuid}/trash/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'cleanUpTrashOnBackupStorage'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'trashId': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CleanUpTrashOnBackupStorageAction, self).__init__()
        self.uuid = None
        self.trashId = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteDahoCloudConnectionAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/hybrid/daho/cloud_connections/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteDahoCloudConnectionAction, self).__init__()
        self.uuid = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class ReconnectImageStoreBackupStorageAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/backup-storage/image-store/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'reconnectImageStoreBackupStorage'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(ReconnectImageStoreBackupStorageAction, self).__init__()
        self.uuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class AttachHybridEipToEcsAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/hybrid/eip/{eipUuid}/attach'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'eipUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'ecsUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'type': ParamAnnotation(required=True,valid_values=['aliyun'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(AttachHybridEipToEcsAction, self).__init__()
        self.eipUuid = None
        self.ecsUuid = None
        self.type = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryVolumeSnapshotTreeAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/volume-snapshots/trees'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryVolumeSnapshotTreeAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DetachVRouterRouteTableFromVRouterAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/vrouter-route-tables/{routeTableUuid}/detach'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'routeTableUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'virtualRouterVmUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DetachVRouterRouteTableFromVRouterAction, self).__init__()
        self.routeTableUuid = None
        self.virtualRouterVmUuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CreateL2VxlanNetworkPoolAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/l2-networks/vxlan-pool'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'name': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'zoneUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'physicalInterface': ParamAnnotation(required=False,max_length=1024,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'type': ParamAnnotation(),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CreateL2VxlanNetworkPoolAction, self).__init__()
        self.name = None
        self.description = None
        self.zoneUuid = None
        self.physicalInterface = None
        self.type = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class GetIdentityZoneFromRemoteAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/hybrid/identity-zone/remote'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'type': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'dataCenterUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'regionId': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(GetIdentityZoneFromRemoteAction, self).__init__()
        self.type = None
        self.dataCenterUuid = None
        self.regionId = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class KvmRunShellAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/hosts/kvm/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'kvmRunShell'

    PARAMS = {
        'hostUuids': ParamAnnotation(required=True,non_empty=True,null_elements=False,empty_string=True,no_trim=False),
        'script': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(KvmRunShellAction, self).__init__()
        self.hostUuids = None
        self.script = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CreateSNSTextTemplateAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/zwatch/alarms/sns/text-templates'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'name': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'applicationPlatformType': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'template': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'recoveryTemplate': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'defaultTemplate': ParamAnnotation(),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CreateSNSTextTemplateAction, self).__init__()
        self.name = None
        self.description = None
        self.applicationPlatformType = None
        self.template = None
        self.recoveryTemplate = None
        self.defaultTemplate = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryHybridEipFromLocalAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/hybrid/eip'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryHybridEipFromLocalAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class SetVmHostnameAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/vm-instances/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'setVmHostname'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'hostname': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(SetVmHostnameAction, self).__init__()
        self.uuid = None
        self.hostname = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class UpdateEcsInstanceVncPasswordAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/hybrid/aliyun/{uuid}/ecs-vnc'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'password': ParamAnnotation(required=True,valid_regex_values=r'[A-Za-z0-9]{6}',max_length=6,min_length=6,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(UpdateEcsInstanceVncPasswordAction, self).__init__()
        self.uuid = None
        self.password = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteIAM2TicketFlowAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/tickets/flow/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteIAM2TicketFlowAction, self).__init__()
        self.uuid = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class ChangeClusterStateAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/clusters/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'changeClusterState'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'stateEvent': ParamAnnotation(required=True,valid_values=['enable','disable'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(ChangeClusterStateAction, self).__init__()
        self.uuid = None
        self.stateEvent = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class UpdateAliyunNasAccessGroupAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/nas/aliyun/access'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'updateAliyunNasAccessGroup'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=1024,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(UpdateAliyunNasAccessGroupAction, self).__init__()
        self.uuid = None
        self.description = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class GetElaborationsAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/errorcode/elaborations'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'category': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'regex': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(GetElaborationsAction, self).__init__()
        self.category = None
        self.regex = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteAliyunRouterInterfaceRemoteAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/hybrid/aliyun/router-interface/remote/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'vRouterType': ParamAnnotation(required=True,valid_values=['vrouter','vbr'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteAliyunRouterInterfaceRemoteAction, self).__init__()
        self.uuid = None
        self.vRouterType = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CreateAliyunNasMountTargetAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/nas/aliyun/mount'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'nasAccessGroupUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'vSwitchUuid': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'nasFSUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=False,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=1024,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CreateAliyunNasMountTargetAction, self).__init__()
        self.nasAccessGroupUuid = None
        self.vSwitchUuid = None
        self.nasFSUuid = None
        self.name = None
        self.description = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QuerySecurityGroupRuleAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/security-groups/rules'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QuerySecurityGroupRuleAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryNasFileSystemAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/primary-storage/nas'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryNasFileSystemAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class QueryVirtualRouterVmAction(QueryAction):
    HTTP_METHOD = 'GET'
    PATH = '/vm-instances/appliances/virtual-routers'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'conditions': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'limit': ParamAnnotation(),
        'start': ParamAnnotation(),
        'count': ParamAnnotation(),
        'groupBy': ParamAnnotation(),
        'replyWithCount': ParamAnnotation(),
        'sortBy': ParamAnnotation(),
        'sortDirection': ParamAnnotation(required=False,valid_values=['asc','desc'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'fields': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(QueryVirtualRouterVmAction, self).__init__()
        self.conditions = None
        self.limit = None
        self.start = None
        self.count = None
        self.groupBy = None
        self.replyWithCount = None
        self.sortBy = None
        self.sortDirection = None
        self.fields = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CreateEcsVpcRemoteAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/hybrid/aliyun/vpc'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'dataCenterUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'cidrBlock': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=False,no_trim=False),
        'name': ParamAnnotation(required=True,max_length=64,non_empty=False,null_elements=False,empty_string=False,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=256,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'vRouterName': ParamAnnotation(required=True,valid_regex_values=r'[A-Za-z]{1}[A-Za-z0-9-_]{1,127}',non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CreateEcsVpcRemoteAction, self).__init__()
        self.dataCenterUuid = None
        self.cidrBlock = None
        self.name = None
        self.description = None
        self.vRouterName = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CreateUserAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/accounts/users'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'name': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'password': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CreateUserAction, self).__init__()
        self.name = None
        self.password = None
        self.description = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteAutoScalingRuleTriggerAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/autoscaling/groups/rules/triggers/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'deleteMode': ParamAnnotation(),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteAutoScalingRuleTriggerAction, self).__init__()
        self.uuid = None
        self.deleteMode = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class DeleteLdapBindingAction(AbstractAction):
    HTTP_METHOD = 'DELETE'
    PATH = '/ldap/bindings/{uuid}'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,max_length=32,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(DeleteLdapBindingAction, self).__init__()
        self.uuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class ChangeLoadBalancerListenerAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/load-balancers/listeners/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'changeLoadBalancerListener'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'connectionIdleTimeout': ParamAnnotation(required=False,number_range=[0, 2147483647],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'maxConnection': ParamAnnotation(required=False,number_range=[0, 100000],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'balancerAlgorithm': ParamAnnotation(required=False,valid_values=['roundrobin','leastconn','source'],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'healthCheckTarget': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'healthyThreshold': ParamAnnotation(required=False,number_range=[1, 2147483647],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'unhealthyThreshold': ParamAnnotation(required=False,number_range=[1, 2147483647],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'healthCheckInterval': ParamAnnotation(required=False,number_range=[1, 2147483647],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(ChangeLoadBalancerListenerAction, self).__init__()
        self.uuid = None
        self.connectionIdleTimeout = None
        self.maxConnection = None
        self.balancerAlgorithm = None
        self.healthCheckTarget = None
        self.healthyThreshold = None
        self.unhealthyThreshold = None
        self.healthCheckInterval = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class CreateBaremetalPxeServerAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/baremetal/pxeservers'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'zoneUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=False,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'hostname': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'sshUsername': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'sshPassword': ParamAnnotation(required=True,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'sshPort': ParamAnnotation(required=False,number_range=[1, 65535],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'storagePath': ParamAnnotation(required=True,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'dhcpInterface': ParamAnnotation(required=True,max_length=128,non_empty=False,null_elements=False,empty_string=False,no_trim=False),
        'dhcpRangeBegin': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'dhcpRangeEnd': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'dhcpRangeNetmask': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'resourceUuid': ParamAnnotation(),
        'tagUuids': ParamAnnotation(required=False,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(CreateBaremetalPxeServerAction, self).__init__()
        self.zoneUuid = None
        self.name = None
        self.description = None
        self.hostname = None
        self.sshUsername = None
        self.sshPassword = None
        self.sshPort = None
        self.storagePath = None
        self.dhcpInterface = None
        self.dhcpRangeBegin = None
        self.dhcpRangeEnd = None
        self.dhcpRangeNetmask = None
        self.resourceUuid = None
        self.tagUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class GetVmQgaAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/vm-instances/{uuid}/qga'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(GetVmQgaAction, self).__init__()
        self.uuid = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class AddVmNicToSecurityGroupAction(AbstractAction):
    HTTP_METHOD = 'POST'
    PATH = '/security-groups/{securityGroupUuid}/vm-instances/nics'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'params'

    PARAMS = {
        'securityGroupUuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'vmNicUuids': ParamAnnotation(required=True,non_empty=True,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(AddVmNicToSecurityGroupAction, self).__init__()
        self.securityGroupUuid = None
        self.vmNicUuids = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class GetDatabaseBackupFromImageStoreAction(AbstractAction):
    HTTP_METHOD = 'GET'
    PATH = '/database-backups/image-store'
    NEED_SESSION = True
    NEED_POLL = False
    PARAM_NAME = ''

    PARAMS = {
        'url': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=False,no_trim=False),
        'registryPort': ParamAnnotation(required=False,number_range=[1, 65535],non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(GetDatabaseBackupFromImageStoreAction, self).__init__()
        self.url = None
        self.registryPort = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None


class UpdateIAM2VirtualIDGroupAction(AbstractAction):
    HTTP_METHOD = 'PUT'
    PATH = '/iam2/projects/groups/{uuid}/actions'
    NEED_SESSION = True
    NEED_POLL = True
    PARAM_NAME = 'updateIAM2VirtualIDGroup'

    PARAMS = {
        'uuid': ParamAnnotation(required=True,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'name': ParamAnnotation(required=False,max_length=255,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'description': ParamAnnotation(required=False,max_length=2048,non_empty=False,null_elements=False,empty_string=True,no_trim=False),
        'systemTags': ParamAnnotation(),
        'userTags': ParamAnnotation(),
        'sessionId': ParamAnnotation(required=False),
        'accessKeyId': ParamAnnotation(required=False),
        'accessKeySecret': ParamAnnotation(required=False)
    }

    def __init__(self):
        super(UpdateIAM2VirtualIDGroupAction, self).__init__()
        self.uuid = None
        self.name = None
        self.description = None
        self.systemTags = None
        self.userTags = None
        self.sessionId = None
        self.accessKeyId = None
        self.accessKeySecret = None
